//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Abil.galaxy generated from Abil.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCAbil
const int c_classIdCAbil = 0;
const int c_classIdCAbilProgress = 1;
const int c_classIdCAbilEffect = 2;
const int c_classIdCAbilQueueable = 3;
const int c_classIdCAbilRedirect = 4;
const int c_classIdCAbilArmMagazine = 5;
const int c_classIdCAbilAttack = 6;
const int c_classIdCAbilAugment = 7;
const int c_classIdCAbilBattery = 8;
const int c_classIdCAbilBeacon = 9;
const int c_classIdCAbilBehavior = 10;
const int c_classIdCAbilBuild = 11;
const int c_classIdCAbilBuildable = 12;
const int c_classIdCAbilEffectInstant = 13;
const int c_classIdCAbilEffectTarget = 14;
const int c_classIdCAbilHarvest = 15;
const int c_classIdCAbilInteract = 16;
const int c_classIdCAbilInventory = 17;
const int c_classIdCAbilLearn = 18;
const int c_classIdCAbilMerge = 19;
const int c_classIdCAbilMergeable = 20;
const int c_classIdCAbilMorph = 21;
const int c_classIdCAbilMorphPlacement = 22;
const int c_classIdCAbilMove = 23;
const int c_classIdCAbilPawn = 24;
const int c_classIdCAbilQueue = 25;
const int c_classIdCAbilRally = 26;
const int c_classIdCAbilRedirectInstant = 27;
const int c_classIdCAbilRedirectTarget = 28;
const int c_classIdCAbilResearch = 29;
const int c_classIdCAbilRevive = 30;
const int c_classIdCAbilSpecialize = 31;
const int c_classIdCAbilStop = 32;
const int c_classIdCAbilTrain = 33;
const int c_classIdCAbilTransport = 34;
const int c_classIdCAbilWarpable = 35;
const int c_classIdCAbilWarpTrain = 36;
const string c_classIdCAbilName = "CAbil";
const string c_classIdCAbilProgressName = "CAbilProgress";
const string c_classIdCAbilEffectName = "CAbilEffect";
const string c_classIdCAbilQueueableName = "CAbilQueueable";
const string c_classIdCAbilRedirectName = "CAbilRedirect";
const string c_classIdCAbilArmMagazineName = "CAbilArmMagazine";
const string c_classIdCAbilAttackName = "CAbilAttack";
const string c_classIdCAbilAugmentName = "CAbilAugment";
const string c_classIdCAbilBatteryName = "CAbilBattery";
const string c_classIdCAbilBeaconName = "CAbilBeacon";
const string c_classIdCAbilBehaviorName = "CAbilBehavior";
const string c_classIdCAbilBuildName = "CAbilBuild";
const string c_classIdCAbilBuildableName = "CAbilBuildable";
const string c_classIdCAbilEffectInstantName = "CAbilEffectInstant";
const string c_classIdCAbilEffectTargetName = "CAbilEffectTarget";
const string c_classIdCAbilHarvestName = "CAbilHarvest";
const string c_classIdCAbilInteractName = "CAbilInteract";
const string c_classIdCAbilInventoryName = "CAbilInventory";
const string c_classIdCAbilLearnName = "CAbilLearn";
const string c_classIdCAbilMergeName = "CAbilMerge";
const string c_classIdCAbilMergeableName = "CAbilMergeable";
const string c_classIdCAbilMorphName = "CAbilMorph";
const string c_classIdCAbilMorphPlacementName = "CAbilMorphPlacement";
const string c_classIdCAbilMoveName = "CAbilMove";
const string c_classIdCAbilPawnName = "CAbilPawn";
const string c_classIdCAbilQueueName = "CAbilQueue";
const string c_classIdCAbilRallyName = "CAbilRally";
const string c_classIdCAbilRedirectInstantName = "CAbilRedirectInstant";
const string c_classIdCAbilRedirectTargetName = "CAbilRedirectTarget";
const string c_classIdCAbilResearchName = "CAbilResearch";
const string c_classIdCAbilReviveName = "CAbilRevive";
const string c_classIdCAbilSpecializeName = "CAbilSpecialize";
const string c_classIdCAbilStopName = "CAbilStop";
const string c_classIdCAbilTrainName = "CAbilTrain";
const string c_classIdCAbilTransportName = "CAbilTransport";
const string c_classIdCAbilWarpableName = "CAbilWarpable";
const string c_classIdCAbilWarpTrainName = "CAbilWarpTrain";

//  EAbilBehaviorStage
const int c_abilBehaviorStageUntoggled = 0;
const int c_abilBehaviorStageToggled = 1;
const string c_abilBehaviorStageUntoggledName = "Untoggled";
const string c_abilBehaviorStageToggledName = "Toggled";

//  EAbilBuildStage
const int c_abilBuildStageApproach = 0;
const int c_abilBuildStageWait = 1;
const int c_abilBuildStageConstruct = 2;
const int c_abilBuildStageHalt = 3;
const int c_abilBuildStageResume = 4;
const int c_abilBuildStageFinish = 5;
const int c_abilBuildStageCollide = 6;
const string c_abilBuildStageApproachName = "Approach";
const string c_abilBuildStageWaitName = "Wait";
const string c_abilBuildStageConstructName = "Construct";
const string c_abilBuildStageHaltName = "Halt";
const string c_abilBuildStageResumeName = "Resume";
const string c_abilBuildStageFinishName = "Finish";
const string c_abilBuildStageCollideName = "Collide";

//  EAbilEffectStage
const int c_abilEffectStageApproach = 0;
const int c_abilEffectStagePrep = 1;
const int c_abilEffectStageCast = 2;
const int c_abilEffectStageChannel = 3;
const int c_abilEffectStageFinish = 4;
const string c_abilEffectStageApproachName = "Approach";
const string c_abilEffectStagePrepName = "Prep";
const string c_abilEffectStageCastName = "Cast";
const string c_abilEffectStageChannelName = "Channel";
const string c_abilEffectStageFinishName = "Finish";

//  EAbilHarvestStage
const int c_abilHarvestStageApproachResource = 0;
const int c_abilHarvestStageWaitAtResource = 1;
const int c_abilHarvestStageHarvest = 2;
const int c_abilHarvestStageWaitToReturn = 3;
const int c_abilHarvestStageWaitForDropOff = 4;
const int c_abilHarvestStageApproachDropOff = 5;
const int c_abilHarvestStageDropOff = 6;
const string c_abilHarvestStageApproachResourceName = "ApproachResource";
const string c_abilHarvestStageWaitAtResourceName = "WaitAtResource";
const string c_abilHarvestStageHarvestName = "Harvest";
const string c_abilHarvestStageWaitToReturnName = "WaitToReturn";
const string c_abilHarvestStageWaitForDropOffName = "WaitForDropOff";
const string c_abilHarvestStageApproachDropOffName = "ApproachDropOff";
const string c_abilHarvestStageDropOffName = "DropOff";

//  EAbilMorphStage
const int c_abilMorphStageApproach = 0;
const int c_abilMorphStageWait = 1;
const int c_abilMorphStageAbilsStart = 2;
const int c_abilMorphStageAbilsEnd = 3;
const int c_abilMorphStageActorStart = 4;
const int c_abilMorphStageActorEnd = 5;
const int c_abilMorphStageCollideStart = 6;
const int c_abilMorphStageCollideEnd = 7;
const int c_abilMorphStageFacingStart = 8;
const int c_abilMorphStageFacingEnd = 9;
const int c_abilMorphStageMoverStart = 10;
const int c_abilMorphStageMoverEnd = 11;
const int c_abilMorphStageStatsStart = 12;
const int c_abilMorphStageStatsEnd = 13;
const int c_abilMorphStageUnitStart = 14;
const int c_abilMorphStageUnitEnd = 15;
const string c_abilMorphStageApproachName = "Approach";
const string c_abilMorphStageWaitName = "Wait";
const string c_abilMorphStageAbilsStartName = "AbilsStart";
const string c_abilMorphStageAbilsEndName = "AbilsEnd";
const string c_abilMorphStageActorStartName = "ActorStart";
const string c_abilMorphStageActorEndName = "ActorEnd";
const string c_abilMorphStageCollideStartName = "CollideStart";
const string c_abilMorphStageCollideEndName = "CollideEnd";
const string c_abilMorphStageFacingStartName = "FacingStart";
const string c_abilMorphStageFacingEndName = "FacingEnd";
const string c_abilMorphStageMoverStartName = "MoverStart";
const string c_abilMorphStageMoverEndName = "MoverEnd";
const string c_abilMorphStageStatsStartName = "StatsStart";
const string c_abilMorphStageStatsEndName = "StatsEnd";
const string c_abilMorphStageUnitStartName = "UnitStart";
const string c_abilMorphStageUnitEndName = "UnitEnd";

//  EAbilArmMagazineCmd
const int c_abilArmMagazineCmdAmmo1 = 0;
const int c_abilArmMagazineCmdAmmo2 = 1;
const int c_abilArmMagazineCmdAmmo3 = 2;
const int c_abilArmMagazineCmdAmmo4 = 3;
const int c_abilArmMagazineCmdAmmo5 = 4;
const int c_abilArmMagazineCmdAmmo6 = 5;
const int c_abilArmMagazineCmdAmmo7 = 6;
const int c_abilArmMagazineCmdAmmo8 = 7;
const int c_abilArmMagazineCmdAmmo9 = 8;
const int c_abilArmMagazineCmdAmmo10 = 9;
const int c_abilArmMagazineCmdAmmo11 = 10;
const int c_abilArmMagazineCmdAmmo12 = 11;
const int c_abilArmMagazineCmdAmmo13 = 12;
const int c_abilArmMagazineCmdAmmo14 = 13;
const int c_abilArmMagazineCmdAmmo15 = 14;
const int c_abilArmMagazineCmdAmmo16 = 15;
const int c_abilArmMagazineCmdAmmo17 = 16;
const int c_abilArmMagazineCmdAmmo18 = 17;
const int c_abilArmMagazineCmdAmmo19 = 18;
const int c_abilArmMagazineCmdAmmo20 = 19;
const string c_abilArmMagazineCmdAmmo1Name = "Ammo1";
const string c_abilArmMagazineCmdAmmo2Name = "Ammo2";
const string c_abilArmMagazineCmdAmmo3Name = "Ammo3";
const string c_abilArmMagazineCmdAmmo4Name = "Ammo4";
const string c_abilArmMagazineCmdAmmo5Name = "Ammo5";
const string c_abilArmMagazineCmdAmmo6Name = "Ammo6";
const string c_abilArmMagazineCmdAmmo7Name = "Ammo7";
const string c_abilArmMagazineCmdAmmo8Name = "Ammo8";
const string c_abilArmMagazineCmdAmmo9Name = "Ammo9";
const string c_abilArmMagazineCmdAmmo10Name = "Ammo10";
const string c_abilArmMagazineCmdAmmo11Name = "Ammo11";
const string c_abilArmMagazineCmdAmmo12Name = "Ammo12";
const string c_abilArmMagazineCmdAmmo13Name = "Ammo13";
const string c_abilArmMagazineCmdAmmo14Name = "Ammo14";
const string c_abilArmMagazineCmdAmmo15Name = "Ammo15";
const string c_abilArmMagazineCmdAmmo16Name = "Ammo16";
const string c_abilArmMagazineCmdAmmo17Name = "Ammo17";
const string c_abilArmMagazineCmdAmmo18Name = "Ammo18";
const string c_abilArmMagazineCmdAmmo19Name = "Ammo19";
const string c_abilArmMagazineCmdAmmo20Name = "Ammo20";

//  EAbilAttackCmd
const int c_abilAttackCmdExecute = 0;
const string c_abilAttackCmdExecuteName = "Execute";

//  EAbilAugmentCmd
const int c_abilAugmentCmdExecute = 0;
const string c_abilAugmentCmdExecuteName = "Execute";

//  EAbilBatteryCmd
const int c_abilBatteryCmdExecute = 0;
const string c_abilBatteryCmdExecuteName = "Execute";

//  EAbilBeaconCmd
const int c_abilBeaconCmdCancel = 0;
const int c_abilBeaconCmdMove = 1;
const string c_abilBeaconCmdCancelName = "Cancel";
const string c_abilBeaconCmdMoveName = "Move";

//  EAbilBehaviorCmd
const int c_abilBehaviorCmdOn = 0;
const int c_abilBehaviorCmdOff = 1;
const string c_abilBehaviorCmdOnName = "On";
const string c_abilBehaviorCmdOffName = "Off";

//  EAbilBuildCmd
const int c_abilBuildCmdBuild1 = 0;
const int c_abilBuildCmdBuild2 = 1;
const int c_abilBuildCmdBuild3 = 2;
const int c_abilBuildCmdBuild4 = 3;
const int c_abilBuildCmdBuild5 = 4;
const int c_abilBuildCmdBuild6 = 5;
const int c_abilBuildCmdBuild7 = 6;
const int c_abilBuildCmdBuild8 = 7;
const int c_abilBuildCmdBuild9 = 8;
const int c_abilBuildCmdBuild10 = 9;
const int c_abilBuildCmdBuild11 = 10;
const int c_abilBuildCmdBuild12 = 11;
const int c_abilBuildCmdBuild13 = 12;
const int c_abilBuildCmdBuild14 = 13;
const int c_abilBuildCmdBuild15 = 14;
const int c_abilBuildCmdBuild16 = 15;
const int c_abilBuildCmdBuild17 = 16;
const int c_abilBuildCmdBuild18 = 17;
const int c_abilBuildCmdBuild19 = 18;
const int c_abilBuildCmdBuild20 = 19;
const int c_abilBuildCmdBuild21 = 20;
const int c_abilBuildCmdBuild22 = 21;
const int c_abilBuildCmdBuild23 = 22;
const int c_abilBuildCmdBuild24 = 23;
const int c_abilBuildCmdBuild25 = 24;
const int c_abilBuildCmdBuild26 = 25;
const int c_abilBuildCmdBuild27 = 26;
const int c_abilBuildCmdBuild28 = 27;
const int c_abilBuildCmdBuild29 = 28;
const int c_abilBuildCmdBuild30 = 29;
const int c_abilBuildCmdHalt = 30;
const string c_abilBuildCmdBuild1Name = "Build1";
const string c_abilBuildCmdBuild2Name = "Build2";
const string c_abilBuildCmdBuild3Name = "Build3";
const string c_abilBuildCmdBuild4Name = "Build4";
const string c_abilBuildCmdBuild5Name = "Build5";
const string c_abilBuildCmdBuild6Name = "Build6";
const string c_abilBuildCmdBuild7Name = "Build7";
const string c_abilBuildCmdBuild8Name = "Build8";
const string c_abilBuildCmdBuild9Name = "Build9";
const string c_abilBuildCmdBuild10Name = "Build10";
const string c_abilBuildCmdBuild11Name = "Build11";
const string c_abilBuildCmdBuild12Name = "Build12";
const string c_abilBuildCmdBuild13Name = "Build13";
const string c_abilBuildCmdBuild14Name = "Build14";
const string c_abilBuildCmdBuild15Name = "Build15";
const string c_abilBuildCmdBuild16Name = "Build16";
const string c_abilBuildCmdBuild17Name = "Build17";
const string c_abilBuildCmdBuild18Name = "Build18";
const string c_abilBuildCmdBuild19Name = "Build19";
const string c_abilBuildCmdBuild20Name = "Build20";
const string c_abilBuildCmdBuild21Name = "Build21";
const string c_abilBuildCmdBuild22Name = "Build22";
const string c_abilBuildCmdBuild23Name = "Build23";
const string c_abilBuildCmdBuild24Name = "Build24";
const string c_abilBuildCmdBuild25Name = "Build25";
const string c_abilBuildCmdBuild26Name = "Build26";
const string c_abilBuildCmdBuild27Name = "Build27";
const string c_abilBuildCmdBuild28Name = "Build28";
const string c_abilBuildCmdBuild29Name = "Build29";
const string c_abilBuildCmdBuild30Name = "Build30";
const string c_abilBuildCmdHaltName = "Halt";

//  EAbilBuildableCmd
const int c_abilBuildableCmdCancel = 0;
const int c_abilBuildableCmdHalt = 1;
const string c_abilBuildableCmdCancelName = "Cancel";
const string c_abilBuildableCmdHaltName = "Halt";

//  EAbilEffectInstantCmd
const int c_abilEffectInstantCmdExecute = 0;
const int c_abilEffectInstantCmdCancel = 1;
const string c_abilEffectInstantCmdExecuteName = "Execute";
const string c_abilEffectInstantCmdCancelName = "Cancel";

//  EAbilEffectTargetCmd
const int c_abilEffectTargetCmdExecute = 0;
const int c_abilEffectTargetCmdCancel = 1;
const string c_abilEffectTargetCmdExecuteName = "Execute";
const string c_abilEffectTargetCmdCancelName = "Cancel";

//  EAbilHarvestCmd
const int c_abilHarvestCmdGather = 0;
const int c_abilHarvestCmdReturn = 1;
const int c_abilHarvestCmdCancel = 2;
const string c_abilHarvestCmdGatherName = "Gather";
const string c_abilHarvestCmdReturnName = "Return";
const string c_abilHarvestCmdCancelName = "Cancel";

//  EAbilInteractCmd
const int c_abilInteractCmdDesignate = 0;
const string c_abilInteractCmdDesignateName = "Designate";

//  EAbilInventoryCmd
const int c_abilInventoryCmdDrop = 0;
const int c_abilInventoryCmdMove = 1;
const int c_abilInventoryCmdTake = 2;
const int c_abilInventoryCmdItemInstant = 3;
const int c_abilInventoryCmdItemTarget = 4;
const string c_abilInventoryCmdDropName = "Drop";
const string c_abilInventoryCmdMoveName = "Move";
const string c_abilInventoryCmdTakeName = "Take";
const string c_abilInventoryCmdItemInstantName = "ItemInstant";
const string c_abilInventoryCmdItemTargetName = "ItemTarget";

//  EAbilLearnCmd
const int c_abilLearnCmdLearn1 = 0;
const int c_abilLearnCmdLearn2 = 1;
const int c_abilLearnCmdLearn3 = 2;
const int c_abilLearnCmdLearn4 = 3;
const int c_abilLearnCmdLearn5 = 4;
const int c_abilLearnCmdLearn6 = 5;
const int c_abilLearnCmdLearn7 = 6;
const int c_abilLearnCmdLearn8 = 7;
const int c_abilLearnCmdLearn9 = 8;
const int c_abilLearnCmdLearn10 = 9;
const int c_abilLearnCmdLearn11 = 10;
const int c_abilLearnCmdLearn12 = 11;
const int c_abilLearnCmdLearn13 = 12;
const int c_abilLearnCmdLearn14 = 13;
const int c_abilLearnCmdLearn15 = 14;
const int c_abilLearnCmdLearn16 = 15;
const int c_abilLearnCmdLearn17 = 16;
const int c_abilLearnCmdLearn18 = 17;
const int c_abilLearnCmdLearn19 = 18;
const int c_abilLearnCmdLearn20 = 19;
const string c_abilLearnCmdLearn1Name = "Learn1";
const string c_abilLearnCmdLearn2Name = "Learn2";
const string c_abilLearnCmdLearn3Name = "Learn3";
const string c_abilLearnCmdLearn4Name = "Learn4";
const string c_abilLearnCmdLearn5Name = "Learn5";
const string c_abilLearnCmdLearn6Name = "Learn6";
const string c_abilLearnCmdLearn7Name = "Learn7";
const string c_abilLearnCmdLearn8Name = "Learn8";
const string c_abilLearnCmdLearn9Name = "Learn9";
const string c_abilLearnCmdLearn10Name = "Learn10";
const string c_abilLearnCmdLearn11Name = "Learn11";
const string c_abilLearnCmdLearn12Name = "Learn12";
const string c_abilLearnCmdLearn13Name = "Learn13";
const string c_abilLearnCmdLearn14Name = "Learn14";
const string c_abilLearnCmdLearn15Name = "Learn15";
const string c_abilLearnCmdLearn16Name = "Learn16";
const string c_abilLearnCmdLearn17Name = "Learn17";
const string c_abilLearnCmdLearn18Name = "Learn18";
const string c_abilLearnCmdLearn19Name = "Learn19";
const string c_abilLearnCmdLearn20Name = "Learn20";

//  EAbilMergeCmd
const int c_abilMergeCmdSelectedUnits = 0;
const int c_abilMergeCmdWithTarget = 1;
const string c_abilMergeCmdSelectedUnitsName = "SelectedUnits";
const string c_abilMergeCmdWithTargetName = "WithTarget";

//  EAbilMorphCmd
const int c_abilMorphCmdExecute = 0;
const int c_abilMorphCmdCancel = 1;
const string c_abilMorphCmdExecuteName = "Execute";
const string c_abilMorphCmdCancelName = "Cancel";

//  EAbilMergeableCmd
const int c_abilMergeableCmdCancel = 0;
const string c_abilMergeableCmdCancelName = "Cancel";

//  EAbilMoveCmd
const int c_abilMoveCmdMove = 0;
const int c_abilMoveCmdPatrol = 1;
const int c_abilMoveCmdHoldPos = 2;
const int c_abilMoveCmdAcquireMove = 3;
const int c_abilMoveCmdTurn = 4;
const string c_abilMoveCmdMoveName = "Move";
const string c_abilMoveCmdPatrolName = "Patrol";
const string c_abilMoveCmdHoldPosName = "HoldPos";
const string c_abilMoveCmdAcquireMoveName = "AcquireMove";
const string c_abilMoveCmdTurnName = "Turn";

//  EAbilPawnCmd
const int c_abilPawnCmdPawn1 = 0;
const int c_abilPawnCmdPawn2 = 1;
const int c_abilPawnCmdPawn3 = 2;
const int c_abilPawnCmdPawn4 = 3;
const int c_abilPawnCmdPawn5 = 4;
const int c_abilPawnCmdPawn6 = 5;
const int c_abilPawnCmdPawn7 = 6;
const int c_abilPawnCmdPawn8 = 7;
const int c_abilPawnCmdPawn9 = 8;
const int c_abilPawnCmdPawn10 = 9;
const int c_abilPawnCmdPawn11 = 10;
const int c_abilPawnCmdPawn12 = 11;
const int c_abilPawnCmdPawn13 = 12;
const int c_abilPawnCmdPawn14 = 13;
const int c_abilPawnCmdPawn15 = 14;
const int c_abilPawnCmdPawn16 = 15;
const int c_abilPawnCmdPawn17 = 16;
const int c_abilPawnCmdPawn18 = 17;
const int c_abilPawnCmdPawn19 = 18;
const int c_abilPawnCmdPawn20 = 19;
const string c_abilPawnCmdPawn1Name = "Pawn1";
const string c_abilPawnCmdPawn2Name = "Pawn2";
const string c_abilPawnCmdPawn3Name = "Pawn3";
const string c_abilPawnCmdPawn4Name = "Pawn4";
const string c_abilPawnCmdPawn5Name = "Pawn5";
const string c_abilPawnCmdPawn6Name = "Pawn6";
const string c_abilPawnCmdPawn7Name = "Pawn7";
const string c_abilPawnCmdPawn8Name = "Pawn8";
const string c_abilPawnCmdPawn9Name = "Pawn9";
const string c_abilPawnCmdPawn10Name = "Pawn10";
const string c_abilPawnCmdPawn11Name = "Pawn11";
const string c_abilPawnCmdPawn12Name = "Pawn12";
const string c_abilPawnCmdPawn13Name = "Pawn13";
const string c_abilPawnCmdPawn14Name = "Pawn14";
const string c_abilPawnCmdPawn15Name = "Pawn15";
const string c_abilPawnCmdPawn16Name = "Pawn16";
const string c_abilPawnCmdPawn17Name = "Pawn17";
const string c_abilPawnCmdPawn18Name = "Pawn18";
const string c_abilPawnCmdPawn19Name = "Pawn19";
const string c_abilPawnCmdPawn20Name = "Pawn20";

//  EAbilQueueCmd
const int c_abilQueueCmdCancelLast = 0;
const int c_abilQueueCmdCancelSlot = 1;
const string c_abilQueueCmdCancelLastName = "CancelLast";
const string c_abilQueueCmdCancelSlotName = "CancelSlot";

//  EAbilRallyCmd
const int c_abilRallyCmdRally1 = 0;
const int c_abilRallyCmdRally2 = 1;
const int c_abilRallyCmdRally3 = 2;
const int c_abilRallyCmdRally4 = 3;
const string c_abilRallyCmdRally1Name = "Rally1";
const string c_abilRallyCmdRally2Name = "Rally2";
const string c_abilRallyCmdRally3Name = "Rally3";
const string c_abilRallyCmdRally4Name = "Rally4";

//  EAbilRedirectInstantCmd
const int c_abilRedirectInstantCmdExecute = 0;
const string c_abilRedirectInstantCmdExecuteName = "Execute";

//  EAbilRedirectTargetCmd
const int c_abilRedirectTargetCmdExecute = 0;
const string c_abilRedirectTargetCmdExecuteName = "Execute";

//  EAbilResearchCmd
const int c_abilResearchCmdResearch1 = 0;
const int c_abilResearchCmdResearch2 = 1;
const int c_abilResearchCmdResearch3 = 2;
const int c_abilResearchCmdResearch4 = 3;
const int c_abilResearchCmdResearch5 = 4;
const int c_abilResearchCmdResearch6 = 5;
const int c_abilResearchCmdResearch7 = 6;
const int c_abilResearchCmdResearch8 = 7;
const int c_abilResearchCmdResearch9 = 8;
const int c_abilResearchCmdResearch10 = 9;
const int c_abilResearchCmdResearch11 = 10;
const int c_abilResearchCmdResearch12 = 11;
const int c_abilResearchCmdResearch13 = 12;
const int c_abilResearchCmdResearch14 = 13;
const int c_abilResearchCmdResearch15 = 14;
const int c_abilResearchCmdResearch16 = 15;
const int c_abilResearchCmdResearch17 = 16;
const int c_abilResearchCmdResearch18 = 17;
const int c_abilResearchCmdResearch19 = 18;
const int c_abilResearchCmdResearch20 = 19;
const int c_abilResearchCmdResearch21 = 20;
const int c_abilResearchCmdResearch22 = 21;
const int c_abilResearchCmdResearch23 = 22;
const int c_abilResearchCmdResearch24 = 23;
const int c_abilResearchCmdResearch25 = 24;
const int c_abilResearchCmdResearch26 = 25;
const int c_abilResearchCmdResearch27 = 26;
const int c_abilResearchCmdResearch28 = 27;
const int c_abilResearchCmdResearch29 = 28;
const int c_abilResearchCmdResearch30 = 29;
const string c_abilResearchCmdResearch1Name = "Research1";
const string c_abilResearchCmdResearch2Name = "Research2";
const string c_abilResearchCmdResearch3Name = "Research3";
const string c_abilResearchCmdResearch4Name = "Research4";
const string c_abilResearchCmdResearch5Name = "Research5";
const string c_abilResearchCmdResearch6Name = "Research6";
const string c_abilResearchCmdResearch7Name = "Research7";
const string c_abilResearchCmdResearch8Name = "Research8";
const string c_abilResearchCmdResearch9Name = "Research9";
const string c_abilResearchCmdResearch10Name = "Research10";
const string c_abilResearchCmdResearch11Name = "Research11";
const string c_abilResearchCmdResearch12Name = "Research12";
const string c_abilResearchCmdResearch13Name = "Research13";
const string c_abilResearchCmdResearch14Name = "Research14";
const string c_abilResearchCmdResearch15Name = "Research15";
const string c_abilResearchCmdResearch16Name = "Research16";
const string c_abilResearchCmdResearch17Name = "Research17";
const string c_abilResearchCmdResearch18Name = "Research18";
const string c_abilResearchCmdResearch19Name = "Research19";
const string c_abilResearchCmdResearch20Name = "Research20";
const string c_abilResearchCmdResearch21Name = "Research21";
const string c_abilResearchCmdResearch22Name = "Research22";
const string c_abilResearchCmdResearch23Name = "Research23";
const string c_abilResearchCmdResearch24Name = "Research24";
const string c_abilResearchCmdResearch25Name = "Research25";
const string c_abilResearchCmdResearch26Name = "Research26";
const string c_abilResearchCmdResearch27Name = "Research27";
const string c_abilResearchCmdResearch28Name = "Research28";
const string c_abilResearchCmdResearch29Name = "Research29";
const string c_abilResearchCmdResearch30Name = "Research30";

//  EAbilReviveCmd
const int c_abilReviveCmdRevive1 = 0;
const int c_abilReviveCmdRevive2 = 1;
const int c_abilReviveCmdRevive3 = 2;
const int c_abilReviveCmdRevive4 = 3;
const int c_abilReviveCmdRevive5 = 4;
const int c_abilReviveCmdRevive6 = 5;
const int c_abilReviveCmdRevive7 = 6;
const int c_abilReviveCmdRevive8 = 7;
const int c_abilReviveCmdRevive9 = 8;
const int c_abilReviveCmdRevive10 = 9;
const int c_abilReviveCmdRevive11 = 10;
const int c_abilReviveCmdRevive12 = 11;
const int c_abilReviveCmdRevive13 = 12;
const int c_abilReviveCmdRevive14 = 13;
const int c_abilReviveCmdRevive15 = 14;
const int c_abilReviveCmdRevive16 = 15;
const int c_abilReviveCmdRevive17 = 16;
const int c_abilReviveCmdRevive18 = 17;
const int c_abilReviveCmdRevive19 = 18;
const int c_abilReviveCmdRevive20 = 19;
const string c_abilReviveCmdRevive1Name = "Revive1";
const string c_abilReviveCmdRevive2Name = "Revive2";
const string c_abilReviveCmdRevive3Name = "Revive3";
const string c_abilReviveCmdRevive4Name = "Revive4";
const string c_abilReviveCmdRevive5Name = "Revive5";
const string c_abilReviveCmdRevive6Name = "Revive6";
const string c_abilReviveCmdRevive7Name = "Revive7";
const string c_abilReviveCmdRevive8Name = "Revive8";
const string c_abilReviveCmdRevive9Name = "Revive9";
const string c_abilReviveCmdRevive10Name = "Revive10";
const string c_abilReviveCmdRevive11Name = "Revive11";
const string c_abilReviveCmdRevive12Name = "Revive12";
const string c_abilReviveCmdRevive13Name = "Revive13";
const string c_abilReviveCmdRevive14Name = "Revive14";
const string c_abilReviveCmdRevive15Name = "Revive15";
const string c_abilReviveCmdRevive16Name = "Revive16";
const string c_abilReviveCmdRevive17Name = "Revive17";
const string c_abilReviveCmdRevive18Name = "Revive18";
const string c_abilReviveCmdRevive19Name = "Revive19";
const string c_abilReviveCmdRevive20Name = "Revive20";

//  EAbilSpecializeCmd
const int c_abilSpecializeCmdSpecialize1 = 0;
const int c_abilSpecializeCmdSpecialize2 = 1;
const int c_abilSpecializeCmdSpecialize3 = 2;
const int c_abilSpecializeCmdSpecialize4 = 3;
const int c_abilSpecializeCmdSpecialize5 = 4;
const int c_abilSpecializeCmdSpecialize6 = 5;
const int c_abilSpecializeCmdSpecialize7 = 6;
const int c_abilSpecializeCmdSpecialize8 = 7;
const int c_abilSpecializeCmdSpecialize9 = 8;
const int c_abilSpecializeCmdSpecialize10 = 9;
const int c_abilSpecializeCmdSpecialize11 = 10;
const int c_abilSpecializeCmdSpecialize12 = 11;
const int c_abilSpecializeCmdSpecialize13 = 12;
const int c_abilSpecializeCmdSpecialize14 = 13;
const int c_abilSpecializeCmdSpecialize15 = 14;
const int c_abilSpecializeCmdSpecialize16 = 15;
const int c_abilSpecializeCmdSpecialize17 = 16;
const int c_abilSpecializeCmdSpecialize18 = 17;
const int c_abilSpecializeCmdSpecialize19 = 18;
const int c_abilSpecializeCmdSpecialize20 = 19;
const string c_abilSpecializeCmdSpecialize1Name = "Specialize1";
const string c_abilSpecializeCmdSpecialize2Name = "Specialize2";
const string c_abilSpecializeCmdSpecialize3Name = "Specialize3";
const string c_abilSpecializeCmdSpecialize4Name = "Specialize4";
const string c_abilSpecializeCmdSpecialize5Name = "Specialize5";
const string c_abilSpecializeCmdSpecialize6Name = "Specialize6";
const string c_abilSpecializeCmdSpecialize7Name = "Specialize7";
const string c_abilSpecializeCmdSpecialize8Name = "Specialize8";
const string c_abilSpecializeCmdSpecialize9Name = "Specialize9";
const string c_abilSpecializeCmdSpecialize10Name = "Specialize10";
const string c_abilSpecializeCmdSpecialize11Name = "Specialize11";
const string c_abilSpecializeCmdSpecialize12Name = "Specialize12";
const string c_abilSpecializeCmdSpecialize13Name = "Specialize13";
const string c_abilSpecializeCmdSpecialize14Name = "Specialize14";
const string c_abilSpecializeCmdSpecialize15Name = "Specialize15";
const string c_abilSpecializeCmdSpecialize16Name = "Specialize16";
const string c_abilSpecializeCmdSpecialize17Name = "Specialize17";
const string c_abilSpecializeCmdSpecialize18Name = "Specialize18";
const string c_abilSpecializeCmdSpecialize19Name = "Specialize19";
const string c_abilSpecializeCmdSpecialize20Name = "Specialize20";

//  EAbilStopCmd
const int c_abilStopCmdStop = 0;
const int c_abilStopCmdHoldFire = 1;
const int c_abilStopCmdCheer = 2;
const int c_abilStopCmdDance = 3;
const string c_abilStopCmdStopName = "Stop";
const string c_abilStopCmdHoldFireName = "HoldFire";
const string c_abilStopCmdCheerName = "Cheer";
const string c_abilStopCmdDanceName = "Dance";

//  EAbilTrainCmd
const int c_abilTrainCmdTrain1 = 0;
const int c_abilTrainCmdTrain2 = 1;
const int c_abilTrainCmdTrain3 = 2;
const int c_abilTrainCmdTrain4 = 3;
const int c_abilTrainCmdTrain5 = 4;
const int c_abilTrainCmdTrain6 = 5;
const int c_abilTrainCmdTrain7 = 6;
const int c_abilTrainCmdTrain8 = 7;
const int c_abilTrainCmdTrain9 = 8;
const int c_abilTrainCmdTrain10 = 9;
const int c_abilTrainCmdTrain11 = 10;
const int c_abilTrainCmdTrain12 = 11;
const int c_abilTrainCmdTrain13 = 12;
const int c_abilTrainCmdTrain14 = 13;
const int c_abilTrainCmdTrain15 = 14;
const int c_abilTrainCmdTrain16 = 15;
const int c_abilTrainCmdTrain17 = 16;
const int c_abilTrainCmdTrain18 = 17;
const int c_abilTrainCmdTrain19 = 18;
const int c_abilTrainCmdTrain20 = 19;
const int c_abilTrainCmdTrain21 = 20;
const int c_abilTrainCmdTrain22 = 21;
const int c_abilTrainCmdTrain23 = 22;
const int c_abilTrainCmdTrain24 = 23;
const int c_abilTrainCmdTrain25 = 24;
const int c_abilTrainCmdTrain26 = 25;
const int c_abilTrainCmdTrain27 = 26;
const int c_abilTrainCmdTrain28 = 27;
const int c_abilTrainCmdTrain29 = 28;
const int c_abilTrainCmdTrain30 = 29;
const string c_abilTrainCmdTrain1Name = "Train1";
const string c_abilTrainCmdTrain2Name = "Train2";
const string c_abilTrainCmdTrain3Name = "Train3";
const string c_abilTrainCmdTrain4Name = "Train4";
const string c_abilTrainCmdTrain5Name = "Train5";
const string c_abilTrainCmdTrain6Name = "Train6";
const string c_abilTrainCmdTrain7Name = "Train7";
const string c_abilTrainCmdTrain8Name = "Train8";
const string c_abilTrainCmdTrain9Name = "Train9";
const string c_abilTrainCmdTrain10Name = "Train10";
const string c_abilTrainCmdTrain11Name = "Train11";
const string c_abilTrainCmdTrain12Name = "Train12";
const string c_abilTrainCmdTrain13Name = "Train13";
const string c_abilTrainCmdTrain14Name = "Train14";
const string c_abilTrainCmdTrain15Name = "Train15";
const string c_abilTrainCmdTrain16Name = "Train16";
const string c_abilTrainCmdTrain17Name = "Train17";
const string c_abilTrainCmdTrain18Name = "Train18";
const string c_abilTrainCmdTrain19Name = "Train19";
const string c_abilTrainCmdTrain20Name = "Train20";
const string c_abilTrainCmdTrain21Name = "Train21";
const string c_abilTrainCmdTrain22Name = "Train22";
const string c_abilTrainCmdTrain23Name = "Train23";
const string c_abilTrainCmdTrain24Name = "Train24";
const string c_abilTrainCmdTrain25Name = "Train25";
const string c_abilTrainCmdTrain26Name = "Train26";
const string c_abilTrainCmdTrain27Name = "Train27";
const string c_abilTrainCmdTrain28Name = "Train28";
const string c_abilTrainCmdTrain29Name = "Train29";
const string c_abilTrainCmdTrain30Name = "Train30";

//  EAbilTransportCmd
const int c_abilTransportCmdLoad = 0;
const int c_abilTransportCmdUnloadAll = 1;
const int c_abilTransportCmdUnloadAt = 2;
const int c_abilTransportCmdUnloadUnit = 3;
const int c_abilTransportCmdLoadAll = 4;
const string c_abilTransportCmdLoadName = "Load";
const string c_abilTransportCmdUnloadAllName = "UnloadAll";
const string c_abilTransportCmdUnloadAtName = "UnloadAt";
const string c_abilTransportCmdUnloadUnitName = "UnloadUnit";
const string c_abilTransportCmdLoadAllName = "LoadAll";

//  EAbilWarpableCmd
const int c_abilWarpableCmdCancel = 0;
const string c_abilWarpableCmdCancelName = "Cancel";

//  EAbilWarpTrainCmd
const int c_abilWarpTrainCmdTrain1 = 0;
const int c_abilWarpTrainCmdTrain2 = 1;
const int c_abilWarpTrainCmdTrain3 = 2;
const int c_abilWarpTrainCmdTrain4 = 3;
const int c_abilWarpTrainCmdTrain5 = 4;
const int c_abilWarpTrainCmdTrain6 = 5;
const int c_abilWarpTrainCmdTrain7 = 6;
const int c_abilWarpTrainCmdTrain8 = 7;
const int c_abilWarpTrainCmdTrain9 = 8;
const int c_abilWarpTrainCmdTrain10 = 9;
const int c_abilWarpTrainCmdTrain11 = 10;
const int c_abilWarpTrainCmdTrain12 = 11;
const int c_abilWarpTrainCmdTrain13 = 12;
const int c_abilWarpTrainCmdTrain14 = 13;
const int c_abilWarpTrainCmdTrain15 = 14;
const int c_abilWarpTrainCmdTrain16 = 15;
const int c_abilWarpTrainCmdTrain17 = 16;
const int c_abilWarpTrainCmdTrain18 = 17;
const int c_abilWarpTrainCmdTrain19 = 18;
const int c_abilWarpTrainCmdTrain20 = 19;
const string c_abilWarpTrainCmdTrain1Name = "Train1";
const string c_abilWarpTrainCmdTrain2Name = "Train2";
const string c_abilWarpTrainCmdTrain3Name = "Train3";
const string c_abilWarpTrainCmdTrain4Name = "Train4";
const string c_abilWarpTrainCmdTrain5Name = "Train5";
const string c_abilWarpTrainCmdTrain6Name = "Train6";
const string c_abilWarpTrainCmdTrain7Name = "Train7";
const string c_abilWarpTrainCmdTrain8Name = "Train8";
const string c_abilWarpTrainCmdTrain9Name = "Train9";
const string c_abilWarpTrainCmdTrain10Name = "Train10";
const string c_abilWarpTrainCmdTrain11Name = "Train11";
const string c_abilWarpTrainCmdTrain12Name = "Train12";
const string c_abilWarpTrainCmdTrain13Name = "Train13";
const string c_abilWarpTrainCmdTrain14Name = "Train14";
const string c_abilWarpTrainCmdTrain15Name = "Train15";
const string c_abilWarpTrainCmdTrain16Name = "Train16";
const string c_abilWarpTrainCmdTrain17Name = "Train17";
const string c_abilWarpTrainCmdTrain18Name = "Train18";
const string c_abilWarpTrainCmdTrain19Name = "Train19";
const string c_abilWarpTrainCmdTrain20Name = "Train20";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Achievement.galaxy generated from Achievement.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCAchievement
const int c_classIdCAchievement = 0;
const string c_classIdCAchievementName = "CAchievement";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  AchievementTerm.galaxy generated from AchievementTerm.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCAchievementTerm
const int c_classIdCAchievementTerm = 0;
const int c_classIdCAchievementTermAbil = 1;
const int c_classIdCAchievementTermAbilInteract = 2;
const int c_classIdCAchievementTermAbilLoad = 3;
const int c_classIdCAchievementTermAbilUse = 4;
const int c_classIdCAchievementTermAchievement = 5;
const int c_classIdCAchievementTermBehavior = 6;
const int c_classIdCAchievementTermBehaviorCount = 7;
const int c_classIdCAchievementTermBehaviorState = 8;
const int c_classIdCAchievementTermCombine = 9;
const int c_classIdCAchievementTermEffect = 10;
const int c_classIdCAchievementTermEffectAbsorbed = 11;
const int c_classIdCAchievementTermEffectDamaged = 12;
const int c_classIdCAchievementTermEffectDodged = 13;
const int c_classIdCAchievementTermEffectHealed = 14;
const int c_classIdCAchievementTermEffectKilled = 15;
const int c_classIdCAchievementTermEffectUse = 16;
const int c_classIdCAchievementTermScoreValue = 17;
const int c_classIdCAchievementTermTime = 18;
const int c_classIdCAchievementTermUnit = 19;
const int c_classIdCAchievementTermUnitBirth = 20;
const int c_classIdCAchievementTermUnitDeath = 21;
const int c_classIdCAchievementTermUnitKills = 22;
const int c_classIdCAchievementTermUnitRegen = 23;
const int c_classIdCAchievementTermUnitSupplyLoss = 24;
const string c_classIdCAchievementTermName = "CAchievementTerm";
const string c_classIdCAchievementTermAbilName = "CAchievementTermAbil";
const string c_classIdCAchievementTermAbilInteractName = "CAchievementTermAbilInteract";
const string c_classIdCAchievementTermAbilLoadName = "CAchievementTermAbilLoad";
const string c_classIdCAchievementTermAbilUseName = "CAchievementTermAbilUse";
const string c_classIdCAchievementTermAchievementName = "CAchievementTermAchievement";
const string c_classIdCAchievementTermBehaviorName = "CAchievementTermBehavior";
const string c_classIdCAchievementTermBehaviorCountName = "CAchievementTermBehaviorCount";
const string c_classIdCAchievementTermBehaviorStateName = "CAchievementTermBehaviorState";
const string c_classIdCAchievementTermCombineName = "CAchievementTermCombine";
const string c_classIdCAchievementTermEffectName = "CAchievementTermEffect";
const string c_classIdCAchievementTermEffectAbsorbedName = "CAchievementTermEffectAbsorbed";
const string c_classIdCAchievementTermEffectDamagedName = "CAchievementTermEffectDamaged";
const string c_classIdCAchievementTermEffectDodgedName = "CAchievementTermEffectDodged";
const string c_classIdCAchievementTermEffectHealedName = "CAchievementTermEffectHealed";
const string c_classIdCAchievementTermEffectKilledName = "CAchievementTermEffectKilled";
const string c_classIdCAchievementTermEffectUseName = "CAchievementTermEffectUse";
const string c_classIdCAchievementTermScoreValueName = "CAchievementTermScoreValue";
const string c_classIdCAchievementTermTimeName = "CAchievementTermTime";
const string c_classIdCAchievementTermUnitName = "CAchievementTermUnit";
const string c_classIdCAchievementTermUnitBirthName = "CAchievementTermUnitBirth";
const string c_classIdCAchievementTermUnitDeathName = "CAchievementTermUnitDeath";
const string c_classIdCAchievementTermUnitKillsName = "CAchievementTermUnitKills";
const string c_classIdCAchievementTermUnitRegenName = "CAchievementTermUnitRegen";
const string c_classIdCAchievementTermUnitSupplyLossName = "CAchievementTermUnitSupplyLoss";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Actor.galaxy generated from Actor.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCActor
const int c_classIdCActor = 0;
const int c_classIdCActorBase = 1;
const int c_classIdCActorBearings = 2;
const int c_classIdCActorModel = 3;
const int c_classIdCActorBeam = 4;
const int c_classIdCActorRange = 5;
const int c_classIdCActorRegion = 6;
const int c_classIdCActorSite = 7;
const int c_classIdCActorSiteOp = 8;
const int c_classIdCActorSiteOpBase = 9;
const int c_classIdCActorSound = 10;
const int c_classIdCActorSplat = 11;
const int c_classIdCActorAction = 12;
const int c_classIdCActorBeamSimple = 13;
const int c_classIdCActorBeamStandard = 14;
const int c_classIdCActorDoodad = 15;
const int c_classIdCActorFoliageFXSpawner = 16;
const int c_classIdCActorEditorCamera = 17;
const int c_classIdCActorEditorPoint = 18;
const int c_classIdCActorEventMacro = 19;
const int c_classIdCActorStateMonitor = 20;
const int c_classIdCActorGlobalConfig = 21;
const int c_classIdCActorLookAt = 22;
const int c_classIdCActorList = 23;
const int c_classIdCActorPhysics = 24;
const int c_classIdCActorPortrait = 25;
const int c_classIdCActorPower = 26;
const int c_classIdCActorProgress = 27;
const int c_classIdCActorQueryResponse = 28;
const int c_classIdCActorRegionCircle = 29;
const int c_classIdCActorRegionCombine = 30;
const int c_classIdCActorRegionGame = 31;
const int c_classIdCActorRegionPolygon = 32;
const int c_classIdCActorRegionQuad = 33;
const int c_classIdCActorRegionWater = 34;
const int c_classIdCActorSelection = 35;
const int c_classIdCActorSetQueried = 36;
const int c_classIdCActorShadow = 37;
const int c_classIdCActorShield = 38;
const int c_classIdCActorShieldImpact = 39;
const int c_classIdCActorSimple = 40;
const int c_classIdCActorSiteBillboard = 41;
const int c_classIdCActorSiteMover = 42;
const int c_classIdCActorSiteRocker = 43;
const int c_classIdCActorSiteOp2DRotation = 44;
const int c_classIdCActorSiteOpAction = 45;
const int c_classIdCActorSiteOpAttach = 46;
const int c_classIdCActorSiteOpAttachVolume = 47;
const int c_classIdCActorSiteOpBanker = 48;
const int c_classIdCActorSiteOpBasic = 49;
const int c_classIdCActorSiteOpEffect = 50;
const int c_classIdCActorSiteOpForward = 51;
const int c_classIdCActorSiteOpHeight = 52;
const int c_classIdCActorSiteOpHostBearings = 53;
const int c_classIdCActorSiteOpLocalOffset = 54;
const int c_classIdCActorSiteOpPatch = 55;
const int c_classIdCActorSiteOpRandomPointInCircle = 56;
const int c_classIdCActorSiteOpRotationExplicit = 57;
const int c_classIdCActorSiteOpRotationVariancer = 58;
const int c_classIdCActorSiteOpRotationSmooth = 59;
const int c_classIdCActorSiteOpShadow = 60;
const int c_classIdCActorSiteOpUp = 61;
const int c_classIdCActorSnapshot = 62;
const int c_classIdCActorSquib = 63;
const int c_classIdCActorTerrainDeformer = 64;
const int c_classIdCActorText = 65;
const int c_classIdCActorTurret = 66;
const int c_classIdCActorUnit = 67;
const int c_classIdCActorMissile = 68;
const string c_classIdCActorName = "CActor";
const string c_classIdCActorBaseName = "CActorBase";
const string c_classIdCActorBearingsName = "CActorBearings";
const string c_classIdCActorModelName = "CActorModel";
const string c_classIdCActorBeamName = "CActorBeam";
const string c_classIdCActorRangeName = "CActorRange";
const string c_classIdCActorRegionName = "CActorRegion";
const string c_classIdCActorSiteName = "CActorSite";
const string c_classIdCActorSiteOpName = "CActorSiteOp";
const string c_classIdCActorSiteOpBaseName = "CActorSiteOpBase";
const string c_classIdCActorSoundName = "CActorSound";
const string c_classIdCActorSplatName = "CActorSplat";
const string c_classIdCActorActionName = "CActorAction";
const string c_classIdCActorBeamSimpleName = "CActorBeamSimple";
const string c_classIdCActorBeamStandardName = "CActorBeamStandard";
const string c_classIdCActorDoodadName = "CActorDoodad";
const string c_classIdCActorFoliageFXSpawnerName = "CActorFoliageFXSpawner";
const string c_classIdCActorEditorCameraName = "CActorEditorCamera";
const string c_classIdCActorEditorPointName = "CActorEditorPoint";
const string c_classIdCActorEventMacroName = "CActorEventMacro";
const string c_classIdCActorStateMonitorName = "CActorStateMonitor";
const string c_classIdCActorGlobalConfigName = "CActorGlobalConfig";
const string c_classIdCActorLookAtName = "CActorLookAt";
const string c_classIdCActorListName = "CActorList";
const string c_classIdCActorPhysicsName = "CActorPhysics";
const string c_classIdCActorPortraitName = "CActorPortrait";
const string c_classIdCActorPowerName = "CActorPower";
const string c_classIdCActorProgressName = "CActorProgress";
const string c_classIdCActorQueryResponseName = "CActorQueryResponse";
const string c_classIdCActorRegionCircleName = "CActorRegionCircle";
const string c_classIdCActorRegionCombineName = "CActorRegionCombine";
const string c_classIdCActorRegionGameName = "CActorRegionGame";
const string c_classIdCActorRegionPolygonName = "CActorRegionPolygon";
const string c_classIdCActorRegionQuadName = "CActorRegionQuad";
const string c_classIdCActorRegionWaterName = "CActorRegionWater";
const string c_classIdCActorSelectionName = "CActorSelection";
const string c_classIdCActorSetQueriedName = "CActorSetQueried";
const string c_classIdCActorShadowName = "CActorShadow";
const string c_classIdCActorShieldName = "CActorShield";
const string c_classIdCActorShieldImpactName = "CActorShieldImpact";
const string c_classIdCActorSimpleName = "CActorSimple";
const string c_classIdCActorSiteBillboardName = "CActorSiteBillboard";
const string c_classIdCActorSiteMoverName = "CActorSiteMover";
const string c_classIdCActorSiteRockerName = "CActorSiteRocker";
const string c_classIdCActorSiteOp2DRotationName = "CActorSiteOp2DRotation";
const string c_classIdCActorSiteOpActionName = "CActorSiteOpAction";
const string c_classIdCActorSiteOpAttachName = "CActorSiteOpAttach";
const string c_classIdCActorSiteOpAttachVolumeName = "CActorSiteOpAttachVolume";
const string c_classIdCActorSiteOpBankerName = "CActorSiteOpBanker";
const string c_classIdCActorSiteOpBasicName = "CActorSiteOpBasic";
const string c_classIdCActorSiteOpEffectName = "CActorSiteOpEffect";
const string c_classIdCActorSiteOpForwardName = "CActorSiteOpForward";
const string c_classIdCActorSiteOpHeightName = "CActorSiteOpHeight";
const string c_classIdCActorSiteOpHostBearingsName = "CActorSiteOpHostBearings";
const string c_classIdCActorSiteOpLocalOffsetName = "CActorSiteOpLocalOffset";
const string c_classIdCActorSiteOpPatchName = "CActorSiteOpPatch";
const string c_classIdCActorSiteOpRandomPointInCircleName = "CActorSiteOpRandomPointInCircle";
const string c_classIdCActorSiteOpRotationExplicitName = "CActorSiteOpRotationExplicit";
const string c_classIdCActorSiteOpRotationVariancerName = "CActorSiteOpRotationVariancer";
const string c_classIdCActorSiteOpRotationSmoothName = "CActorSiteOpRotationSmooth";
const string c_classIdCActorSiteOpShadowName = "CActorSiteOpShadow";
const string c_classIdCActorSiteOpUpName = "CActorSiteOpUp";
const string c_classIdCActorSnapshotName = "CActorSnapshot";
const string c_classIdCActorSquibName = "CActorSquib";
const string c_classIdCActorTerrainDeformerName = "CActorTerrainDeformer";
const string c_classIdCActorTextName = "CActorText";
const string c_classIdCActorTurretName = "CActorTurret";
const string c_classIdCActorUnitName = "CActorUnit";
const string c_classIdCActorMissileName = "CActorMissile";

//  EUnitStatus
const int c_unitStatusShields = 0;
const int c_unitStatusLife = 1;
const int c_unitStatusEnergy = 2;
const int c_unitStatusCargo = 3;
const int c_unitStatusProgress = 4;
const int c_unitStatusDuration = 5;
const string c_unitStatusShieldsName = "Shields";
const string c_unitStatusLifeName = "Life";
const string c_unitStatusEnergyName = "Energy";
const string c_unitStatusCargoName = "Cargo";
const string c_unitStatusProgressName = "Progress";
const string c_unitStatusDurationName = "Duration";

//  EFlyerDisplay
const int c_flyerDisplayNone = 0;
const int c_flyerDisplaySelected = 1;
const int c_flyerDisplayAll = 2;
const string c_flyerDisplayNoneName = "None";
const string c_flyerDisplaySelectedName = "Selected";
const string c_flyerDisplayAllName = "All";


//==================================================================================================
//  AI Native Function Prototypes
//==================================================================================================
include "TriggerLibs/RequirementsAI"
include "TriggerLibs/BuildAI"

const int c_ScoutStartLocations = 0;
const int c_ScoutBlockedPath    = 1;
const int c_ScoutMinerals       = 2;
const int c_ScoutDefault        = 3;
const int c_ScoutPlayers        = 4;

const int c_noFlags             = 0;
const point c_nullPoint         = null;
const marker c_noMarker         = null;
const string c_noTech           = null;
const abilcmd c_nullCmd         = null;
const wave c_nullWave           = null;
const unit c_nullUnit           = null;

const bool c_stockIdle          = true;
const bool c_stockAlways        = false;

const bool c_stockMinPeons      = true;
const bool c_stockMaxPeons      = false;

const bool c_stockNeededFarms   = true;
const bool c_stockNormalFarms   = false;

const int c_allEnemies          = -1;

const int c_defaultGasPeonCount = -1;

const int c_expandDefault       = 1;
const int c_expandVitalHard     = 4;
const int c_expandNormalHard    = 6;

const int c_unitAttributeNone   = -1;

//--------------------------------------------------------------------------------------------------
//  Unit Order Priorities
//--------------------------------------------------------------------------------------------------
// needs to match the order in Brain.h
const int c_prioNone              = 0;
const int c_prioExtraScout        = 1;
const int c_prioWorkerJob         = 2;
const int c_prioUseableBully      = 3;
const int c_prioStaticBully       = 4;
const int c_prioGather            = 5;
const int c_prioExpand            = 6;
const int c_prioCombat            = 7;
const int c_prioWaveIdle          = 8;
const int c_prioScout             = 9;
const int c_prioEarlyDefense      = 10;
const int c_prioWavePeon          = 11;
const int c_prioWave              = 12;
const int c_prioTransport         = 13;
const int c_prioDetect            = 14;
const int c_prioNuke              = 15;
const int c_prioScriptControlled  = 16;

//--------------------------------------------------------------------------------------------------
//  Races
//--------------------------------------------------------------------------------------------------
// needs to match Galaxy.cpp
const int c_raceMulti   = -1;
const int c_raceUnknown = 0;
const int c_raceProtoss = 1;
const int c_raceTerran  = 2;
const int c_raceZerg    = 3;

//--------------------------------------------------------------------------------------------------
//  Build and Train Priorities
//--------------------------------------------------------------------------------------------------
// needs to match the values in Captain.h
const int c_makePriorityLowest     = 0;
const int c_makePriorityBully      = 1;
const int c_makePriorityTown       = 2;
const int c_makePriorityResearch   = 3;
const int c_makePriorityAttack     = 4;
const int c_makePriorityDefense    = 5;
const int c_makePriorityExpand     = 6;
const int c_makePriorityContinue   = 7;
const int c_makePriorityPowerCreep = 8;
const int c_makePriorityDropoff    = 9;
const int c_makePriorityHighest    = 10;

//--------------------------------------------------------------------------------------------------
//  Town Locations
//--------------------------------------------------------------------------------------------------
const int c_townInvalid = -2;
const int c_townMain    = -1;
const int c_townOne     = 0;
const int c_townTwo     = 1;
const int c_townThree   = 2;
const int c_townFour    = 3;
const int c_townFive    = 4;
const int c_townSix     = 5;
const int c_townSeven   = 6;
const int c_townEight   = 7;
const int c_townMax     = 32;

//--------------------------------------------------------------------------------------------------
//  Town States
//--------------------------------------------------------------------------------------------------
const int c_townStateInvalid      = -1;
const int c_townStateUnused       = 0;
const int c_townStateClaimed      = 1;
const int c_townStateEstablished  = 2;

//--------------------------------------------------------------------------------------------------
//  Wave States
//--------------------------------------------------------------------------------------------------
// needs to match CWave::EWaveType
const int c_waveStateUnknown      = 0;
const int c_waveStateIdle         = 1;
const int c_waveStateSuicide      = 2;
const int c_waveStateMerge        = 3;
const int c_waveStateAttack       = 4;
const int c_waveStateDropAttack   = 5;
const int c_waveStateDefend       = 6;
const int c_waveStateScout        = 7;
const int c_waveStateRetreat      = 8;
const int c_waveStateDropRetreat  = 9;
const int c_waveStateClearObs     = 10;
const int c_waveStateGuardHome    = 11;

//--------------------------------------------------------------------------------------------------
//  Wave Default Names
//--------------------------------------------------------------------------------------------------
const int c_waveMain        = 0;
const int c_waveDefend      = 1;
const int c_waveAttack      = 2;
const int c_waveDivert1     = 3;
const int c_waveDivert2     = 4;
const int c_waveClearObs    = 5;
const int c_waveHome        = 6;

//--------------------------------------------------------------------------------------------------
//  Defense Threat Query Flags
//--------------------------------------------------------------------------------------------------
// base flags
const int c_dtIncludeSelfThreat     = 1;
const int c_dtIncludeAllyThreat     = 2;
const int c_dtIncludeMinorThreat    = 4;
const int c_dtIncludeCantAttack     = 8;
// shortcut combinations
const int c_dtRealSelfThreat        = 1;
const int c_dtRealThreat            = 3;
const int c_dtAnySelfThreat         = 13;
const int c_dtAnyThreat             = 15;

//--------------------------------------------------------------------------------------------------
//  Best Target Flags
//--------------------------------------------------------------------------------------------------
// Needs to match the flags in CCaptain
const int c_btNeedsPath             = 1;
const int c_btBuildingOrNeedsPath   = 2;
const int c_btPrefersPath           = 4; 
const int c_btAllowJumping          = 8;
const int c_btSortByDistance        = 16;
const int c_btSortByFullType        = 32;
const int c_btSortByLeastRecent     = 64;
const int c_btSortByMeleeRules      = 128;
const int c_btDefaultNeedsPath      = 49;
const int c_btDefaultPrefersPath    = 52;

//--------------------------------------------------------------------------------------------------
//  Breakpoint Routines
//--------------------------------------------------------------------------------------------------
native void DebugString (string value);
native void DebugUnit (unit value);
native void DebugInt (int value);
native void DebugFixed (fixed value);
native void DebugPoint (point value);

//--------------------------------------------------------------------------------------------------
//  Difficulty
//--------------------------------------------------------------------------------------------------
const int c_diffPressForward        = 0;
const int c_diffRepairDamage        = 1;
const int c_diffFleeDamage          = 2;
const int c_diffOptimizeGas         = 3;
const int c_diffDefendWithPeons     = 4;
const int c_diffNormalVision        = 5;
const int c_diffLimitAPM            = 6;
const int c_diffAutoLoadBunkers     = 7;
const int c_diffEarlyGameRepair     = 8;
const int c_diffEnableDangerMap     = 9;
const int c_diffWaveAvoidDanger     = 10;
const int c_diffNormalTargetPrio    = 11;
const int c_diffEarlyDefenseScout   = 12;
const int c_diffSpotChangelings     = 13;
const int c_diffUseExtraScouts      = 14;
const int c_diffFleeWorkers         = 15;
const int c_diffFleeDanger          = 16;
const int c_diffHoldAtIdleChokes    = 17;
const int c_diffAllowResourceReq    = 18;

native void AISetDifficulty (int player, int index, bool state);
native bool AIGetDifficulty (int player, int index);

//--------------------------------------------------------------------------------------------------
// Utility
//--------------------------------------------------------------------------------------------------
native void AIStart (int player, bool isCampaign, int apm);

native void AIDisableAllScouting ();

native bool AIGivingUp (int player);
native void AIGoodGame (int player);

native bool AIIsCampaign (int player);
native bool AIHasHumanAlly (int player);
native void AISetAPM (int player, int apm);

native unit AIGrabUnit (int player, string aliasUnitType, int prio, point location);

native int  AIState (int player, int index);
native void AISetSpecificState (int player, int index, int state);
native void AISetAllStates (int player, int state);

native void AISetFlag (int player, int index, bool state);
native bool AIGetFlag (int player, int index);
native void AITechFlag (int player, int index, int count, string what, int state);

native void AIResetUserData (int player);
native void AISetUserString (int player, int index, string data);
native string AIGetUserString (int player, int index);
native void AISetUserInt (int player, int index, int data);
native int AIGetUserInt (int player, int index);
native void AIAddStringInt (int player, string data, int change);

native fixed AIGetTime ();

const bool c_ignoreEnemyBuildings = true;
const bool c_includeAllBuildings = false;
native int AIPathingCostMap (point from, point to);
native int AIPathingCostUnit (unit u, point to, bool ignoreEnemyBuildings); 

native int AIGetTotalStartLocs ();
native int AIGetGroundStartLocs (point loc);
native int AIGetAirStartLocs (point loc);
native int AIGetTotalTownLocs ();
native int AIGetGroundTownLocs (point loc);
native int AIGetAirTownLocs (point loc);

native int AIRandomVal (int player, int which);
native void AINewChooseSubState (int player, int which, int min, int max, int defaultSubState);
native void AISetSubStateChance (int subState, int chance);
native void AISetSubStateChanceRace (int subState, int randChance, int protChance, int terrChance, int zergChance);
native int AIChooseSubState ();

native bool AIWantsMultipleTransport (int player);
native void AISetWantsMultipleTransport (int player, bool enable);
native int AIGetNumMobileTransports (int player);

native point AIGetBestCreepSpot (int player, unit creator, fixed createRadius);

native void AIAddDetectionDanger (int player, string unitType);
native bool AIDefaultSuspectDetectionDanger (int player);

native bool AIAnyWorkersFleeingNearby (int player, point loc, fixed radius);

native int AIGetNumEnemies (int player);
native int AIGetNumAllies (int player);

native int AIGetEnemyRaceVal (int player);

native point AIPlacementNearbyFindTest (int player, point loc, fixed range, string unitType);

native void AIAddToExtraScoutGroup (int player, unit u);
native bool AIOfferNewScout (int player, unit u);

native void AIAddHealer (int player, string healer, string healAbil, int healAbilIdx);

//--------------------------------------------------------------------------------------------------
// Misc Melee
//--------------------------------------------------------------------------------------------------

const int c_skirVeryEasy    = 0; // difficulty settings
const int c_skirEasy        = 1;
const int c_skirMedium      = 2;
const int c_skirHard        = 3;
const int c_skirVeryHard    = 4;
const int c_skirCheater     = 5;

native bool AIAnyAllyAttacking (int player);
native point AIBestAllyAttackPoint (int player, wave w);
native bool AIAnyAllyNeedsDefending (int player, wave w);
native point AIBestAllyDefendPoint (int player, wave w);

//--------------------------------------------------------------------------------------------------
// Misc Campaign
//--------------------------------------------------------------------------------------------------

const int c_campBeginner    = 1; // difficulty settings
const int c_campNormal      = 2;
const int c_campAdvanced    = 3;
const int c_campExpert      = 4;

native void AIGlobalSuicide (int player);

native wave AIUnitGetWave (unit u);
native unitgroup AIWaveGetUnits (wave w);

native unitgroup AIGetAllEscorts (unit u);
native unitgroup AIGetAllEscortsGroup (unitgroup ug);

native void AIRemoveUnitFromAnyWaves (unit u);
native void AIRemoveGroupFromAnyWaves (unitgroup ug);

native void AIRemoveUnitFromAnyWavesAndSetHome (unit u, point home);
native void AIRemoveGroupFromAnyWavesAndSetHome (unitgroup ug, point home);

native unitgroup AIGetUnitsInWavesWithTarget (int player, wavetarget target);

native bool AIIsScriptControlled (unit u);
native void AISetUnitScriptControlled (unit u, bool enable);
native void AISetGroupScriptControlled (unitgroup ug, bool enable);

native bool AIIsSuicideUnit (unit u);
native void AISetUnitSuicide (unit u, bool enable);
native void AISetGroupSuicide (unitgroup ug, bool enable);

native bool AIIsNotUsableInWaves (unit u);
native void AISetUnitNotUsableInWaves (unit u, bool enable);
native void AISetGroupNotUsableInWaves (unitgroup ug, bool enable);

native void AISetWantsToUpgrade (unit u);

native void AISetUnitForceMover (unit u, bool enable);
native void AISetGroupForceMover (unitgroup ug, bool enable);

native void AIInitCampaignTowns (int player);
native void AIInitCampaignHarvest (int player);


//--------------------------------------------------------------------------------------------------
//  Towns
//--------------------------------------------------------------------------------------------------
native void AIDeclareTown (int player, int town, point center);
native int AIGetMainTown (int player);
native void AISetMainTown (int player, int maintown);
native void AIUpdateMainTown (int player);

native bool AIIsTownFull (int player, int town);
native int AIGetTownState (int player, int town);
native fixed AIGetTownEstablishedTime (int player, int town);
native point AIGetTownLocation (int player, int town);
native int AIGetClosestTown (int player, point location);
native int AIGetNextUnusedTownSlot (int player);
native int AIGetBuildingCountInTown (int player, int town, string aliasUnitType, int countMask);

native bool AIIsTownHarvestRunning (int player, int town);
native void AIHarvest (int player, int town);
native void AIHarvestRate (int player, int rate);
native void AIHarvestBonus (int player, fixed bonus);
native void AISetGasPeonCountOverride (int player, int town, int desiredGasCount);

native int AIGetCurPeonCount (int player, int town);
native int AIGetMinPeonCount (int player, int town);
native int AIGetMaxPeonCount (int player, int town);
native int AIGetMineralAmountLeft (int player, int town);
native int AIGetGasAmountLeft (int player, int town);
native int AIGetMineralNumSpots (int player, int town);
native int AIGetHarvestableGasNumSpots (int player, int town);
native int AIGetRawGasNumSpots (int player, int town);

native point AIGetGatherLocation (int player, int town);//xxx remove old functions
native point AIGetGatherDefLocation (int player, int town);

native int AIExpand (int player, point searchStart, string firstBuilding);
native unitgroup AIGetTownThreats (int player, int town);
native unit AIGetObstruction (int player);
native bool AIHasNearbyOpenExpansion (int player);

//-------------------------------------------------------------------------------------------------
//  Scouting
//--------------------------------------------------------------------------------------------------
native void AIScout (int player);
native void AISetNumScouts (int player, int num);
native void AISetScoutTimes (int player, int starts, int obstructed, int resources, int other);

native point AIGetNextScoutLoc (int player);
native void AIClearCampaignScout (int player);

//--------------------------------------------------------------------------------------------------
//  Construction
//--------------------------------------------------------------------------------------------------
native void AIBuild (int player, int priority, int town, string aliasUnitType, int count, int flags);
native void AITrain (int player, int priority, int town, string aliasUnitType, int count);
native void AIResearch (int player, int priority, int town, string aliasUpgradeType);
native void AIMakeAlways (int player, int priority, int town, string aliasType, int count);
native void AIMakeOnce (int player, int priority, int town, string aliasType, int count);

native void AIClearBuildQueue (int player);
native void AIClearTrainQueue (int player);
native void AIClearResearchQueue (int player);

native bool AIHasRes (int player, int minerals, int gas);
native int  AITechCount (int player, string aliasType, int countMask);
native void AITechCountFixupSingle (int player, string baseUnit, string upgradeOne);
native void AITechCountFixupEither (int player, string baseUnit, string upgradeOne, string upgradeTwo);
native void AITechCountFixupInOrder (int player, string baseUnit, string upgradeOne, string upgradeTwo);
native int  AIKnownUnitCount (int player, int testPlayerId, string aliasUnitType);

native void AIResetCounterUnits (int player);
native void AICounterUnitSetup (int player, string seeWhat, fixed factorSameTech, string makeWhatSameTech, fixed factorAnyTech, string makeWhatAnyTech);
native int AICounterUnitsSameTech (int player, int testPlayerId, string makeWhat);
native int AICounterUnitsAnyTech (int player, int testPlayerId, string makeWhat);

native point AIGetRallyPoint (unit u);

native void AISetPowerBuilding (int player, string building);
native void AISetCreepBuilding (int player, string building, string noCreepBehavior);

//--------------------------------------------------------------------------------------------------
//  Stock
//--------------------------------------------------------------------------------------------------
native void AIClearStock (int player);
native void AIEnableStock (int player);

native void AISetStockEx (int player, int town, int count, string aliasType, int buildFlags, int stockFlags);
native void AISetStock (int player, int count, string aliasType);
native void AISetStockOpt (int player, int count, string aliasType);
native void AISetStockUnitNext (int player, int count, string aliasUnitType, bool when);
native bool AISetStockTown (int player, string aliasUnitTypeTH, string aliasUnitTypeGas);
native bool AISetStockExpand (int player, string aliasUnitTypeTH, int count);
native void AISetStockExtra (int player, int count, string aliasUnitType, int minerals);
native void AISetStockFarms (int player, string aliasUnitType, bool onlyNeeded);
native void AISetStockPeons (int player, int max, string aliasUnitType, bool onlyMinPeons, bool peonMode);

native void AINewTechStock (int player);
native void AITechStockAdd (string upgradeType);
native void AISetStockTechNext (int player);

void AISetStockAlias (int player, int count, string makeType, string aliasType) {
    count = count - AITechCount(player, aliasType, c_techCountQueuedOrBetter);
    if (count > 0) {
        AISetStock(player, count + AITechCount(player, makeType, c_techCountQueuedOrBetter), makeType);
    }
}

void AISetStockFree (int player, int count, string makeType, string prereq) {
    if (AITechCount(player, prereq, c_techCountCompleteOnly) > 0) {
        AISetStock( player, count, makeType );
    }        
}

native void AIDefaultEconomy (int player, string hall, string gas, string food, string peon, int cap, bool peonMode);
native void AIDefaultExpansion (int player, string hall, int minerals, int gas, int expandFlags);

native void AIClearLimitTech (int player);
native void AILimitTech (int player, int totalMin, int totalGas, int buildingMin, int buildingGas, int upgradeMin, int upgradeGas);
native void AIImportantTech (int player, string aliasType);

native void AILimitStockLarva (int player, string aliasType);

native bool AIHasStock (int player);
native bool AIHasStockFromTown (int player, int town);
native void AIRemoveStockFromTown (int player, int town);

//--------------------------------------------------------------------------------------------------
//  AI Requirements
//--------------------------------------------------------------------------------------------------
native int AIDefaultGetObjectType (int player, string aliasType);
native string AIDefaultGetMaker (int player, string aliasType);
native string AIDefaultGetFirstMissingReq (int player, string aliasType);
native string AIDefaultGetFirstUnfinishedReq (int player, string aliasType);
native int AIDefaultGetFullMakeTime (int player, string aliasType);

native string AIGetBaseName (string aliasType);
native string AIGetBuildAtName (string aliasType);

native void AIReqCountAsBuiltObject (int player, string aliasType);
native void AIReqAddSpecialMaker (string objType, string makerType, string abilName, int abilIndex);

//--------------------------------------------------------------------------------------------------
//  Tactical
//--------------------------------------------------------------------------------------------------
native void AIBaseThink (unit who, unitgroup candidates);
native bool AIEvalTacticalData (unit who, string data);

const bool c_castRetreat = true;
const bool c_castHold    = false;
native int AICast (unit u, order o, marker m, bool retreat);
native int AICastFlee (unit who, unit from, int distance, marker mark);

const int c_tactTimerFirst  = 0;
const int c_tactTimerSecond = 1;
const int c_tactTimerThird  = 2;
const int c_tactTimerFourth = 3;
native int AICastCooldown (unit u, order o, marker m, bool retreat, int timerIdx, fixed cooldown);
native int AISetCooldown (unit u, int timerIdx, fixed cooldown);
native bool AITactCooldownAllow (unit u, int timerIdx);

native bool AINearbyUnits (int player, string unitType, point p, fixed range, int requiredCount);
native unitgroup AIFindUnits (int player, string unitType, point p, fixed range, int inMaxCount);
native bool AISameCommand (unit u1, unit u2);

native unit AILastAttacker (unit u);
native int AILastAttack (unit u);

native bool AIControlWantsToMove (unit u);
native bool AIControlForceToMove (unit u);
native bool AIControlWantsToUnburrow (unit u);
native bool AIControlWantsToBurrow (unit u);
native bool AIControlForceUnburrow (unit u);

native bool AIUnitIsInCombat (unit u);

native bool AIIsIgnoredByWave (unit u);
native void AISetIgnoredByWave (unit u, bool enable);

native point AIGetHomePosition (unit u);

native point AIGetCloakedAttacker (int p);
native void AIClearCloakedAttacker (int p, point pt);
native bool AISawCloakedUnit (int p);

native point AIRandomSpawnPoint (
    int player,
    region r,
    fixed minDistFromEnemy,
    fixed maxDistFromEnemy,
    fixed maxDistFromBuilding
);
native point AIBestTargetPoint (
    unitgroup group,
    int minHits,
    int damageBase,
    fixed minScore,
    fixed radius,
    point from,
    fixed range,
    int bonusAttri
);

native unit AIDefaultCombatPriority (unitgroup attackers, unitgroup enemies, int maxAttackerLimit);

const int c_cloakMaxRange = 10;
native bool AICloakEvaluate (unit u, fixed minEnergy, fixed maxLife, fixed range);

void AISpecifiedHealers (int player);

//--------------------------------------------------------------------------------------------------
//  Combat
//--------------------------------------------------------------------------------------------------
const int c_combatFlagDisable    = 0;
const int c_combatFlagEnable     = 1;
const int c_combatFlagRead       = 2;

void AISetDefaultCombatFlags (int player, bool isMelee);
native void AISetMaxBestAttackersLimit (int player, int limit);

native bool AICombatDiffFlagCatSpecialHighPrio    (int player, int action);
native bool AICombatDiffFlagCatSplashHighPrio     (int player, int action);
native bool AICombatDiffFlagCatTimedLowPrio       (int player, int action);
native bool AICombatDiffFlagCatWorkersNormalPrio  (int player, int action);
native bool AICombatDiffFlagCatSortBuildingsPrio  (int player, int action);
native bool AICombatDiffFlagTieBreakHealers       (int player, int action);
native bool AICombatDiffFlagTieBreakBonusDamage   (int player, int action);
native bool AICombatDiffFlagTieBreakLowHP         (int player, int action);
native bool AICombatDiffFlagTieBreakInjured       (int player, int action);
native bool AICombatDiffFlagTieBreakDetector      (int player, int action);
native bool AICombatDiffFlagTieBreakRange         (int player, int action);

//--------------------------------------------------------------------------------------------------
//  Transports
//--------------------------------------------------------------------------------------------------
native void AITransportIgnore (int player, string unitType);
native void AITransportSetPanic (int player, fixed value);
native void AITransportSetReturn (int player, point center);

//--------------------------------------------------------------------------------------------------
//  Waves
//--------------------------------------------------------------------------------------------------
native waveinfo AIWaveInfoCreate ();
native waveinfo AIWaveInfo (wave w);

native void AIWaveInfoAdd (waveinfo info, string unitType, int count);
native int AIWaveInfoAttack (waveinfo info, int player, point from, wavetarget target, int time);
native int AIWaveInfoSuicide (waveinfo info, int player, point from, wavetarget target, int time);
native int AIWaveInfoScout (waveinfo info, int player, point from, int time);

native string AIWaveToString (wave w);
native text AIWaveToText (wave w);

native wave AIWaveCreate (waveinfo info, int player, point from);
native void AIWaveAddUnit (wave w, unit u);
native void AIWaveAddUnitPriority (wave w, unit u, int prio);
native void AIWaveRemoveUnit (wave w, unit u);
native int  AIWaveUnitCount (wave w);
native int  AIWaveDetectorCount (wave w);

native void AIWaveSetType (wave w, int type, wavetarget target);

native int AIWaveState (wave w);
native point AIWaveGoal (wave w);

native void AIWaveDelete (wave w);

native wavetarget AIWaveTargetUnit (unit u);
native wavetarget AIWaveTargetUnitGroup (unitgroup g);
native wavetarget AIWaveTargetUnitPoint (unit u);
native wavetarget AIWaveTargetPoint (point p);
native wavetarget AIWaveTargetPlayer (playergroup players);
native wavetarget AIWaveTargetMelee (int player);
native wavetarget AIWaveTargetMeleeHarass (int player);
native wavetarget AIWaveTargetMeleeDrop (int player, point dropLoc, point goalLoc);
native wavetarget AIWaveTargetMeleeDefend (int player);
native wavetarget AIWaveTargetMerge (wave w);
native wavetarget AIWaveTargetPatrol (int replaceType);
native wavetarget AIWaveTargetEscort (unitgroup g, int replaceType);
native wavetarget AIWaveTargetEscortNL (unitgroup g, int replaceType);
native wavetarget AIWaveTargetGatherO (int player, int town);
native wavetarget AIWaveTargetGatherD (int player, int town);
native wavetarget AIWaveTargetRegion (region r, int replaceType);

native point AIWaveTargetGatherOPoint (int player, int town);
native point AIWaveTargetGatherDPoint (int player, int town);

native unit         AIWaveTargetGetUnit (wavetarget wt);
native unitgroup    AIWaveTargetGetUnitGroup (wavetarget wt);

native wavetarget AIWaveHarassRetreat (int player, wave w, fixed range);

native wavetarget AIWaveGetTarget (wave w);

native bool AIWaveIsInCombat (wave w);
native int AIWaveGetTimeInCombat (wave w);
native int AIWaveGetTimeSinceCombat (wave w);
native int AIWaveGetTimeSinceOrdered (wave w);

native int AIWaveGetTimeSinceRetreat (wave w);

native bool AIShouldHelpUserAlly (int player, wave w);
native point AIGetBestUserAllyHelpLocation (int player, wave w);
native bool AIDefenseThreat (int type, int player, wave w);
native int AISelfDefenseThreatEval (int type, int player);

native int AIWaveEval (wave w);
native int AIWaveEvalRatio (wave w, fixed range);
native int AIUnitAreaEvalRatio (unit u, fixed range);
native int AIEvalRatio (int player);
native void AIEvalSetCustomIndex (int index);
native int AILastWaveEvalStaticRatio ();

native void AIWaveTargetAddWaypoint (wavetarget wt, point waypoint, bool useTransport, int index);
native void AIWaveTargetClearWaypoints (wavetarget wt);

//--- melee games ---
native wave AIWaveGet (int player, int waveName);
native void AIWaveSet (int player, int waveName, wave waveRef);
native int  AIWaveType (wave waveRef);
//native void AIWaveSetUserData (wave waveRef, int index, int data);
//native int  AIWaveGetUserData (wave waveRef, int index);

native void AIWaveMerge (int player, int waveFrom, int waveInto);
native void AIWaveMergeMelee (int player);

native wave WaveLastCreated ();

native point AIGetBestTarget (int player, playergroup enemies, point gatherPoint, int flags);

native bool AIFindDropAttackTarget (int player, point gatherPoint);
native point AILastDropLocation ();
native point AILastDropGoal ();
native fixed AIGetNextDropTimeCheck(int player);
native void AISetNextDropTimeCheck(int player, fixed time);

native int AILastAttackRatio (wave w);
native int AILastAttackStartEval (wave w);

//--------------------------------------------------------------------------------------------------
//  Attack Wave
//--------------------------------------------------------------------------------------------------

// Note: The difficulty parameter is a one-based index into
//       the externalized difficulty levels defined in GameData.xml
//
const int c_difficultyAll = -1; // Add the same count to all difficulty levels

native void AIAttackWaveAddUnits (int difficulty, int count, string unitType);

// External utility function to add four counts to the standard four difficulties
void AIAttackWaveAddUnits4 (int n1, int n2, int n3, int n4, string unitType) {
    AIAttackWaveAddUnits(2, n1, unitType); // Easy
    AIAttackWaveAddUnits(3, n2, unitType); // Normal
    AIAttackWaveAddUnits(4, n3, unitType); // Hard
    AIAttackWaveAddUnits(5, n4, unitType); // Insane
}

// Old external utility function to add three counts to the standard three difficulties
void AIAttackWaveAddUnits3 (int n1, int n2, int n3, string unitType) {
    AIAttackWaveAddUnits4(n1,n2,n3,n3,unitType);
}

native int AIAttackWaveSend (int player, int time, bool wait);

native void AIAttackWaveCancel (wave waveRef);

native void AIAttackWaveSetGatherPoint (int player, point gather);

native void AIAttackWaveUseUnit (int player, unit u);
native void AIAttackWaveUseGroup (int player, unitgroup ug);

native void AIAttackWaveAddEscortUnit (int player, unit u, unit escort, fixed offset, fixed angle);
native void AIAttackWaveAddEscortType (int player, string unitType, unit escort, fixed offset, fixed angle);

native void AIAttackWaveSetTargetUnit (int player, unit u);
native void AIAttackWaveSetTargetUnitGroup (int player, unitgroup ug);
native void AIAttackWaveSetTargetUnitPoint (int player, unit u);
native void AIAttackWaveSetTargetPoint (int player, point p);
native void AIAttackWaveSetTargetPlayer (int player, playergroup players);
native void AIAttackWaveSetTargetMelee (int player);
native void AIAttackWaveSetTargetMeleeHarass (int player);
native void AIAttackWaveSetTargetMeleeDrop (int player, point dropLoc, point goalLoc);
native void AIAttackWaveSetTargetMeleeDefend (int player);
native void AIAttackWaveSetTargetMerge (int player, wave w);
native void AIAttackWaveSetTargetPatrol (int player, int replaceType);
native void AIAttackWaveSetTargetEscort (int player, unitgroup g, int replaceType);
native void AIAttackWaveSetTargetEscortNL (int player, unitgroup g, int replaceType);
native void AIAttackWaveSetTargetGatherO (int player, int town);
native void AIAttackWaveSetTargetGatherD (int player, int town);
native void AIAttackWaveSetTargetRegion (int player, region r, int replaceType);

native void AIAttackWaveSetGatherEarlyNoReplace (int player);
native void AIAttackWaveSetKeepAlive (int player);

native void AIAttackWaveAddWaypoint (int player, point waypoint, bool useTransport);
native void AIAttackWaveClearWaypoints (int player);

//--------------------------------------------------------------------------------------------------
//  Bully Functions
//--------------------------------------------------------------------------------------------------

native void AISetMinimumBullyCount (int count, string unitType, int player);

native void AISetGeneralRebuildCount (int count, bool building, int player);
native void AISetSpecificRebuildCount (int count, string unitType, int player);

native void AISetBullyAttackWavePercent (int percent, int player);
native void AINearestTownLimitWaveGather (int player, bool enable);

native void AINearestTownBullyRebuild (int player, bool enable);

native void AIToggleBulliesInRegion (int player, region reg, bool activate);
native void AIResetBullyRebuildCountsInRegion (int player, region reg);

native void AIClearAllBullies (int player);
native void AIAddBully (int player, string unitType, point loc, int rebuildCount);

native string AIGetBullyType (unit u);


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Alert.galaxy generated from Alert.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCAlert
const int c_classIdCAlert = 0;
const string c_classIdCAlertName = "CAlert";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  AttachMethod.galaxy generated from AttachMethod.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCAttachMethod
const int c_classIdCAttachMethod = 0;
const int c_classIdCAttachMethodArcTest = 1;
const int c_classIdCAttachMethodFilter = 2;
const int c_classIdCAttachMethodLeastDeflection = 3;
const int c_classIdCAttachMethodNodeOccupancy = 4;
const int c_classIdCAttachMethodNumericField = 5;
const int c_classIdCAttachMethodPattern = 6;
const int c_classIdCAttachMethodPortAllocator = 7;
const int c_classIdCAttachMethodProximity = 8;
const int c_classIdCAttachMethodRandom = 9;
const int c_classIdCAttachMethodReduction = 10;
const int c_classIdCAttachMethodVolumesRequery = 11;
const int c_classIdCAttachMethodVolumesWeightedPick = 12;
const string c_classIdCAttachMethodName = "CAttachMethod";
const string c_classIdCAttachMethodArcTestName = "CAttachMethodArcTest";
const string c_classIdCAttachMethodFilterName = "CAttachMethodFilter";
const string c_classIdCAttachMethodLeastDeflectionName = "CAttachMethodLeastDeflection";
const string c_classIdCAttachMethodNodeOccupancyName = "CAttachMethodNodeOccupancy";
const string c_classIdCAttachMethodNumericFieldName = "CAttachMethodNumericField";
const string c_classIdCAttachMethodPatternName = "CAttachMethodPattern";
const string c_classIdCAttachMethodPortAllocatorName = "CAttachMethodPortAllocator";
const string c_classIdCAttachMethodProximityName = "CAttachMethodProximity";
const string c_classIdCAttachMethodRandomName = "CAttachMethodRandom";
const string c_classIdCAttachMethodReductionName = "CAttachMethodReduction";
const string c_classIdCAttachMethodVolumesRequeryName = "CAttachMethodVolumesRequery";
const string c_classIdCAttachMethodVolumesWeightedPickName = "CAttachMethodVolumesWeightedPick";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Beam.galaxy generated from Beam.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCBeam
const int c_classIdCBeam = 0;
const int c_classIdCBeamSync = 1;
const int c_classIdCBeamSyncSweeper = 2;
const int c_classIdCBeamAsync = 3;
const int c_classIdCBeamAsyncLinear = 4;
const int c_classIdCBeamAsyncShadow = 5;
const string c_classIdCBeamName = "CBeam";
const string c_classIdCBeamSyncName = "CBeamSync";
const string c_classIdCBeamSyncSweeperName = "CBeamSyncSweeper";
const string c_classIdCBeamAsyncName = "CBeamAsync";
const string c_classIdCBeamAsyncLinearName = "CBeamAsyncLinear";
const string c_classIdCBeamAsyncShadowName = "CBeamAsyncShadow";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Behavior.galaxy generated from Behavior.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCBehavior
const int c_classIdCBehavior = 0;
const int c_classIdCBehaviorAttribute = 1;
const int c_classIdCBehaviorBuff = 2;
const int c_classIdCBehaviorClickResponse = 3;
const int c_classIdCBehaviorConjoined = 4;
const int c_classIdCBehaviorCreepSource = 5;
const int c_classIdCBehaviorJump = 6;
const int c_classIdCBehaviorPowerSource = 7;
const int c_classIdCBehaviorPowerUser = 8;
const int c_classIdCBehaviorResource = 9;
const int c_classIdCBehaviorReveal = 10;
const int c_classIdCBehaviorSpawn = 11;
const int c_classIdCBehaviorVeterancy = 12;
const int c_classIdCBehaviorWander = 13;
const string c_classIdCBehaviorName = "CBehavior";
const string c_classIdCBehaviorAttributeName = "CBehaviorAttribute";
const string c_classIdCBehaviorBuffName = "CBehaviorBuff";
const string c_classIdCBehaviorClickResponseName = "CBehaviorClickResponse";
const string c_classIdCBehaviorConjoinedName = "CBehaviorConjoined";
const string c_classIdCBehaviorCreepSourceName = "CBehaviorCreepSource";
const string c_classIdCBehaviorJumpName = "CBehaviorJump";
const string c_classIdCBehaviorPowerSourceName = "CBehaviorPowerSource";
const string c_classIdCBehaviorPowerUserName = "CBehaviorPowerUser";
const string c_classIdCBehaviorResourceName = "CBehaviorResource";
const string c_classIdCBehaviorRevealName = "CBehaviorReveal";
const string c_classIdCBehaviorSpawnName = "CBehaviorSpawn";
const string c_classIdCBehaviorVeterancyName = "CBehaviorVeterancy";
const string c_classIdCBehaviorWanderName = "CBehaviorWander";

//  EBehaviorCategory
const int c_behaviorCategoryPermanent = 0;
const int c_behaviorCategoryRestorable = 1;
const int c_behaviorCategoryTemporary = 2;
const string c_behaviorCategoryPermanentName = "Permanent";
const string c_behaviorCategoryRestorableName = "Restorable";
const string c_behaviorCategoryTemporaryName = "Temporary";


//==================================================================================================
//
// Placeholder AI script file
//
//  Since natives.galaxy in Core includes AI files in Liberty, placeholder files are necessary
//  such that Core-only mods can compile properly.
//
//==================================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Button.galaxy generated from Button.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCButton
const int c_classIdCButton = 0;
const string c_classIdCButtonName = "CButton";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Camera.galaxy generated from Camera.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCCamera
const int c_classIdCCamera = 0;
const string c_classIdCCameraName = "CCamera";


//==================================================================================================
//
// Placeholder AI script file
//
//  Since natives.galaxy in Core includes AI files in Liberty, placeholder files are necessary
//  such that Core-only mods can compile properly.
//
//==================================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Cliff.galaxy generated from Cliff.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCCliff
const int c_classIdCCliff = 0;
const string c_classIdCCliffName = "CCliff";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  CliffMesh.galaxy generated from CliffMesh.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCCliffMesh
const int c_classIdCCliffMesh = 0;
const string c_classIdCCliffMeshName = "CCliffMesh";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Conversation.galaxy generated from Conversation.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCConversation
const int c_classIdCConversation = 0;
const string c_classIdCConversationName = "CConversation";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  ConversationState.galaxy generated from ConversationState.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCConversationState
const int c_classIdCConversationState = 0;
const string c_classIdCConversationStateName = "CConversationState";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Cursor.galaxy generated from Cursor.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCCursor
const int c_classIdCCursor = 0;
const string c_classIdCCursorName = "CCursor";


//==================================================================================================
//  Test functions to debug Galaxy ASM
//==================================================================================================

//include "TriggerLibs/NativeLib"
//include "TriggerLibs/CampaignLib"
//
//void InitMap () {
//    //TestFunction();
//
//    libNtve_InitLib();
//    libCamp_InitLib();
//}

int Test1 () {
    return 1;
}

int Test2 () {
    return 2;
}

void Test (int var) {
}

void InitMap () {
    Test(Test1()+Test2());
}

//void Bar( int a[1][2] ) {
//}

//void Foo() {
//}

//
//text foo;
//
//void Bar (string a, int b, string c, int d) {
//    foo = StringExternal(a);
//    foo = StringExternal(a);
//    foo = StringExternal(a);
//    foo = StringExternal(a);
//    a = a;
//}
//
//void InitMap () {
//    Bar("Param/Value/lib_Camp_3358AAC6",7,"Param/Value/lib_Camp_3358AAC6",8);
//}

//void Bar(int a, int b, int c) {
//    int k;
//    k = 0;
//}
//
//void InitMap () {
//    int a;
//
//    Bar(0, 1, 2);
//
//    a = 47;
//
//    AIGetTownLocation(3, 4);
//}


//unitgroup[57][79] foo;
//unitgroup[23] bar;
//
//void InitMap () {
//    unitgroup a;
//    unitgroup b;
//
//    b = bar[8];
//    a = foo[9][10];
//    bar[11] = foo[12][13];
//    foo[17][18] = bar[19];
//
//    if (bar[14] != foo[15][16]) {
//        a = b;
//    }
//}

//
//unitgroup Foo (unitgroup ugParam, int i1, int i2, int i3) {
//	return ugParam;
//}
//
////--------------------------------------------------------------------------------------------------
//unitgroup Bar (unitgroup ugParam) {
//    ugParam = Foo(ugParam, 0, 0, 0);
//    return ugParam;
//}
//
////--------------------------------------------------------------------------------------------------
//unitgroup InitMap (unitgroup ugParam, point here) {
//	unitgroup local1;
//	unitgroup local2;
//	int local3;
//	int local4;
//	unitgroup local5;
//	unitgroup local6;
//	unitgroup local7;
//	
//	ugParam = Bar(ugParam);
//	local1 = Bar(ugParam);
//	local1 = Bar(local2);
//	local2 = Bar(local1);
//	local6 = Bar(local5);
//	
//    ugParam = Foo(ugParam, 0, 0, 0);
//    ugParam = Foo(ugParam, 0, 0, 0);
//    
//	local3 = 3;
//	
//    local1 = Foo(ugParam, 0, 0, 0);
//    local2 = Foo(ugParam, 0, 0, 0);
//    
//    local2 = Foo(local1, 0, 0, 0);
//    local6 = Foo(local5, 0, 0, 0);
//    
//    if (local3 == 47) {
//		return local7;
//	}
//    
//    local5 = Foo(ugParam, 0, 0, 0);
//    
//    local4 = 4;
//    
//    if (local4 == 47) {
//		return local7;
//	}
//		
//    local6 = Foo(ugParam, 0, 0, 0);
//
//    return local7;
//}


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  DSP.galaxy generated from DSP.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Effect.galaxy generated from Effect.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCEffect
const int c_classIdCEffect = 0;
const int c_classIdCEffectResponse = 1;
const int c_classIdCEffectApplyBehavior = 2;
const int c_classIdCEffectApplyForce = 3;
const int c_classIdCEffectCreateHealer = 4;
const int c_classIdCEffectCreatePersistent = 5;
const int c_classIdCEffectCreateUnit = 6;
const int c_classIdCEffectDamage = 7;
const int c_classIdCEffectDestroyHealer = 8;
const int c_classIdCEffectDestroyPersistent = 9;
const int c_classIdCEffectEnumArea = 10;
const int c_classIdCEffectEnumTransport = 11;
const int c_classIdCEffectIssueOrder = 12;
const int c_classIdCEffectLaunchMissile = 13;
const int c_classIdCEffectModifyPlayer = 14;
const int c_classIdCEffectModifyUnit = 15;
const int c_classIdCEffectReleaseMagazine = 16;
const int c_classIdCEffectRemoveBehavior = 17;
const int c_classIdCEffectSet = 18;
const int c_classIdCEffectSwitch = 19;
const int c_classIdCEffectTeleport = 20;
const int c_classIdCEffectTransferBehavior = 21;
const int c_classIdCEffectUseCalldown = 22;
const int c_classIdCEffectUseMagazine = 23;
const string c_classIdCEffectName = "CEffect";
const string c_classIdCEffectResponseName = "CEffectResponse";
const string c_classIdCEffectApplyBehaviorName = "CEffectApplyBehavior";
const string c_classIdCEffectApplyForceName = "CEffectApplyForce";
const string c_classIdCEffectCreateHealerName = "CEffectCreateHealer";
const string c_classIdCEffectCreatePersistentName = "CEffectCreatePersistent";
const string c_classIdCEffectCreateUnitName = "CEffectCreateUnit";
const string c_classIdCEffectDamageName = "CEffectDamage";
const string c_classIdCEffectDestroyHealerName = "CEffectDestroyHealer";
const string c_classIdCEffectDestroyPersistentName = "CEffectDestroyPersistent";
const string c_classIdCEffectEnumAreaName = "CEffectEnumArea";
const string c_classIdCEffectEnumTransportName = "CEffectEnumTransport";
const string c_classIdCEffectIssueOrderName = "CEffectIssueOrder";
const string c_classIdCEffectLaunchMissileName = "CEffectLaunchMissile";
const string c_classIdCEffectModifyPlayerName = "CEffectModifyPlayer";
const string c_classIdCEffectModifyUnitName = "CEffectModifyUnit";
const string c_classIdCEffectReleaseMagazineName = "CEffectReleaseMagazine";
const string c_classIdCEffectRemoveBehaviorName = "CEffectRemoveBehavior";
const string c_classIdCEffectSetName = "CEffectSet";
const string c_classIdCEffectSwitchName = "CEffectSwitch";
const string c_classIdCEffectTeleportName = "CEffectTeleport";
const string c_classIdCEffectTransferBehaviorName = "CEffectTransferBehavior";
const string c_classIdCEffectUseCalldownName = "CEffectUseCalldown";
const string c_classIdCEffectUseMagazineName = "CEffectUseMagazine";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Error.galaxy generated from Error.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCError


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Footprint.galaxy generated from Footprint.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCFootprint
const int c_classIdCFootprint = 0;
const string c_classIdCFootprintName = "CFootprint";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  FoW.galaxy generated from FoW.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Game.galaxy generated from Game.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCGame
const int c_classIdCGame = 0;
const string c_classIdCGameName = "CGame";

//  EAllianceId
const int c_allianceIdPassive = 0;
const int c_allianceIdVision = 1;
const int c_allianceIdControl = 2;
const int c_allianceIdSpend = 3;
const int c_allianceIdTrade = 4;
const int c_allianceIdSeekHelp = 5;
const int c_allianceIdGiveHelp = 6;
const int c_allianceIdChat = 7;
const int c_allianceIdDefeat = 8;
const int c_allianceIdPushable = 9;
const string c_allianceIdPassiveName = "Passive";
const string c_allianceIdVisionName = "Vision";
const string c_allianceIdControlName = "Control";
const string c_allianceIdSpendName = "Spend";
const string c_allianceIdTradeName = "Trade";
const string c_allianceIdSeekHelpName = "SeekHelp";
const string c_allianceIdGiveHelpName = "GiveHelp";
const string c_allianceIdChatName = "Chat";
const string c_allianceIdDefeatName = "Defeat";
const string c_allianceIdPushableName = "Pushable";

//  EPlayerType
const int c_playerTypeNone = 0;
const int c_playerTypeUser = 1;
const int c_playerTypeComputer = 2;
const int c_playerTypeNeutral = 3;
const int c_playerTypeHostile = 4;
const int c_playerTypeReferee = 5;
const int c_playerTypeSpectator = 6;
const string c_playerTypeNoneName = "None";
const string c_playerTypeUserName = "User";
const string c_playerTypeComputerName = "Computer";
const string c_playerTypeNeutralName = "Neutral";
const string c_playerTypeHostileName = "Hostile";
const string c_playerTypeRefereeName = "Referee";
const string c_playerTypeSpectatorName = "Spectator";

//  ETargetFilter
const int c_targetFilterSelf = 0;
const int c_targetFilterPlayer = 1;
const int c_targetFilterAlly = 2;
const int c_targetFilterNeutral = 3;
const int c_targetFilterEnemy = 4;
const int c_targetFilterAir = 5;
const int c_targetFilterGround = 6;
const int c_targetFilterLight = 7;
const int c_targetFilterArmored = 8;
const int c_targetFilterBiological = 9;
const int c_targetFilterRobotic = 10;
const int c_targetFilterMechanical = 11;
const int c_targetFilterPsionic = 12;
const int c_targetFilterMassive = 13;
const int c_targetFilterStructure = 14;
const int c_targetFilterHover = 15;
const int c_targetFilterHeroic = 16;
const int c_targetFilterWorker = 17;
const int c_targetFilterRawResource = 18;
const int c_targetFilterHarvestableResource = 19;
const int c_targetFilterMissile = 20;
const int c_targetFilterDestructible = 21;
const int c_targetFilterItem = 22;
const int c_targetFilterUncommandable = 23;
const int c_targetFilterCanHaveEnergy = 24;
const int c_targetFilterCanHaveShields = 25;
const int c_targetFilterPreventDefeat = 26;
const int c_targetFilterPreventReveal = 27;
const int c_targetFilterBuried = 28;
const int c_targetFilterCloaked = 29;
const int c_targetFilterVisible = 30;
const int c_targetFilterStasis = 31;
const int c_targetFilterUnderConstruction = 32;
const int c_targetFilterDead = 33;
const int c_targetFilterRevivable = 34;
const int c_targetFilterHidden = 35;
const int c_targetFilterHallucination = 36;
const int c_targetFilterInvulnerable = 37;
const int c_targetFilterHasEnergy = 38;
const int c_targetFilterHasShields = 39;
const int c_targetFilterBenign = 40;
const int c_targetFilterPassive = 41;
const int c_targetFilterDetector = 42;
const int c_targetFilterRadar = 43;
const string c_targetFilterSelfName = "Self";
const string c_targetFilterPlayerName = "Player";
const string c_targetFilterAllyName = "Ally";
const string c_targetFilterNeutralName = "Neutral";
const string c_targetFilterEnemyName = "Enemy";
const string c_targetFilterAirName = "Air";
const string c_targetFilterGroundName = "Ground";
const string c_targetFilterLightName = "Light";
const string c_targetFilterArmoredName = "Armored";
const string c_targetFilterBiologicalName = "Biological";
const string c_targetFilterRoboticName = "Robotic";
const string c_targetFilterMechanicalName = "Mechanical";
const string c_targetFilterPsionicName = "Psionic";
const string c_targetFilterMassiveName = "Massive";
const string c_targetFilterStructureName = "Structure";
const string c_targetFilterHoverName = "Hover";
const string c_targetFilterHeroicName = "Heroic";
const string c_targetFilterWorkerName = "Worker";
const string c_targetFilterRawResourceName = "RawResource";
const string c_targetFilterHarvestableResourceName = "HarvestableResource";
const string c_targetFilterMissileName = "Missile";
const string c_targetFilterDestructibleName = "Destructible";
const string c_targetFilterItemName = "Item";
const string c_targetFilterUncommandableName = "Uncommandable";
const string c_targetFilterCanHaveEnergyName = "CanHaveEnergy";
const string c_targetFilterCanHaveShieldsName = "CanHaveShields";
const string c_targetFilterPreventDefeatName = "PreventDefeat";
const string c_targetFilterPreventRevealName = "PreventReveal";
const string c_targetFilterBuriedName = "Buried";
const string c_targetFilterCloakedName = "Cloaked";
const string c_targetFilterVisibleName = "Visible";
const string c_targetFilterStasisName = "Stasis";
const string c_targetFilterUnderConstructionName = "UnderConstruction";
const string c_targetFilterDeadName = "Dead";
const string c_targetFilterRevivableName = "Revivable";
const string c_targetFilterHiddenName = "Hidden";
const string c_targetFilterHallucinationName = "Hallucination";
const string c_targetFilterInvulnerableName = "Invulnerable";
const string c_targetFilterHasEnergyName = "HasEnergy";
const string c_targetFilterHasShieldsName = "HasShields";
const string c_targetFilterBenignName = "Benign";
const string c_targetFilterPassiveName = "Passive";
const string c_targetFilterDetectorName = "Detector";
const string c_targetFilterRadarName = "Radar";

//  EMarkerMatch
const int c_markerMatchId = 0;
const int c_markerMatchLink = 1;
const int c_markerMatchCasterPlayer = 2;
const int c_markerMatchCasterUnit = 3;
const string c_markerMatchIdName = "Id";
const string c_markerMatchLinkName = "Link";
const string c_markerMatchCasterPlayerName = "CasterPlayer";
const string c_markerMatchCasterUnitName = "CasterUnit";

//  EHeightMap
const int c_heightMapAir = 0;
const int c_heightMapGlide = 1;
const int c_heightMapGround = 2;
const string c_heightMapAirName = "Air";
const string c_heightMapGlideName = "Glide";
const string c_heightMapGroundName = "Ground";

//  EPlane
const int c_planeGround = 0;
const int c_planeAir = 1;
const string c_planeGroundName = "Ground";
const string c_planeAirName = "Air";

//  EDamageKind
const int c_damageKindSpell = 0;
const int c_damageKindMelee = 1;
const int c_damageKindRanged = 2;
const int c_damageKindSplash = 3;
const string c_damageKindSpellName = "Spell";
const string c_damageKindMeleeName = "Melee";
const string c_damageKindRangedName = "Ranged";
const string c_damageKindSplashName = "Splash";

//  EDeathType
const int c_deathTypeNormal = 0;
const int c_deathTypeRemove = 1;
const int c_deathTypeBlast = 2;
const int c_deathTypeDisintegrate = 3;
const int c_deathTypeEat = 4;
const int c_deathTypeElectrocute = 5;
const int c_deathTypeEviscerate = 6;
const int c_deathTypeFire = 7;
const int c_deathTypeFreeze = 8;
const int c_deathTypeImpact = 9;
const int c_deathTypeMorph = 10;
const int c_deathTypeSilentkill = 11;
const int c_deathTypeSquish = 12;
const int c_deathTypeTimeout = 13;
const int c_deathTypeUnlink = 14;
const int c_deathTypeUnderConstruction = 15;
const int c_deathTypeSalvage = 16;
const int c_deathTypeCancel = 17;
const string c_deathTypeNormalName = "Normal";
const string c_deathTypeRemoveName = "Remove";
const string c_deathTypeBlastName = "Blast";
const string c_deathTypeDisintegrateName = "Disintegrate";
const string c_deathTypeEatName = "Eat";
const string c_deathTypeElectrocuteName = "Electrocute";
const string c_deathTypeEviscerateName = "Eviscerate";
const string c_deathTypeFireName = "Fire";
const string c_deathTypeFreezeName = "Freeze";
const string c_deathTypeImpactName = "Impact";
const string c_deathTypeMorphName = "Morph";
const string c_deathTypeSilentkillName = "Silentkill";
const string c_deathTypeSquishName = "Squish";
const string c_deathTypeTimeoutName = "Timeout";
const string c_deathTypeUnlinkName = "Unlink";
const string c_deathTypeUnderConstructionName = "UnderConstruction";
const string c_deathTypeSalvageName = "Salvage";
const string c_deathTypeCancelName = "Cancel";

//  EResourceType
const int c_resourceTypeMinerals = 0;
const int c_resourceTypeVespene = 1;
const int c_resourceTypeTerrazine = 2;
const int c_resourceTypeCustom = 3;
const string c_resourceTypeMineralsName = "Minerals";
const string c_resourceTypeVespeneName = "Vespene";
const string c_resourceTypeTerrazineName = "Terrazine";
const string c_resourceTypeCustomName = "Custom";

//  ETeamColor
const int c_teamColorDiffuse = 0;
const int c_teamColorEmissive = 1;
const string c_teamColorDiffuseName = "Diffuse";
const string c_teamColorEmissiveName = "Emissive";

//  EBeacon
const int c_beaconRally = 0;
const int c_beaconAttack = 1;
const int c_beaconDefend = 2;
const int c_beaconDetect = 3;
const int c_beaconExpand = 4;
const int c_beaconHarass = 5;
const int c_beaconScout = 6;
const string c_beaconRallyName = "Rally";
const string c_beaconAttackName = "Attack";
const string c_beaconDefendName = "Defend";
const string c_beaconDetectName = "Detect";
const string c_beaconExpandName = "Expand";
const string c_beaconHarassName = "Harass";
const string c_beaconScoutName = "Scout";

//  EUnitTaunt
const int c_unitTauntCheer = 0;
const int c_unitTauntDance = 1;
const string c_unitTauntCheerName = "Cheer";
const string c_unitTauntDanceName = "Dance";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  GameData.galaxy generated from GameData.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EGameCatalog
const int c_gameCatalogAbil = 0;
const int c_gameCatalogAchievement = 1;
const int c_gameCatalogAchievementTerm = 2;
const int c_gameCatalogActor = 3;
const int c_gameCatalogAlert = 4;
const int c_gameCatalogAttachMethod = 5;
const int c_gameCatalogBeam = 6;
const int c_gameCatalogBehavior = 7;
const int c_gameCatalogButton = 8;
const int c_gameCatalogCamera = 9;
const int c_gameCatalogCliff = 10;
const int c_gameCatalogCliffMesh = 11;
const int c_gameCatalogConversation = 12;
const int c_gameCatalogConversationState = 13;
const int c_gameCatalogCursor = 14;
const int c_gameCatalogDSP = 15;
const int c_gameCatalogEffect = 16;
const int c_gameCatalogError = 17;
const int c_gameCatalogFootprint = 18;
const int c_gameCatalogFoW = 19;
const int c_gameCatalogGame = 20;
const int c_gameCatalogGameUI = 21;
const int c_gameCatalogItem = 22;
const int c_gameCatalogItemClass = 23;
const int c_gameCatalogItemContainer = 24;
const int c_gameCatalogLight = 25;
const int c_gameCatalogLoot = 26;
const int c_gameCatalogModel = 27;
const int c_gameCatalogMover = 28;
const int c_gameCatalogRace = 29;
const int c_gameCatalogRequirement = 30;
const int c_gameCatalogRequirementNode = 31;
const int c_gameCatalogReverb = 32;
const int c_gameCatalogReward = 33;
const int c_gameCatalogScoreResult = 34;
const int c_gameCatalogScoreValue = 35;
const int c_gameCatalogSound = 36;
const int c_gameCatalogSoundtrack = 37;
const int c_gameCatalogTactical = 38;
const int c_gameCatalogTargetFind = 39;
const int c_gameCatalogTargetSort = 40;
const int c_gameCatalogTerrain = 41;
const int c_gameCatalogTerrainObject = 42;
const int c_gameCatalogTerrainTex = 43;
const int c_gameCatalogTexture = 44;
const int c_gameCatalogTile = 45;
const int c_gameCatalogTurret = 46;
const int c_gameCatalogUnit = 47;
const int c_gameCatalogUpgrade = 48;
const int c_gameCatalogValidator = 49;
const int c_gameCatalogWater = 50;
const int c_gameCatalogWeapon = 51;
const string c_gameCatalogAbilName = "Abil";
const string c_gameCatalogAchievementName = "Achievement";
const string c_gameCatalogAchievementTermName = "AchievementTerm";
const string c_gameCatalogActorName = "Actor";
const string c_gameCatalogAlertName = "Alert";
const string c_gameCatalogAttachMethodName = "AttachMethod";
const string c_gameCatalogBeamName = "Beam";
const string c_gameCatalogBehaviorName = "Behavior";
const string c_gameCatalogButtonName = "Button";
const string c_gameCatalogCameraName = "Camera";
const string c_gameCatalogCliffName = "Cliff";
const string c_gameCatalogCliffMeshName = "CliffMesh";
const string c_gameCatalogConversationName = "Conversation";
const string c_gameCatalogConversationStateName = "ConversationState";
const string c_gameCatalogCursorName = "Cursor";
const string c_gameCatalogDSPName = "DSP";
const string c_gameCatalogEffectName = "Effect";
const string c_gameCatalogErrorName = "Error";
const string c_gameCatalogFootprintName = "Footprint";
const string c_gameCatalogFoWName = "FoW";
const string c_gameCatalogGameName = "Game";
const string c_gameCatalogGameUIName = "GameUI";
const string c_gameCatalogItemName = "Item";
const string c_gameCatalogItemClassName = "ItemClass";
const string c_gameCatalogItemContainerName = "ItemContainer";
const string c_gameCatalogLightName = "Light";
const string c_gameCatalogLootName = "Loot";
const string c_gameCatalogModelName = "Model";
const string c_gameCatalogMoverName = "Mover";
const string c_gameCatalogRaceName = "Race";
const string c_gameCatalogRequirementName = "Requirement";
const string c_gameCatalogRequirementNodeName = "RequirementNode";
const string c_gameCatalogReverbName = "Reverb";
const string c_gameCatalogRewardName = "Reward";
const string c_gameCatalogScoreResultName = "ScoreResult";
const string c_gameCatalogScoreValueName = "ScoreValue";
const string c_gameCatalogSoundName = "Sound";
const string c_gameCatalogSoundtrackName = "Soundtrack";
const string c_gameCatalogTacticalName = "Tactical";
const string c_gameCatalogTargetFindName = "TargetFind";
const string c_gameCatalogTargetSortName = "TargetSort";
const string c_gameCatalogTerrainName = "Terrain";
const string c_gameCatalogTerrainObjectName = "TerrainObject";
const string c_gameCatalogTerrainTexName = "TerrainTex";
const string c_gameCatalogTextureName = "Texture";
const string c_gameCatalogTileName = "Tile";
const string c_gameCatalogTurretName = "Turret";
const string c_gameCatalogUnitName = "Unit";
const string c_gameCatalogUpgradeName = "Upgrade";
const string c_gameCatalogValidatorName = "Validator";
const string c_gameCatalogWaterName = "Water";
const string c_gameCatalogWeaponName = "Weapon";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  GameDataAllNatives.galaxy generated from GameData.xml using ManagerGalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

include "TriggerLibs/GameData/GameData.galaxy"
include "TriggerLibs/GameData/Abil.galaxy"
include "TriggerLibs/GameData/Achievement.galaxy"
include "TriggerLibs/GameData/AchievementTerm.galaxy"
include "TriggerLibs/GameData/Actor.galaxy"
include "TriggerLibs/GameData/Alert.galaxy"
include "TriggerLibs/GameData/AttachMethod.galaxy"
include "TriggerLibs/GameData/Beam.galaxy"
include "TriggerLibs/GameData/Behavior.galaxy"
include "TriggerLibs/GameData/Button.galaxy"
include "TriggerLibs/GameData/Camera.galaxy"
include "TriggerLibs/GameData/Cliff.galaxy"
include "TriggerLibs/GameData/CliffMesh.galaxy"
include "TriggerLibs/GameData/Conversation.galaxy"
include "TriggerLibs/GameData/ConversationState.galaxy"
include "TriggerLibs/GameData/Cursor.galaxy"
include "TriggerLibs/GameData/DSP.galaxy"
include "TriggerLibs/GameData/Effect.galaxy"
include "TriggerLibs/GameData/Error.galaxy"
include "TriggerLibs/GameData/Footprint.galaxy"
include "TriggerLibs/GameData/FoW.galaxy"
include "TriggerLibs/GameData/Game.galaxy"
include "TriggerLibs/GameData/GameUI.galaxy"
include "TriggerLibs/GameData/Item.galaxy"
include "TriggerLibs/GameData/ItemClass.galaxy"
include "TriggerLibs/GameData/ItemContainer.galaxy"
include "TriggerLibs/GameData/Light.galaxy"
include "TriggerLibs/GameData/Loot.galaxy"
include "TriggerLibs/GameData/Model.galaxy"
include "TriggerLibs/GameData/Mover.galaxy"
include "TriggerLibs/GameData/Race.galaxy"
include "TriggerLibs/GameData/Requirement.galaxy"
include "TriggerLibs/GameData/RequirementNode.galaxy"
include "TriggerLibs/GameData/Reverb.galaxy"
include "TriggerLibs/GameData/Reward.galaxy"
include "TriggerLibs/GameData/ScoreResult.galaxy"
include "TriggerLibs/GameData/ScoreValue.galaxy"
include "TriggerLibs/GameData/Sound.galaxy"
include "TriggerLibs/GameData/Soundtrack.galaxy"
include "TriggerLibs/GameData/Tactical.galaxy"
include "TriggerLibs/GameData/TargetFind.galaxy"
include "TriggerLibs/GameData/TargetSort.galaxy"
include "TriggerLibs/GameData/Terrain.galaxy"
include "TriggerLibs/GameData/TerrainObject.galaxy"
include "TriggerLibs/GameData/TerrainTex.galaxy"
include "TriggerLibs/GameData/Texture.galaxy"
include "TriggerLibs/GameData/Tile.galaxy"
include "TriggerLibs/GameData/Turret.galaxy"
include "TriggerLibs/GameData/Unit.galaxy"
include "TriggerLibs/GameData/Upgrade.galaxy"
include "TriggerLibs/GameData/Validator.galaxy"
include "TriggerLibs/GameData/Water.galaxy"
include "TriggerLibs/GameData/Weapon.galaxy"


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  GameUI.galaxy generated from GameUI.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCGameUI
const int c_classIdCGameUI = 0;
const string c_classIdCGameUIName = "CGameUI";

//  EUnitColorStyle
const int c_unitColorStyleNormal = 0;
const int c_unitColorStyleOverrideMinimap = 1;
const int c_unitColorStyleOverrideWorld = 2;
const string c_unitColorStyleNormalName = "Normal";
const string c_unitColorStyleOverrideMinimapName = "OverrideMinimap";
const string c_unitColorStyleOverrideWorldName = "OverrideWorld";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Item.galaxy generated from Item.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCItem
const int c_classIdCItem = 0;
const int c_classIdCItemEffect = 1;
const int c_classIdCItemEffectInstant = 2;
const int c_classIdCItemEffectTarget = 3;
const string c_classIdCItemName = "CItem";
const string c_classIdCItemEffectName = "CItemEffect";
const string c_classIdCItemEffectInstantName = "CItemEffectInstant";
const string c_classIdCItemEffectTargetName = "CItemEffectTarget";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  ItemClass.galaxy generated from ItemClass.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCItemClass
const int c_classIdCItemClass = 0;
const string c_classIdCItemClassName = "CItemClass";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  ItemContainer.galaxy generated from ItemContainer.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCItemContainer
const int c_classIdCItemContainer = 0;
const string c_classIdCItemContainerName = "CItemContainer";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Light.galaxy generated from Light.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCLight
const int c_classIdCLight = 0;
const string c_classIdCLightName = "CLight";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Loot.galaxy generated from Loot.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//==================================================================================================
//
// Placeholder AI script file
//
//  Since natives.galaxy in Core includes AI files in Liberty, placeholder files are necessary
//  such that Core-only mods can compile properly.
//
//==================================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Model.galaxy generated from Model.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCModel
const int c_classIdCModel = 0;
const int c_classIdCModelFoliage = 1;
const string c_classIdCModelName = "CModel";
const string c_classIdCModelFoliageName = "CModelFoliage";

//  EAnimProp
const int c_animPropIGNORE = 0;
const int c_animPropDefault = 1;
const int c_animPropStand = 2;
const int c_animPropA = 3;
const int c_animPropB = 4;
const int c_animPropC = 5;
const int c_animPropD = 6;
const int c_animPropE = 7;
const int c_animPropF = 8;
const int c_animPropG = 9;
const int c_animPropH = 10;
const int c_animPropI = 11;
const int c_animPropJ = 12;
const int c_animPropK = 13;
const int c_animPropL = 14;
const int c_animPropM = 15;
const int c_animPropN = 16;
const int c_animPropO = 17;
const int c_animPropP = 18;
const int c_animPropQ = 19;
const int c_animPropR = 20;
const int c_animPropS = 21;
const int c_animPropT = 22;
const int c_animPropU = 23;
const int c_animPropV = 24;
const int c_animPropW = 25;
const int c_animPropX = 26;
const int c_animPropY = 27;
const int c_animPropZ = 28;
const int c_animPropZero = 29;
const int c_animPropOne = 30;
const int c_animPropTwo = 31;
const int c_animPropThree = 32;
const int c_animPropFour = 33;
const int c_animPropFive = 34;
const int c_animPropSix = 35;
const int c_animPropSeven = 36;
const int c_animPropEight = 37;
const int c_animPropNine = 38;
const int c_animPropAlternate = 39;
const int c_animPropAngry = 40;
const int c_animPropAngryEyes = 41;
const int c_animPropAttached = 42;
const int c_animPropAttack = 43;
const int c_animPropBack = 44;
const int c_animPropBirth = 45;
const int c_animPropBlast = 46;
const int c_animPropBlink = 47;
const int c_animPropBlock = 48;
const int c_animPropBuild = 49;
const int c_animPropBurrow = 50;
const int c_animPropChannel = 51;
const int c_animPropCloak = 52;
const int c_animPropClick = 53;
const int c_animPropComplex = 54;
const int c_animPropCorrupted = 55;
const int c_animPropCover = 56;
const int c_animPropCreep = 57;
const int c_animPropCustom = 58;
const int c_animPropDance = 59;
const int c_animPropDead = 60;
const int c_animPropDeath = 61;
const int c_animPropDetect = 62;
const int c_animPropDialogue = 63;
const int c_animPropDisintegrate = 64;
const int c_animPropDominant = 65;
const int c_animPropEat = 66;
const int c_animPropElectrocute = 67;
const int c_animPropEnd = 68;
const int c_animPropEnemy = 69;
const int c_animPropEqual = 70;
const int c_animPropEviscerate = 71;
const int c_animPropFast = 72;
const int c_animPropFearEyes = 73;
const int c_animPropFidget = 74;
const int c_animPropFire = 75;
const int c_animPropFlail = 76;
const int c_animPropFling = 77;
const int c_animPropFly = 78;
const int c_animPropForward = 79;
const int c_animPropFreeze = 80;
const int c_animPropGather = 81;
const int c_animPropGLbirth = 82;
const int c_animPropGLdeath = 83;
const int c_animPropGLdead = 84;
const int c_animPropGLstand = 85;
const int c_animPropHappy = 86;
const int c_animPropHappyEyes = 87;
const int c_animPropHighlight = 88;
const int c_animPropHover = 89;
const int c_animPropInferior = 90;
const int c_animPropJump = 91;
const int c_animPropKill = 92;
const int c_animPropLand = 93;
const int c_animPropLarge = 94;
const int c_animPropLeft = 95;
const int c_animPropListen = 96;
const int c_animPropLighting = 97;
const int c_animPropLoad = 98;
const int c_animPropMedium = 99;
const int c_animPropMorph = 100;
const int c_animPropNearImpact = 101;
const int c_animPropPenetrate = 102;
const int c_animPropPickup = 103;
const int c_animPropPlacement = 104;
const int c_animPropReady = 105;
const int c_animPropReload = 106;
const int c_animPropRestart = 107;
const int c_animPropRight = 108;
const int c_animPropRun = 109;
const int c_animPropSadEyes = 110;
const int c_animPropSeriousEyes = 111;
const int c_animPropScared = 112;
const int c_animPropShield = 113;
const int c_animPropSilentkill = 114;
const int c_animPropSimple = 115;
const int c_animPropSlow = 116;
const int c_animPropSmall = 117;
const int c_animPropSpell = 118;
const int c_animPropSquish = 119;
const int c_animPropStandup = 120;
const int c_animPropStart = 121;
const int c_animPropSuperior = 122;
const int c_animPropSurpriseEyes = 123;
const int c_animPropTalk = 124;
const int c_animPropThrown = 125;
const int c_animPropTurbo = 126;
const int c_animPropTurn = 127;
const int c_animPropUnburrow = 128;
const int c_animPropUnload = 129;
const int c_animPropUnpowered = 130;
const int c_animPropVictory = 131;
const int c_animPropWalk = 132;
const int c_animPropWork = 133;
const int c_animPropWounded = 134;
const int c_animPropProtoss = 135;
const int c_animPropTerran = 136;
const int c_animPropZerg = 137;
const int c_animPropVariation00 = 138;
const int c_animPropVariation01 = 139;
const int c_animPropVariation02 = 140;
const int c_animPropVariation03 = 141;
const int c_animPropVariation04 = 142;
const int c_animPropVariation05 = 143;
const int c_animPropVariation06 = 144;
const int c_animPropVariation07 = 145;
const int c_animPropVariation08 = 146;
const int c_animPropVariation09 = 147;
const int c_animPropVariation10 = 148;
const int c_animPropVariation11 = 149;
const int c_animPropVariation12 = 150;
const int c_animPropVariation13 = 151;
const int c_animPropVariation14 = 152;
const int c_animPropVariation15 = 153;
const int c_animPropVariation16 = 154;
const int c_animPropVariation17 = 155;
const int c_animPropVariation18 = 156;
const int c_animPropVariation19 = 157;
const int c_animPropVariation20 = 158;
const int c_animPropVariation21 = 159;
const int c_animPropVariation22 = 160;
const int c_animPropVariation23 = 161;
const int c_animPropVariation24 = 162;
const int c_animPropVariation25 = 163;
const int c_animPropVariation26 = 164;
const int c_animPropVariation27 = 165;
const int c_animPropVariation28 = 166;
const int c_animPropVariation29 = 167;
const int c_animPropVariation30 = 168;
const int c_animPropVariation31 = 169;
const int c_animPropVariation32 = 170;
const int c_animPropVariation33 = 171;
const int c_animPropVariation34 = 172;
const int c_animPropVariation35 = 173;
const int c_animPropVariation36 = 174;
const int c_animPropVariation37 = 175;
const int c_animPropVariation38 = 176;
const int c_animPropVariation39 = 177;
const int c_animPropVariation40 = 178;
const int c_animPropVariation41 = 179;
const int c_animPropVariation42 = 180;
const int c_animPropVariation43 = 181;
const int c_animPropVariation44 = 182;
const int c_animPropVariation45 = 183;
const int c_animPropVariation46 = 184;
const int c_animPropVariation47 = 185;
const int c_animPropVariation48 = 186;
const int c_animPropVariation49 = 187;
const int c_animPropVariation50 = 188;
const int c_animPropVariation51 = 189;
const int c_animPropVariation52 = 190;
const int c_animPropVariation53 = 191;
const int c_animPropVariation54 = 192;
const int c_animPropVariation55 = 193;
const int c_animPropVariation56 = 194;
const int c_animPropVariation57 = 195;
const int c_animPropVariation58 = 196;
const int c_animPropVariation59 = 197;
const int c_animPropVariation60 = 198;
const int c_animPropVariation61 = 199;
const int c_animPropVariation62 = 200;
const int c_animPropVariation63 = 201;
const int c_animPropVariation64 = 202;
const int c_animPropVariation65 = 203;
const int c_animPropVariation66 = 204;
const int c_animPropVariation67 = 205;
const int c_animPropVariation68 = 206;
const int c_animPropVariation69 = 207;
const int c_animPropVariation70 = 208;
const int c_animPropVariation71 = 209;
const int c_animPropVariation72 = 210;
const int c_animPropVariation73 = 211;
const int c_animPropVariation74 = 212;
const int c_animPropVariation75 = 213;
const int c_animPropVariation76 = 214;
const int c_animPropVariation77 = 215;
const int c_animPropVariation78 = 216;
const int c_animPropVariation79 = 217;
const int c_animPropVariation80 = 218;
const int c_animPropVariation81 = 219;
const int c_animPropVariation82 = 220;
const int c_animPropVariation83 = 221;
const int c_animPropVariation84 = 222;
const int c_animPropVariation85 = 223;
const int c_animPropVariation86 = 224;
const int c_animPropVariation87 = 225;
const int c_animPropVariation88 = 226;
const int c_animPropVariation89 = 227;
const int c_animPropVariation90 = 228;
const int c_animPropVariation91 = 229;
const int c_animPropVariation92 = 230;
const int c_animPropVariation93 = 231;
const int c_animPropVariation94 = 232;
const int c_animPropVariation95 = 233;
const int c_animPropVariation96 = 234;
const int c_animPropVariation97 = 235;
const int c_animPropVariation98 = 236;
const int c_animPropVariation99 = 237;
const int c_animPropVariationEnd = 238;
const string c_animPropVariation00Name = "00";
const string c_animPropVariation01Name = "01";
const string c_animPropVariation02Name = "02";
const string c_animPropVariation03Name = "03";
const string c_animPropVariation04Name = "04";
const string c_animPropVariation05Name = "05";
const string c_animPropVariation06Name = "06";
const string c_animPropVariation07Name = "07";
const string c_animPropVariation08Name = "08";
const string c_animPropVariation09Name = "09";
const string c_animPropVariation10Name = "10";
const string c_animPropVariation11Name = "11";
const string c_animPropVariation12Name = "12";
const string c_animPropVariation13Name = "13";
const string c_animPropVariation14Name = "14";
const string c_animPropVariation15Name = "15";
const string c_animPropVariation16Name = "16";
const string c_animPropVariation17Name = "17";
const string c_animPropVariation18Name = "18";
const string c_animPropVariation19Name = "19";
const string c_animPropVariation20Name = "20";
const string c_animPropVariation21Name = "21";
const string c_animPropVariation22Name = "22";
const string c_animPropVariation23Name = "23";
const string c_animPropVariation24Name = "24";
const string c_animPropVariation25Name = "25";
const string c_animPropVariation26Name = "26";
const string c_animPropVariation27Name = "27";
const string c_animPropVariation28Name = "28";
const string c_animPropVariation29Name = "29";
const string c_animPropVariation30Name = "30";
const string c_animPropVariation31Name = "31";
const string c_animPropVariation32Name = "32";
const string c_animPropVariation33Name = "33";
const string c_animPropVariation34Name = "34";
const string c_animPropVariation35Name = "35";
const string c_animPropVariation36Name = "36";
const string c_animPropVariation37Name = "37";
const string c_animPropVariation38Name = "38";
const string c_animPropVariation39Name = "39";
const string c_animPropVariation40Name = "40";
const string c_animPropVariation41Name = "41";
const string c_animPropVariation42Name = "42";
const string c_animPropVariation43Name = "43";
const string c_animPropVariation44Name = "44";
const string c_animPropVariation45Name = "45";
const string c_animPropVariation46Name = "46";
const string c_animPropVariation47Name = "47";
const string c_animPropVariation48Name = "48";
const string c_animPropVariation49Name = "49";
const string c_animPropVariation50Name = "50";
const string c_animPropVariation51Name = "51";
const string c_animPropVariation52Name = "52";
const string c_animPropVariation53Name = "53";
const string c_animPropVariation54Name = "54";
const string c_animPropVariation55Name = "55";
const string c_animPropVariation56Name = "56";
const string c_animPropVariation57Name = "57";
const string c_animPropVariation58Name = "58";
const string c_animPropVariation59Name = "59";
const string c_animPropVariation60Name = "60";
const string c_animPropVariation61Name = "61";
const string c_animPropVariation62Name = "62";
const string c_animPropVariation63Name = "63";
const string c_animPropVariation64Name = "64";
const string c_animPropVariation65Name = "65";
const string c_animPropVariation66Name = "66";
const string c_animPropVariation67Name = "67";
const string c_animPropVariation68Name = "68";
const string c_animPropVariation69Name = "69";
const string c_animPropVariation70Name = "70";
const string c_animPropVariation71Name = "71";
const string c_animPropVariation72Name = "72";
const string c_animPropVariation73Name = "73";
const string c_animPropVariation74Name = "74";
const string c_animPropVariation75Name = "75";
const string c_animPropVariation76Name = "76";
const string c_animPropVariation77Name = "77";
const string c_animPropVariation78Name = "78";
const string c_animPropVariation79Name = "79";
const string c_animPropVariation80Name = "80";
const string c_animPropVariation81Name = "81";
const string c_animPropVariation82Name = "82";
const string c_animPropVariation83Name = "83";
const string c_animPropVariation84Name = "84";
const string c_animPropVariation85Name = "85";
const string c_animPropVariation86Name = "86";
const string c_animPropVariation87Name = "87";
const string c_animPropVariation88Name = "88";
const string c_animPropVariation89Name = "89";
const string c_animPropVariation90Name = "90";
const string c_animPropVariation91Name = "91";
const string c_animPropVariation92Name = "92";
const string c_animPropVariation93Name = "93";
const string c_animPropVariation94Name = "94";
const string c_animPropVariation95Name = "95";
const string c_animPropVariation96Name = "96";
const string c_animPropVariation97Name = "97";
const string c_animPropVariation98Name = "98";
const string c_animPropVariation99Name = "99";
const string c_animPropVariationEndName = "VariationEnd";
const string c_animPropIGNOREName = "IGNORE";
const string c_animPropDefaultName = "Default";
const string c_animPropStandName = "Stand";
const string c_animPropAName = "A";
const string c_animPropBName = "B";
const string c_animPropCName = "C";
const string c_animPropDName = "D";
const string c_animPropEName = "E";
const string c_animPropFName = "F";
const string c_animPropGName = "G";
const string c_animPropHName = "H";
const string c_animPropIName = "I";
const string c_animPropJName = "J";
const string c_animPropKName = "K";
const string c_animPropLName = "L";
const string c_animPropMName = "M";
const string c_animPropNName = "N";
const string c_animPropOName = "O";
const string c_animPropPName = "P";
const string c_animPropQName = "Q";
const string c_animPropRName = "R";
const string c_animPropSName = "S";
const string c_animPropTName = "T";
const string c_animPropUName = "U";
const string c_animPropVName = "V";
const string c_animPropWName = "W";
const string c_animPropXName = "X";
const string c_animPropYName = "Y";
const string c_animPropZName = "Z";
const string c_animPropZeroName = "Zero";
const string c_animPropOneName = "One";
const string c_animPropTwoName = "Two";
const string c_animPropThreeName = "Three";
const string c_animPropFourName = "Four";
const string c_animPropFiveName = "Five";
const string c_animPropSixName = "Six";
const string c_animPropSevenName = "Seven";
const string c_animPropEightName = "Eight";
const string c_animPropNineName = "Nine";
const string c_animPropAlternateName = "Alternate";
const string c_animPropAngryName = "Angry";
const string c_animPropAngryEyesName = "AngryEyes";
const string c_animPropAttachedName = "Attached";
const string c_animPropAttackName = "Attack";
const string c_animPropBackName = "Back";
const string c_animPropBirthName = "Birth";
const string c_animPropBlastName = "Blast";
const string c_animPropBlinkName = "Blink";
const string c_animPropBlockName = "Block";
const string c_animPropBuildName = "Build";
const string c_animPropBurrowName = "Burrow";
const string c_animPropChannelName = "Channel";
const string c_animPropCloakName = "Cloak";
const string c_animPropClickName = "Click";
const string c_animPropComplexName = "Complex";
const string c_animPropCorruptedName = "Corrupted";
const string c_animPropCoverName = "Cover";
const string c_animPropCreepName = "Creep";
const string c_animPropCustomName = "Custom";
const string c_animPropDanceName = "Dance";
const string c_animPropDeadName = "Dead";
const string c_animPropDeathName = "Death";
const string c_animPropDetectName = "Detect";
const string c_animPropDialogueName = "Dialogue";
const string c_animPropDisintegrateName = "Disintegrate";
const string c_animPropDominantName = "Dominant";
const string c_animPropEatName = "Eat";
const string c_animPropElectrocuteName = "Electrocute";
const string c_animPropEndName = "End";
const string c_animPropEnemyName = "Enemy";
const string c_animPropEqualName = "Equal";
const string c_animPropEviscerateName = "Eviscerate";
const string c_animPropFastName = "Fast";
const string c_animPropFearEyesName = "FearEyes";
const string c_animPropFidgetName = "Fidget";
const string c_animPropFireName = "Fire";
const string c_animPropFlailName = "Flail";
const string c_animPropFlingName = "Fling";
const string c_animPropFlyName = "Fly";
const string c_animPropForwardName = "Forward";
const string c_animPropFreezeName = "Freeze";
const string c_animPropGatherName = "Gather";
const string c_animPropGLbirthName = "GLbirth";
const string c_animPropGLdeathName = "GLdeath";
const string c_animPropGLdeadName = "GLdead";
const string c_animPropGLstandName = "GLstand";
const string c_animPropHappyName = "Happy";
const string c_animPropHappyEyesName = "HappyEyes";
const string c_animPropHighlightName = "Highlight";
const string c_animPropHoverName = "Hover";
const string c_animPropInferiorName = "Inferior";
const string c_animPropJumpName = "Jump";
const string c_animPropKillName = "Kill";
const string c_animPropLandName = "Land";
const string c_animPropLargeName = "Large";
const string c_animPropLeftName = "Left";
const string c_animPropListenName = "Listen";
const string c_animPropLightingName = "Lighting";
const string c_animPropLoadName = "Load";
const string c_animPropMediumName = "Medium";
const string c_animPropMorphName = "Morph";
const string c_animPropNearImpactName = "NearImpact";
const string c_animPropPenetrateName = "Penetrate";
const string c_animPropPickupName = "Pickup";
const string c_animPropPlacementName = "Placement";
const string c_animPropReadyName = "Ready";
const string c_animPropReloadName = "Reload";
const string c_animPropRestartName = "Restart";
const string c_animPropRightName = "Right";
const string c_animPropRunName = "Run";
const string c_animPropSadEyesName = "SadEyes";
const string c_animPropSeriousEyesName = "SeriousEyes";
const string c_animPropScaredName = "Scared";
const string c_animPropShieldName = "Shield";
const string c_animPropSilentkillName = "Silentkill";
const string c_animPropSimpleName = "Simple";
const string c_animPropSlowName = "Slow";
const string c_animPropSmallName = "Small";
const string c_animPropSpellName = "Spell";
const string c_animPropSquishName = "Squish";
const string c_animPropStandupName = "Standup";
const string c_animPropStartName = "Start";
const string c_animPropSuperiorName = "Superior";
const string c_animPropSurpriseEyesName = "SurpriseEyes";
const string c_animPropTalkName = "Talk";
const string c_animPropThrownName = "Thrown";
const string c_animPropTurboName = "Turbo";
const string c_animPropTurnName = "Turn";
const string c_animPropUnburrowName = "Unburrow";
const string c_animPropUnloadName = "Unload";
const string c_animPropUnpoweredName = "Unpowered";
const string c_animPropVictoryName = "Victory";
const string c_animPropWalkName = "Walk";
const string c_animPropWorkName = "Work";
const string c_animPropWoundedName = "Wounded";
const string c_animPropProtossName = "Protoss";
const string c_animPropTerranName = "Terran";
const string c_animPropZergName = "Zerg";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Mover.galaxy generated from Mover.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCMover
const int c_classIdCMover = 0;
const int c_classIdCMoverAvoid = 1;
const int c_classIdCMoverFlock = 2;
const int c_classIdCMoverMissile = 3;
const int c_classIdCMoverNull = 4;
const string c_classIdCMoverName = "CMover";
const string c_classIdCMoverAvoidName = "CMoverAvoid";
const string c_classIdCMoverFlockName = "CMoverFlock";
const string c_classIdCMoverMissileName = "CMoverMissile";
const string c_classIdCMoverNullName = "CMoverNull";


include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: Built-In
//--------------------------------------------------------------------------------------------------
// Variables
bool libNtve_gv__CineModeGlobalOn;
playergroup libNtve_gv__PlayersInCineMode;
bool[33] libNtve_gv__CineModeSavedSettingFog;
bool[33] libNtve_gv__CineModeSavedSettingMask;
int libNtve_gv__CineModeSavedSpeed;
trigger[51] libNtve_gv_screenButtonCallbacks;
int[51] libNtve_gv_screenButtonDialogs;
const int libNtve_gv_c_ScreenButtonMaxCount = 50;
int[51] libNtve_gv_screenButtons;
bool[51] libNtve_gv_screenButtonsFlashing;
bool[51] libNtve_gv_screenButtonsFlashStopping;
int[51] libNtve_gv_screenButtonsBorderType;
string[51] libNtve_gv_screenButtonsBorderImage;
string[51] libNtve_gv_screenButtonsHoverImage;
int[51] libNtve_gv_screenButtonsFlashingBorderType;
string[51] libNtve_gv_screenButtonsFlashingBorderImage;
string[51] libNtve_gv_screenButtonsFlashingHoverImage;
int libNtve_gv_tP_FlashScreenButtonID;
fixed libNtve_gv_tP_FlashScreenButtonFlashTime;
color libNtve_gv_tP_FlashScreenButtonColor1;
color libNtve_gv_tP_FlashScreenButtonColor2;
const int libNtve_gv_c_ScreenImageMaxCount = 50;
int[51] libNtve_gv_screenImageDialogs;
int[51] libNtve_gv_screenImageDialogImages;
bool[51] libNtve_gv_screenImagePulsing;
int libNtve_gv_tP_PulseScreenImageID;
fixed libNtve_gv_tP_PulseScreenImagePeriod;
fixed libNtve_gv_tP_PulseScreenImageTransparency1;
fixed libNtve_gv_tP_PulseScreenImageTransparency2;
timer[33] libNtve_gv__GameTimer;
const int libNtve_gv_pLAYERMAX = 32;
int[8] libNtve_gv_portraits;
unitgroup[34] libNtve_gv_unitSelectionStored;
playergroup libNtve_gv__PlayersInStoryMode;
bool[33] libNtve_gv__StoryModeSavedSettingUI_Resource;
bool[33] libNtve_gv__StoryModeSavedSettingUI_Supply;
const int libNtve_gv__BBC_BossBarMaxCount = 50;
playergroup[51] libNtve_gv__BB_Players;
int[51] libNtve_gv__BB_Race;
string[51] libNtve_gv__BB_Portraits;
text[51] libNtve_gv__BB_Title;
unit[51] libNtve_gv__BB_Boss;
fixed[51] libNtve_gv__BB_MaxValue;
fixed[51] libNtve_gv__BB_CurrentValue;
int[51] libNtve_gv__BB_HPOldWidth;
int[51] libNtve_gv__BB_Dialog;
int[51] libNtve_gv__BB_BGImgBar;
int[51] libNtve_gv__BB_BGImgPortrait;
int[51] libNtve_gv__BB_PortraitImage;
int[51] libNtve_gv__BB_TitleLabel;
int[51] libNtve_gv__BB_HpBorderImage;
int[51] libNtve_gv__BB_HpLabel;
int[51] libNtve_gv__BB_HpFullImage;
int[51] libNtve_gv__BB_HpCurrentImage;
int[51] libNtve_gv__BB_BarWidth;
int[51] libNtve_gv__BB_BarHeight;
bool[33][31] libNtve_gv__GameUIVisible;
unit libNtve_gv_lastReplacedUnit;

void libNtve_InitVariables () {
    int init_i;
    int init_j;

    libNtve_gv__CineModeGlobalOn = false;
    libNtve_gv__PlayersInCineMode = PlayerGroupEmpty();
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__CineModeSavedSettingFog[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__CineModeSavedSettingMask[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonCallbacks[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonDialogs[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtons[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashing[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashStopping[init_i] = false;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsBorderType[init_i] = c_triggerImageTypeBorder;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsBorderImage[init_i] = "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsHoverImage[init_i] = "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingBorderType[init_i] = c_triggerImageTypeBorder;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingBorderImage[init_i] = "Assets\\Textures\\ui_mission_hackingbutton_anim.dds";
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenButtonsFlashingHoverImage[init_i] = "Assets\\Textures\\ui_mission_hackingbutton_anim.dds";
        init_i = init_i + 1;
    }
    libNtve_gv_tP_FlashScreenButtonID = 0;
    libNtve_gv_tP_FlashScreenButtonFlashTime = 0.0;
    libNtve_gv_tP_FlashScreenButtonColor1 = Color(0,0,0);
    libNtve_gv_tP_FlashScreenButtonColor2 = Color(0,0,0);
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImageDialogs[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImageDialogImages[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv_screenImagePulsing[init_i] = false;
        init_i = init_i + 1;
    }
    libNtve_gv_tP_PulseScreenImageID = 0;
    libNtve_gv_tP_PulseScreenImagePeriod = 0.0;
    libNtve_gv_tP_PulseScreenImageTransparency1 = 0.0;
    libNtve_gv_tP_PulseScreenImageTransparency2 = 0.0;
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__GameTimer[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 33) {
        libNtve_gv_unitSelectionStored[init_i] = UnitGroupEmpty();
        init_i = init_i + 1;
    }
    libNtve_gv__PlayersInStoryMode = PlayerGroupEmpty();
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__StoryModeSavedSettingUI_Resource[init_i] = true;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        libNtve_gv__StoryModeSavedSettingUI_Supply[init_i] = true;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Players[init_i] = PlayerGroupEmpty();
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Race[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Portraits[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Title[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Boss[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_MaxValue[init_i] = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_CurrentValue[init_i] = 0.0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HPOldWidth[init_i] = 0;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_Dialog[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BGImgBar[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BGImgPortrait[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_PortraitImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_TitleLabel[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpBorderImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpLabel[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpFullImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_HpCurrentImage[init_i] = c_invalidDialogControlId;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BarWidth[init_i] = 520;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 50) {
        libNtve_gv__BB_BarHeight[init_i] = 120;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 32) {
        init_j = 0;
        while (init_j <= 30) {
            libNtve_gv__GameUIVisible[init_i][init_j] = true;
            init_j = init_j + 1;
        }
        init_i = init_i + 1;
    }
    libNtve_gv_lastReplacedUnit = null;
}

// Function Declarations
actor libNtve_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint);
actorscope libNtve_gf_LastCreatedActorScope ();
actor libNtve_gf_LastCreatedActor ();
actor libNtve_gf_AttachActorToUnit (unit lp_unit, string lp_actor, string lp_attachPoint);
actor libNtve_gf_CreateActorAtPoint (string lp_actor, point lp_position);
actor libNtve_gf_CreateModelAtPoint (string lp_model, point lp_position);
void libNtve_gf_SendActorMessageToUnit (unit lp_unit, string lp_message);
void libNtve_gf_ActorRegionSendSimple (actor lp_region, string lp_message);
void libNtve_gf_SendActorMessageToGameRegion (region lp_region, string lp_message);
void libNtve_gf_SendActorMessageToGameRegionWithFilters (region lp_region, int lp_intersectType, string lp_message, string lp_classFilters, string lp_terms);
string libNtve_gf_ActorMsg1 (string lp_msgName, string lp_param1);
string libNtve_gf_ActorMsg2 (string lp_msgName, string lp_param1, string lp_param2);
string libNtve_gf_ActorMsg3 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3);
string libNtve_gf_ActorMsg4 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3, string lp_param4);
string libNtve_gf_ActionDamage ();
string libNtve_gf_ActionImpact ();
string libNtve_gf_AliasAdd (string lp_alias);
string libNtve_gf_AliasRemove (string lp_alias);
string libNtve_gf_AnimBaselineStart ();
string libNtve_gf_AnimBaselineStop ();
string libNtve_gf_AnimBlendTimeApply (fixed lp_blendTime);
string libNtve_gf_AnimBlendTimeRemove ();
string libNtve_gf_AnimClear (string lp_animName, fixed lp_blendTime);
string libNtve_gf_AnimClearAllBut (string lp_animName, fixed lp_blendTime);
string libNtve_gf_AnimDumpDB ();
string libNtve_gf_AnimGroupRemoveAll ();
string libNtve_gf_AnimPlaySequence (string lp_animName, string lp_sequenceList);
string libNtve_gf_AnimSetCompletion (string lp_animName, fixed lp_percent);
string libNtve_gf_AnimSetDuration (string lp_animName, fixed lp_duration);
string libNtve_gf_AnimSetPaused (bool lp_pause);
string libNtve_gf_AnimSetTime (string lp_animName, fixed lp_time, bool lp_scaled);
string libNtve_gf_AnimSetTimeScale (string lp_animName, fixed lp_scale);
string libNtve_gf_AnimSetTimeScaleGlobal (fixed lp_value);
string libNtve_gf_AttachSetBearings (string lp_attachMethods, string lp_bearings);
string libNtve_gf_AttachSetBearingsFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_AttachSetPosition (string lp_attachMethods, string lp_position);
string libNtve_gf_AttachSetPositionFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_AttachSetRotation (string lp_attachMethods, fixed lp_rotation);
string libNtve_gf_AttachSetRotationFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps);
string libNtve_gf_Create (string lp_actor, string lp_content);
string libNtve_gf_CreateCopy (string lp_createKey, string lp_sourceKey);
string libNtve_gf_DeathCustomize (string lp_subname);
string libNtve_gf_Destroy ();
string libNtve_gf_HostSiteOpsSet (string lp_hostName, string lp_ops, int lp_holdPosition, int lp_holdRotation);
string libNtve_gf_ListAdd (string lp_actorRefName);
string libNtve_gf_ListRemove (string lp_actorRefName);
string libNtve_gf_MissileTentacleReturn ();
string libNtve_gf_ModelEventSuppress (int lp_value, string lp_event);
string libNtve_gf_ModelSwap (string lp_model, int lp_variation);
string libNtve_gf_MoverSetAcceleration (fixed lp_value);
string libNtve_gf_MoverSetDeceleration (fixed lp_value);
string libNtve_gf_MoverSetDestination2D (fixed lp_x, fixed lp_y);
string libNtve_gf_MoverSetDestinationFrom (string lp_actorRefName);
string libNtve_gf_MoverSetDestinationH (fixed lp_value);
string libNtve_gf_MoverSetDestinationZ (fixed lp_value);
string libNtve_gf_MoverSetSpeed (fixed lp_value);
string libNtve_gf_MoverSetSpeedMax (fixed lp_value);
string libNtve_gf_MoverSetSpeedFromDuration (fixed lp_value);
string libNtve_gf_MoverMove ();
string libNtve_gf_MoverStop ();
string libNtve_gf_MoverStopNow ();
string libNtve_gf_MultiplyScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_duration);
string libNtve_gf_Print (string lp_string);
string libNtve_gf_QueryPersistent (string lp_enterResponseActor, string lp_leaveResponeActor);
string libNtve_gf_QueryRadius (fixed lp_radius, string lp_responseActor);
string libNtve_gf_QueryRegion (string lp_regionActor, string lp_responseActor);
string libNtve_gf_RefClear (string lp_actorRefName);
string libNtve_gf_RefDestroy (string lp_actorRefName);
string libNtve_gf_RefDump (string lp_actorRefName);
string libNtve_gf_RefNotify (string lp_actorRefName, string lp_subName);
string libNtve_gf_RefSet (string lp_actorRefName, string lp_refSource);
string libNtve_gf_RefSetFromMsg (string lp_actorRefName, string lp_message);
string libNtve_gf_RefSetFromActor (string lp_actorRefName, string lp_refPrimary, string lp_refSecondary);
string libNtve_gf_RefSetRefreshName (string lp_actorRefName, string lp_refreshName);
string libNtve_gf_SetBearings (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetBearingsFrom (string lp_actor);
string libNtve_gf_SetBearingsH (fixed lp_positionX, fixed lp_positionY, fixed lp_height, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetFacing (fixed lp_facing);
string libNtve_gf_SetHeight (fixed lp_height);
string libNtve_gf_SetOpacity (fixed lp_opacity, fixed lp_blendDuration);
string libNtve_gf_SetPosition (fixed lp_x, fixed lp_y, fixed lp_z);
string libNtve_gf_SetPosition2D (fixed lp_x, fixed lp_y);
string libNtve_gf_SetPosition2DH (fixed lp_x, fixed lp_y);
string libNtve_gf_SetPositionFrom (string lp_actor);
string libNtve_gf_SetPositionH (fixed lp_x, fixed lp_y, fixed lp_height);
string libNtve_gf_SetRenderToTextureEnabled (bool lp_enabled);
string libNtve_gf_SetRotation (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_SetRotationFrom (string lp_actor);
string libNtve_gf_SetScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration);
string libNtve_gf_SetScaleAbsolute (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration);
string libNtve_gf_SetShowing (bool lp_showing);
string libNtve_gf_SetTeamColor (color lp_diffuseColor, color lp_emissiveColor);
string libNtve_gf_SetLocalTintColor (color lp_color);
string libNtve_gf_SetTintColor (color lp_color, fixed lp_hdr, fixed lp_duration);
string libNtve_gf_SetWalkAnimMoveSpeed (fixed lp_value);
string libNtve_gf_SetZ (fixed lp_z);
string libNtve_gf_Signal (string lp_signal);
string libNtve_gf_SoundAddDSP (string lp_effect);
string libNtve_gf_SoundSetMuted (bool lp_mutedState, bool lp_fade);
string libNtve_gf_SoundSetOffset (int lp_offset);
string libNtve_gf_SoundSetPaused (bool lp_pausedState, bool lp_fade);
string libNtve_gf_StatusDecrement (string lp_statusVariable);
string libNtve_gf_StatusIncrement (string lp_statusVariable);
string libNtve_gf_TextureDump ();
string libNtve_gf_TextureDumpDB ();
string libNtve_gf_TextureGroupApply (string lp_textureProps);
string libNtve_gf_TextureGroupRemove (string lp_textureProps);
string libNtve_gf_TextureSelectByID (string lp_texture);
string libNtve_gf_TextureVideoSetFrame (string lp_texture, int lp_frame);
string libNtve_gf_TextureVideoSetPaused (string lp_texture, bool lp_pauseState);
string libNtve_gf_TextureVideoSetTime (string lp_texture, fixed lp_time);
string libNtve_gf_TextureVideoStop (string lp_texture);
string libNtve_gf_TextureVideoStopAll ();
string libNtve_gf_TimerSet (fixed lp_duration, string lp_timerName);
string libNtve_gf_TimerKill (string lp_timerName);
void libNtve_gf_KillModel (actor lp_model);
void libNtve_gf_RemoveDoodadsinRegion (region lp_target, string lp_doodadType);
void libNtve_gf_RemoveDeathModelsinRegion (region lp_region);
actor libNtve_gf_LookAtTargetFromPointWithZOffset (point lp_point, fixed lp_z);
actor libNtve_gf_LookAtTargetFromUnitAttachPoint (unit lp_unit, string lp_attachPoint);
void libNtve_gf_CreateLookAtTargetAtPoint (point lp_point);
void libNtve_gf_CreateLookAtTargetAtUnitAttachPoint (unit lp_unit, string lp_attachPoint);
void libNtve_gf_SimpleLookAtStart (unit lp_unit, string lp_type, actor lp_lookAtTarget);
void libNtve_gf_MakeUnitLookAtPoint (unit lp_unit, string lp_type, point lp_point);
void libNtve_gf_MakeUnitLookAtUnit (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint);
void libNtve_gf_SimpleLookAtStop (unit lp_unit, string lp_type);
actor libNtve_gf_MainActorofUnit (unit lp_unit);
void libNtve_gf_MakeModelFaceAngle (actor lp_model, fixed lp_angle);
void libNtve_gf_PlayMovieTextureOnUnitActor (unit lp_unit, string lp_movieTexture);
void libNtve_gf_StopAllVideoTexturesOnUnit (unit lp_unit);
int libNtve_gf_DifficultyValueInt (int lp_easy, int lp_normal, int lp_advanced, int lp_expert);
fixed libNtve_gf_DifficultyValueFixed (fixed lp_easy, fixed lp_normal, fixed lp_advanced, fixed lp_expert);
string libNtve_gf_DifficultyValueUnitType (string lp_easy, string lp_normal, string lp_advanced, string lp_expert);
void libNtve_gf_AICast (unit lp_unit, order lp_order);
void libNtve_gf_DeclareNextTown (int lp_player, point lp_center);
void libNtve_gf_SetTacticalAIRange (int lp_player, string lp_unitType, int lp_distance);
void libNtve_gf_SetTacticalAIThink (int lp_player, string lp_unitType, string lp_target, bool lp_isNative);
void libNtve_gf_PlayAnimation (actor lp_target, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime);
void libNtve_gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime);
void libNtve_gf_KillDoodadsInRegion (region lp_target, string lp_doodadType);
void libNtve_gf_ClearAnimation (actor lp_target, string lp_identifier);
void libNtve_gf_ClearAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier);
void libNtve_gf_TurnAnimationPropertiesOn (actor lp_target, string lp_prop);
void libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut (actor lp_target, string lp_prop, string lp_blendInAnimation, string lp_blendOutAnimation);
void libNtve_gf_TurnAnimationPropertiesOff (actor lp_target, string lp_prop);
void libNtve_gf_TurnAllAnimationPropertiesOff (actor lp_target);
void libNtve_gf_SetAnimationTime (actor lp_target, string lp_identifier, fixed lp_time, bool lp_scaled);
void libNtve_gf_SetAnimationTimeScale (actor lp_target, string lp_identifier, fixed lp_scale);
void libNtve_gf_SetAnimationCompletion (actor lp_target, string lp_identifier, fixed lp_percent);
void libNtve_gf_SetAnimationDuration (actor lp_target, string lp_identifier, fixed lp_duration);
void libNtve_gf_SwooshCamera (int lp_player, fixed lp_distance1, fixed lp_distance2, point lp_location, fixed lp_duration);
camerainfo libNtve_gf_CopyOfCameraObject (camerainfo lp_cam);
fixed libNtve_gf_CostOfAbility (string lp_ability, string lp_costType);
void libNtve_gf__CineModeTurnOnOffForPlayer (int lp_player, bool lp_onOff);
void libNtve_gf__CineModeTurnOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff);
bool libNtve_gf__CineModeFogSetting (int lp_player);
void libNtve_gf__CineModeChangeFogSettingForPlayer (int lp_player, bool lp_fog);
void libNtve_gf__CineModeChangeFogSettingForPlayerGroup (playergroup lp_players, bool lp_fog);
bool libNtve_gf__CineModeMaskSetting (int lp_player);
void libNtve_gf__CineModeChangeMaskSettingForPlayer (int lp_player, bool lp_mask);
void libNtve_gf__CineModeChangeMaskSettingForPlayerGroup (playergroup lp_players, bool lp_mask);
void libNtve_gf__CineModeHideUI (playergroup lp_players);
void libNtve_gf__CineModeRestoreUI (playergroup lp_players);
void libNtve_gf_CinematicMode (bool lp_onOff, playergroup lp_players, fixed lp_duration);
void libNtve_gf_GlobalCinematicSetting (bool lp_onOff);
bool libNtve_gf_PlayerInCinematicMode (int lp_player);
void libNtve_gf_MovieDynamicSubtitlesandDuration (string lp_soundFile);
text libNtve_gf_ConvertBooleanToText (bool lp_value);
string libNtve_gf_ConvertBooleanToString (bool lp_value);
color libNtve_gf_ConvertPlayerColorToColor (int lp_playerColor);
string libNtve_gf_ConvertColorToString (color lp_color);
string libNtve_gf_ConvertBearingsToString (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
string libNtve_gf_ConvertXYToString (fixed lp_x, fixed lp_y);
string libNtve_gf_Convert3DVectorToString (fixed lp_x, fixed lp_y, fixed lp_z);
string libNtve_gf_Convert3DRotationToString (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ);
void libNtve_gf_SetDialogItemText (int lp_dialogItem, text lp_text, playergroup lp_players);
text libNtve_gf_DialogItemText (int lp_dialogItem, int lp_player);
int libNtve_gf_CreateDialogItemAchievement (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_achievement);
int libNtve_gf_CreateDialogItemButton (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_hoverImage);
int libNtve_gf_CreateDialogItemCheckBox (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, bool lp_checked);
int libNtve_gf_CreateDialogItemImage (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode);
int libNtve_gf_CreateDialogItemLabel (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration);
void libNtve_gf_SetDialogItemRotation (int lp_dialogItem, int lp_rotation, playergroup lp_players);
void libNtve_gf_SetDialogItemCurrentValue (int lp_dialogItem, fixed lp_currentValue, playergroup lp_players);
void libNtve_gf_SetDialogItemMinimumValue (int lp_dialogItem, fixed lp_minValue, playergroup lp_players);
void libNtve_gf_SetDialogItemMaximumValue (int lp_dialogItem, fixed lp_maxValue, playergroup lp_players);
void libNtve_gf_SetDialogItemChecked (int lp_dialogItem, bool lp_checked, playergroup lp_players);
void libNtve_gf_SetDialogItemEditorValue (int lp_dialogItem, string lp_value, playergroup lp_players);
fixed libNtve_gf_DialogItemValue (int lp_dialogItem, int lp_player);
fixed libNtve_gf_DialogItemMaximumValue (int lp_dialogItem, int lp_player);
fixed libNtve_gf_DialogItemMinimumValue (int lp_dialogItem, int lp_player);
bool libNtve_gf_DialogItemIsChecked (int lp_dialogItem, int lp_player);
string libNtve_gf_DialogItemEditValue (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemColor (int lp_dialogItem, color lp_color, playergroup lp_players);
void libNtve_gf_SetDialogItemStyle (int lp_dialogItem, string lp_style, playergroup lp_players);
void libNtve_gf_SetDialogItemTextWriteout (int lp_dialogItem, bool lp_writeout, playergroup lp_players);
void libNtve_gf_SetDialogItemTextWriteoutDuration (int lp_dialogItem, fixed lp_duration, playergroup lp_players);
void libNtve_gf_SetDialogItemTooltip (int lp_dialogItem, text lp_tooltip, playergroup lp_players);
color libNtve_gf_DialogItemColor (int lp_dialogItem, int lp_player);
string libNtve_gf_DialogItemStyle (int lp_dialogItem, int lp_player);
text libNtve_gf_DialogItemTooltip (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemImage (int lp_dialogItem, string lp_image, playergroup lp_players);
void libNtve_gf_SetDialogItemImage2 (int lp_dialogItem, string lp_image, playergroup lp_players);
void libNtve_gf_SetDialogItemImageType (int lp_dialogItem, int lp_imageType, playergroup lp_players);
void libNtve_gf_SetDialogItemBlendMode (int lp_dialogItem, int lp_blendMode, playergroup lp_players);
void libNtve_gf_SetDialogItemImageType2 (int lp_dialogItem, bool lp_tiled, playergroup lp_players);
string libNtve_gf_DialogItemImage (int lp_dialogItem, int lp_player);
int libNtve_gf_DialogItemImageType (int lp_dialogItem, int lp_player);
void libNtve_gf_SetDialogItemFlash (int lp_dialogItem, string lp_flash, playergroup lp_players);
void libNtve_gf_SetDialogItemAchievement (int lp_dialogItem, string lp_achievement, playergroup lp_players);
void libNtve_gf_SetDialogItemRenderPriority (int lp_dialogItem, int lp_renderPriority, playergroup lp_players);
void libNtve_gf_DisplayScreenButton (int lp_screenButtonID, text lp_text, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, trigger lp_callback);
void libNtve_gf_HideScreenButton (bool lp_showHide, int lp_screenButtonID);
void libNtve_gf_FlashScreenButton (int lp_screenButtonID, fixed lp_flashTime, color lp_color1, color lp_color2);
void libNtve_gf_StopFlashingScreenButton (int lp_screenButtonID);
void libNtve_gf_SetScreenButtonBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType);
void libNtve_gf_SetScreenButtonFlashingBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType);
int libNtve_gf_ScreenButtonDialog (int lp_screenButtonID);
int libNtve_gf_ScreenButton (int lp_screenButtonID);
void libNtve_gf_DisplayScreenImage (int lp_screenImageID, string lp_image, int lp_blendMode, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY);
void libNtve_gf_HideScreenImage (bool lp_showHideOption, int lp_screenImageID);
void libNtve_gf_PulseScreenImage (int lp_screenImageID, fixed lp_period, fixed lp_transparency1, fixed lp_transparency2);
void libNtve_gf_StopPulsingScreenImage (int lp_screenImageID);
int libNtve_gf_ScreenImageDialog (int lp_screenImageID);
int libNtve_gf_ScreenImageDialogItem (int lp_screenImageID);
void libNtve_gf_CreateExplosionAtPoint (int lp_size, int lp_race, point lp_point);
bool libNtve_gf_PlayerCanCreateEffectAtPoint (int lp_player, string lp_effect, point lp_point);
bool libNtve_gf_PlayerCanCreateEffectOnUnit (int lp_player, string lp_effect, unit lp_target);
bool libNtve_gf_UnitCanCreateEffectAtPoint (unit lp_caster, string lp_effect, point lp_point);
bool libNtve_gf_UnitCanCreateEffectOnUnit (unit lp_caster, string lp_effect, unit lp_target);
fixed libNtve_gf_GamePlayTime (int lp_player);
void libNtve_gf_GameRemoveChargeRegen (string lp_inCharge);
void libNtve_gf_GameRemoveChargeUsed (string lp_inCharge);
void libNtve_gf_GameRemoveCooldown (string lp_inCooldown);
void libNtve_gf_PreloadModelObject (string lp_id, bool lp_queue);
void libNtve_gf_PreloadSoundObject (string lp_id, bool lp_queue);
void libNtve_gf_PreloadSoundtrack (string lp_soundtrack, bool lp_queue);
void libNtve_gf_PreloadUnit (string lp_unit, bool lp_queue);
void libNtve_gf_WaitForTimer (timer lp_timer, fixed lp_time, bool lp_waitType);
int libNtve_gf_ArithmeticIntClamp (int lp_value, int lp_min, int lp_max);
fixed libNtve_gf_ArithmeticRealClamp (fixed lp_value, fixed lp_min, fixed lp_max);
fixed libNtve_gf_RandomPercent ();
fixed libNtve_gf_RandomAngle ();
void libNtve_gf_CreatePingFacingAngle (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle);
void libNtve_gf_ClearAlliance (int lp_sourcePlayer, int lp_targetPlayer);
void libNtve_gf_MakeAlly (int lp_sourcePlayer, int lp_targetPlayer);
void libNtve_gf_SetAlliance (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libNtve_gf_SetAllianceOneWay (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance);
void libNtve_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance);
bool libNtve_gf_PlayerIsEnemy (int lp_sourcePlayer, int lp_targetPlayer, int lp_relation);
void libNtve_gf_PlayerRemoveChargeRegen (int lp_inPlayer, string lp_inCharge);
void libNtve_gf_PlayerRemoveChargeUsed (int lp_inPlayer, string lp_inCharge);
void libNtve_gf_PlayerRemoveCooldown (int lp_inPlayer, string lp_inCooldown);
void libNtve_gf_AddPlayerGroupToPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup);
void libNtve_gf_RemovePlayerGroupFromPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup);
point libNtve_gf_PointFromXYZ (fixed lp_x, fixed lp_y, fixed lp_y2);
point libNtve_gf_PointFromPositionAndAngle (point lp_point, fixed lp_angle);
point libNtve_gf_PointWithZOffset (point lp_p, fixed lp_z);
point libNtve_gf_PointOffsetTowardsPoint (point lp_sourcePoint, fixed lp_distance, point lp_targetPoint);
point libNtve_gf_RandomPointBetweenPoints (point lp_point1, point lp_point2);
int libNtve_gf_CinematicPortrait (int lp_position);
int libNtve_gf_FullscreenPortrait ();
void libNtve_gf_PortraitSetAnim (int lp_Portrait, string lp_Anim, string lp_identifier, int lp_flags, fixed lp_blendTime);
void libNtve_gf_PortraitSetTintColor (int lp_Portrait, color lp_color);
void libNtve_gf_ClearPortraitAnimation (int lp_portrait, string lp_identifier);
fixed libNtve_gf_WidthOfRegion (region lp_region);
fixed libNtve_gf_HeightOfRegion (region lp_region);
void libNtve_gf_StoreUnitSelection (int lp_forPlayer, int lp_storeOption);
void libNtve_gf_RestoreUnitSelection (int lp_forPlayer);
void libNtve_gf_SetAllSoundChannelVolumes (int lp_mode, playergroup lp_players, fixed lp_duration);
void libNtve_gf__StoryModeOnOffForPlayer (int lp_player, bool lp_onOff);
void libNtve_gf__StoryModeOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff);
void libNtve_gf__StoryModeHideUI (playergroup lp_players);
void libNtve_gf__StoryModeRestoreUI (playergroup lp_players);
void libNtve_gf_StoryMode (playergroup lp_players, bool lp_onOff);
bool libNtve_gf_PlayerInStoryMode (int lp_player);
void libNtve_gf_SetUpgradeLevelForPlayer (int lp_p, string lp_upgrade, int lp_levels);
void libNtve_gf_SendTransmissionSimple (transmissionsource lp_Source, int lp_Target, soundlink lp_Sound, fixed lp_Duration, int lp_DurationType, bool lp_WaitUntilDone);
void libNtve_gf_UIErrorMessage (playergroup lp_players, text lp_message, soundlink lp_sound);
int libNtve_gf__BB_PortraitBorderWidth (int lp_barID);
int libNtve_gf__BB_PortraitBorderHeight (int lp_barID);
int libNtve_gf__BB_PortraitWidth (int lp_barID);
int libNtve_gf__BB_PortraitHeight (int lp_barID);
int libNtve_gf__BB_TitleBarWidth (int lp_barID);
int libNtve_gf__BB_TitleBarHeight (int lp_barID);
int libNtve_gf__BB_HPBorderWidth (int lp_barID);
int libNtve_gf__BB_HPBorderHeight (int lp_barID);
int libNtve_gf__BB_HPBarWidth (int lp_barID);
int libNtve_gf__BB_HPBarHeight (int lp_barID);
int libNtve_gf__BB_HPBarCurrentWidth (int lp_barID);
text libNtve_gf__BB_HPBarFormatLabel (int lp_barID);
void libNtve_gf__BB_HPBarChange (int lp_barID);
void libNtve_gf_DisplayBossBar (int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players);
void libNtve_gf_SetBossBarMaximumValue (int lp_bossBarID, int lp_max, bool lp_refresh);
void libNtve_gf_SetBossBarCurrentValue (int lp_bossBarID, int lp_current, bool lp_refresh);
void libNtve_gf_SetBossBarBoss (int lp_bossBarID, unit lp_boss, bool lp_refresh);
void libNtve_gf_SetBossBarRace (int lp_bossBarID, int lp_race, bool lp_refresh);
void libNtve_gf_MoveBossBar (int lp_bossBarID, int lp_anchor, int lp_offsetX, int lp_offsetY);
void libNtve_gf_ShowHideBossBar (bool lp_showHide, int lp_bossBarID);
void libNtve_gf_RefreshBossBar (int lp_bossBarID);
void libNtve_gf__StoreGameUIVisibleStates (bool lp_storeRestore, playergroup lp_players);
void libNtve_gf_HideGameUI (bool lp_showHide, playergroup lp_players);
text libNtve_gf_FormatTipTitle (text lp_title, int lp_type);
void libNtve_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p);
void libNtve_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p);
unitgroup libNtve_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing);
void libNtve_gf_ReplaceUnit (unit lp_unit, string lp_unitType, int lp_options);
unit libNtve_gf_LastReplacedUnit ();
void libNtve_gf_RescueUnit (unit lp_unit, int lp_player, bool lp_changeColor);
void libNtve_gf_RescueUnit2 (unitgroup lp_unit, int lp_player, bool lp_changeColor);
bool libNtve_gf_UnitGroupIsDead (unitgroup lp_units);
void libNtve_gf_MakeUnitFacePoint (unit lp_unit, point lp_point, fixed lp_duration);
void libNtve_gf_PauseUnit (unit lp_unit, bool lp_pauseUnpause);
void libNtve_gf_ShowHideUnit (unit lp_unit, bool lp_showHide);
void libNtve_gf_ShareVisionofUnit (unit lp_unit, bool lp_shareUnshare, int lp_player);
bool libNtve_gf_UnitIsPaused (unit lp_u);
bool libNtve_gf_UnitIsHidden (unit lp_u);
bool libNtve_gf_UnitIsVisibleToPlayer (unit lp_unit, int lp_player);
bool libNtve_gf_UnitInRegion (unit lp_u, region lp_regioin);
void libNtve_gf_MakeUnitInvulnerable (unit lp_unit, bool lp_option);
void libNtve_gf_MakeUnitUncommandable (unit lp_unit, bool lp_option);
bool libNtve_gf_UnitIsInvulnerable (unit lp_u);
int libNtve_gf_UnitGetPropertyKills (unit lp_u, bool lp_current);
int libNtve_gf_UnitGetPropertyResources (unit lp_u, bool lp_current);
bool libNtve_gf_UnitMoverExists (string lp_unitType, string lp_mover);
void libNtve_gf_UnitSetVariation (unit lp_unit, string lp_model, int lp_percent, string lp_textures);
void libNtve_gf_ChangeUnitDamage (unit lp_unit, int lp_takeDeal, int lp_option);
unitfilter libNtve_gf_ConvertTargetFilterStringToUnitFilter (string lp_targetFilterString);
bool libNtve_gf_UnitIsInsideTransport (unit lp_u);
bool libNtve_gf_UnitCanAttackUnit (unit lp_u, unit lp_s);
bool libNtve_gf_UnitIsUnderConstruction (unit lp_u);
void libNtve_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge);
void libNtve_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge);
void libNtve_gf_UnitRemoveCooldown (unit lp_inUnit, string lp_inCooldown);
void libNtve_gf_UnitAbilityRemoveCooldown (unit lp_inUnit, string lp_inAbil, string lp_inCooldown);
void libNtve_gf_UnitBehaviorRemoveCooldown (unit lp_inUnit, string lp_inBehavior, string lp_inCooldown);
void libNtve_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge);
void libNtve_gf_UnitRemoveChargeUsed (unit lp_inUnit, string lp_inCharge);
void libNtve_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge);
void libNtve_gf_UnitBehaviorRemoveChargeUsed (unit lp_inUnit, string lp_inBehavior, string lp_inCharge);
unitgroup libNtve_gf_ConvertUnitToUnitGroup (unit lp_unit);
void libNtve_gf_AddUnitGroupToUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup);
void libNtve_gf_RemoveUnitGroupFromUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup);
unit libNtve_gf_ClosestUnitToPoint (point lp_point, unitgroup lp_group);
point libNtve_gf_CenterOfUnitGroup (unitgroup lp_unitGroup);
void libNtve_gf_ShowHidePlacementModels (bool lp_show);

// Trigger Declarations
trigger libNtve_gt_ScreenButtonClicked;
trigger libNtve_gt_FlashScreenButton;
trigger libNtve_gt_PulseScreenImage;
trigger libNtve_gt__MapInitialization;
trigger libNtve_gt__BB_BossHPChanged;

// Functions
actor libNtve_gf_AttachModelToUnit (unit lp_unit, string lp_model, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Variable Initialization

    // Implementation
    lv_scope = ActorScopeFromUnit(lp_unit);
    ActorCreate(lv_scope, "SiteHosted", lp_attachPoint, "", "");
    lv_a = libNtve_gf_LastCreatedActor();
    ActorCreate(lv_scope, "ModelHosted", (lp_model), "", "");
    lv_a = libNtve_gf_LastCreatedActor();
    return lv_a;
}

actorscope libNtve_gf_LastCreatedActorScope () {
    // Implementation
    return ActorScopeFrom("::LastCreated");
}

actor libNtve_gf_LastCreatedActor () {
    // Implementation
    return ActorFrom("::LastCreated");
}

actor libNtve_gf_AttachActorToUnit (unit lp_unit, string lp_actor, string lp_attachPoint) {
    // Variable Declarations
    actorscope lv_scope;
    actor lv_a;

    // Variable Initialization

    // Implementation
    lv_scope = ActorScopeFromUnit(lp_unit);
    ActorCreate(lv_scope, "SiteHosted", lp_attachPoint, "", "");
    lv_a = libNtve_gf_LastCreatedActor();
    ActorSend(lv_a, "RefSet ::scope.hostsite ::Self");
    ActorCreate(lv_scope, lp_actor, "", "", "");
    lv_a = libNtve_gf_LastCreatedActor();
    ActorSend(lv_a, "RefSet ::Host ::scope.hostsite");
    return lv_a;
}

actor libNtve_gf_CreateActorAtPoint (string lp_actor, point lp_position) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    ActorCreate(null, lp_actor, null, null, null);
    lv_a = libNtve_gf_LastCreatedActor();
    ActorSend(lv_a, libNtve_gf_SetPositionH(PointGetX(lp_position), PointGetY(lp_position), PointGetHeight(lp_position)));
    return lv_a;
}

actor libNtve_gf_CreateModelAtPoint (string lp_model, point lp_position) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    ActorCreate(null, "Model", (lp_model), null, "null");
    lv_a = libNtve_gf_LastCreatedActor();
    ActorSend(lv_a, libNtve_gf_ActorMsg1("SetPositionH", libNtve_gf_ConvertXYToString(PointGetX(lp_position), PointGetY(lp_position))));
    ActorSend(lv_a, libNtve_gf_SetHeight(PointGetHeight(lp_position)));
    return lv_a;
}

void libNtve_gf_SendActorMessageToUnit (unit lp_unit, string lp_message) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), lp_message);
}

void libNtve_gf_ActorRegionSendSimple (actor lp_region, string lp_message) {
    // Implementation
    ActorRegionSend(lp_region, c_actorIntersectAgainstRadiusContact, lp_message, null, null);
}

void libNtve_gf_SendActorMessageToGameRegion (region lp_region, string lp_message) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, null, null);
    ActorSend(lv_actorRegion, "Destroy");
}

void libNtve_gf_SendActorMessageToGameRegionWithFilters (region lp_region, int lp_intersectType, string lp_message, string lp_classFilters, string lp_terms) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    ActorRegionSend(lv_actorRegion, lp_intersectType, lp_message, lp_classFilters, lp_terms);
    ActorSend(lv_actorRegion, "Destroy");
}

string libNtve_gf_ActorMsg1 (string lp_msgName, string lp_param1) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "}"));
}

string libNtve_gf_ActorMsg2 (string lp_msgName, string lp_param1, string lp_param2) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "}"));
}

string libNtve_gf_ActorMsg3 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "} {" + lp_param3 + "}"));
}

string libNtve_gf_ActorMsg4 (string lp_msgName, string lp_param1, string lp_param2, string lp_param3, string lp_param4) {
    // Implementation
    return ((lp_msgName + " {" + lp_param1 + "} {" + lp_param2 + "} {" + lp_param3 + "} {" + lp_param4 + "}"));
}

string libNtve_gf_ActionDamage () {
    // Implementation
    return "ActionDamage";
}

string libNtve_gf_ActionImpact () {
    // Implementation
    return "ActionImpact";
}

string libNtve_gf_AliasAdd (string lp_alias) {
    // Implementation
    return libNtve_gf_ActorMsg1("AliasAdd", lp_alias);
}

string libNtve_gf_AliasRemove (string lp_alias) {
    // Implementation
    return libNtve_gf_ActorMsg1("AliasRemove", lp_alias);
}

string libNtve_gf_AnimBaselineStart () {
    // Implementation
    return "AnimBaselineStart";
}

string libNtve_gf_AnimBaselineStop () {
    // Implementation
    return "AnimBaselineStop";
}

string libNtve_gf_AnimBlendTimeApply (fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg1("AnimBlendTimeApply", FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimBlendTimeRemove () {
    // Implementation
    return "AnimBlendTimeRemove";
}

string libNtve_gf_AnimClear (string lp_animName, fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimClear", lp_animName, FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimClearAllBut (string lp_animName, fixed lp_blendTime) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimClearAllBut", lp_animName, FixedToString(lp_blendTime, c_fixedPrecisionAny));
}

string libNtve_gf_AnimDumpDB () {
    // Implementation
    return "AnimDumpDB";
}

string libNtve_gf_AnimGroupRemoveAll () {
    // Implementation
    return "AnimGroupRemoveAll";
}

string libNtve_gf_AnimPlaySequence (string lp_animName, string lp_sequenceList) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimPlaySequence", lp_animName, lp_sequenceList);
}

string libNtve_gf_AnimSetCompletion (string lp_animName, fixed lp_percent) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetCompletion", lp_animName, FixedToString(lp_percent, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetDuration (string lp_animName, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetCompletion", lp_animName, FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetPaused (bool lp_pause) {
    // Implementation
    if ((lp_pause == true)) {
        return libNtve_gf_ActorMsg1("AnimSetPaused", "true");
    }
    else {
        return libNtve_gf_ActorMsg1("AnimSetPaused", "false");
    }
}

string libNtve_gf_AnimSetTime (string lp_animName, fixed lp_time, bool lp_scaled) {
    // Implementation
    return libNtve_gf_ActorMsg3("AnimSetTime", lp_animName, FixedToString(lp_time, c_fixedPrecisionAny), libNtve_gf_ConvertBooleanToString(lp_scaled));
}

string libNtve_gf_AnimSetTimeScale (string lp_animName, fixed lp_scale) {
    // Implementation
    return libNtve_gf_ActorMsg2("AnimSetTimeScale", lp_animName, FixedToString(lp_scale, c_fixedPrecisionAny));
}

string libNtve_gf_AnimSetTimeScaleGlobal (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("AnimSetTimeScaleGlobal", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_AttachSetBearings (string lp_attachMethods, string lp_bearings) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetBearings", lp_attachMethods, lp_bearings);
}

string libNtve_gf_AttachSetBearingsFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetBearingsFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_AttachSetPosition (string lp_attachMethods, string lp_position) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetPosition", lp_attachMethods, lp_position);
}

string libNtve_gf_AttachSetPositionFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetPositionFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_AttachSetRotation (string lp_attachMethods, fixed lp_rotation) {
    // Implementation
    return libNtve_gf_ActorMsg2("AttachSetRotation", lp_attachMethods, FixedToString(lp_rotation, c_fixedPrecisionAny));
}

string libNtve_gf_AttachSetRotationFrom (string lp_attachMethods, string lp_actorName, string lp_actorSiteOps) {
    // Implementation
    return libNtve_gf_ActorMsg3("AttachSetRotationFrom", lp_attachMethods, lp_actorName, lp_actorSiteOps);
}

string libNtve_gf_Create (string lp_actor, string lp_content) {
    // Implementation
    return libNtve_gf_ActorMsg2("Create", lp_actor, lp_content);
}

string libNtve_gf_CreateCopy (string lp_createKey, string lp_sourceKey) {
    // Implementation
    return libNtve_gf_ActorMsg2("CreateCopy", (lp_createKey), (lp_sourceKey));
}

string libNtve_gf_DeathCustomize (string lp_subname) {
    // Implementation
    return libNtve_gf_ActorMsg1("DeathCustomize", lp_subname);
}

string libNtve_gf_Destroy () {
    // Implementation
    return "Destroy";
}

string libNtve_gf_HostSiteOpsSet (string lp_hostName, string lp_ops, int lp_holdPosition, int lp_holdRotation) {
    // Implementation
    return libNtve_gf_ActorMsg4("HostSiteOpsSet", lp_hostName, lp_ops, IntToString(lp_holdPosition), IntToString(lp_holdRotation));
}

string libNtve_gf_ListAdd (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("ListAdd", lp_actorRefName);
}

string libNtve_gf_ListRemove (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("ListRemove", lp_actorRefName);
}

string libNtve_gf_MissileTentacleReturn () {
    // Implementation
    return "MissileTentacleReturn";
}

string libNtve_gf_ModelEventSuppress (int lp_value, string lp_event) {
    // Implementation
    return libNtve_gf_ActorMsg2("ModelEventSuppress", lp_event, IntToString(lp_value));
}

string libNtve_gf_ModelSwap (string lp_model, int lp_variation) {
    // Implementation
    return libNtve_gf_ActorMsg2("ModelSwap", (lp_model), IntToString(lp_variation));
}

string libNtve_gf_MoverSetAcceleration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetAcceleration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDeceleration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDeceleration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDestination2D (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestination2D", libNtve_gf_ConvertXYToString(lp_x, lp_y));
}

string libNtve_gf_MoverSetDestinationFrom (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationFrom", lp_actorRefName);
}

string libNtve_gf_MoverSetDestinationH (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationH", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetDestinationZ (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetDestinationZ", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeed (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeed", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeedMax (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeedMax", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverSetSpeedFromDuration (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("MoverSetSpeedFromDuration", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_MoverMove () {
    // Implementation
    return "MoverMove";
}

string libNtve_gf_MoverStop () {
    // Implementation
    return "MoverStop";
}

string libNtve_gf_MoverStopNow () {
    // Implementation
    return "MoverStopNow";
}

string libNtve_gf_MultiplyScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("MultiplyScale", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny) + "," + FixedToString(lp_z, c_fixedPrecisionAny)), FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_Print (string lp_string) {
    // Implementation
    return libNtve_gf_ActorMsg1("Print", lp_string);
}

string libNtve_gf_QueryPersistent (string lp_enterResponseActor, string lp_leaveResponeActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryPersistent", (lp_enterResponseActor), (lp_leaveResponeActor));
}

string libNtve_gf_QueryRadius (fixed lp_radius, string lp_responseActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryRegion", FixedToString(lp_radius, c_fixedPrecisionAny), lp_responseActor);
}

string libNtve_gf_QueryRegion (string lp_regionActor, string lp_responseActor) {
    // Implementation
    return libNtve_gf_ActorMsg2("QueryRadius", lp_regionActor, lp_responseActor);
}

string libNtve_gf_RefClear (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefClear", lp_actorRefName);
}

string libNtve_gf_RefDestroy (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefDestroy", lp_actorRefName);
}

string libNtve_gf_RefDump (string lp_actorRefName) {
    // Implementation
    return libNtve_gf_ActorMsg1("RefDump", lp_actorRefName);
}

string libNtve_gf_RefNotify (string lp_actorRefName, string lp_subName) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSet", lp_actorRefName, lp_subName);
}

string libNtve_gf_RefSet (string lp_actorRefName, string lp_refSource) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSet", lp_actorRefName, lp_refSource);
}

string libNtve_gf_RefSetFromMsg (string lp_actorRefName, string lp_message) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSetFromMsg", lp_actorRefName, lp_message);
}

string libNtve_gf_RefSetFromActor (string lp_actorRefName, string lp_refPrimary, string lp_refSecondary) {
    // Implementation
    return libNtve_gf_ActorMsg3("RefSetFromActor", lp_actorRefName, lp_refPrimary, lp_refSecondary);
}

string libNtve_gf_RefSetRefreshName (string lp_actorRefName, string lp_refreshName) {
    // Implementation
    return libNtve_gf_ActorMsg2("RefSetRefreshName", lp_actorRefName, lp_refreshName);
}

string libNtve_gf_SetBearings (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearings", ("'" + libNtve_gf_ConvertBearingsToString(lp_positionX, lp_positionY, lp_positionZ, lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ) + "'"));
}

string libNtve_gf_SetBearingsFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearingsFrom", lp_actor);
}

string libNtve_gf_SetBearingsH (fixed lp_positionX, fixed lp_positionY, fixed lp_height, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetBearingsH", (FixedToString(lp_positionX, c_fixedPrecisionAny) + "," + FixedToString(lp_positionY, c_fixedPrecisionAny) + " " + FixedToString(lp_height, c_fixedPrecisionAny) + " '" + libNtve_gf_Convert3DVectorToString(lp_forwardX, lp_forwardY, lp_forwardZ) + " " + libNtve_gf_Convert3DVectorToString(lp_upX, lp_upY, lp_upZ) + "'"));
}

string libNtve_gf_SetFacing (fixed lp_facing) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetFacing", FixedToString(lp_facing, c_fixedPrecisionAny));
}

string libNtve_gf_SetHeight (fixed lp_height) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetHeight", FixedToString(lp_height, c_fixedPrecisionAny));
}

string libNtve_gf_SetOpacity (fixed lp_opacity, fixed lp_blendDuration) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetOpacity", FixedToString(lp_opacity, c_fixedPrecisionAny), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
}

string libNtve_gf_SetPosition (fixed lp_x, fixed lp_y, fixed lp_z) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
}

string libNtve_gf_SetPosition2D (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition2D", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)));
}

string libNtve_gf_SetPosition2DH (fixed lp_x, fixed lp_y) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPosition2DH", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)));
}

string libNtve_gf_SetPositionFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetPositionFrom", lp_actor);
}

string libNtve_gf_SetPositionH (fixed lp_x, fixed lp_y, fixed lp_height) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetPositionH", (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny)), FixedToString(lp_height, c_fixedPrecisionAny));
}

string libNtve_gf_SetRenderToTextureEnabled (bool lp_enabled) {
    // Implementation
    if ((lp_enabled == true)) {
        return libNtve_gf_ActorMsg1("SetRenderToTextureEnabled", "1");
    }
    else {
        return libNtve_gf_ActorMsg1("SetRenderToTextureEnabled", "0");
    }
}

string libNtve_gf_SetRotation (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetRotation", libNtve_gf_Convert3DRotationToString(lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ));
}

string libNtve_gf_SetRotationFrom (string lp_actor) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetRotationFrom", lp_actor);
}

string libNtve_gf_SetScale (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration) {
    // Implementation
    if ((lp_blendDuration > 0.0)) {
        return libNtve_gf_ActorMsg2("SetScale", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
    }
    else {
        return libNtve_gf_ActorMsg1("SetScale", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
    }
}

string libNtve_gf_SetScaleAbsolute (fixed lp_x, fixed lp_y, fixed lp_z, fixed lp_blendDuration) {
    // Implementation
    if ((lp_blendDuration > 0.0)) {
        return libNtve_gf_ActorMsg2("SetScaleAbsolute", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z), FixedToString(lp_blendDuration, c_fixedPrecisionAny));
    }
    else {
        return libNtve_gf_ActorMsg1("SetScaleAbsolute", libNtve_gf_Convert3DVectorToString(lp_x, lp_y, lp_z));
    }
}

string libNtve_gf_SetShowing (bool lp_showing) {
    // Implementation
    if ((lp_showing == true)) {
        return libNtve_gf_ActorMsg1("SetShowing", "1");
    }
    else {
        return libNtve_gf_ActorMsg1("SetShowing", "0");
    }
}

string libNtve_gf_SetTeamColor (color lp_diffuseColor, color lp_emissiveColor) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetTeamColor", libNtve_gf_ConvertColorToString(lp_diffuseColor), libNtve_gf_ConvertColorToString(lp_emissiveColor));
}

string libNtve_gf_SetLocalTintColor (color lp_color) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetLocalTintColor", libNtve_gf_ConvertColorToString(lp_color));
}

string libNtve_gf_SetTintColor (color lp_color, fixed lp_hdr, fixed lp_duration) {
    // Implementation
    return libNtve_gf_ActorMsg2("SetTintColor", (libNtve_gf_ConvertColorToString(lp_color) + " " + FixedToString(lp_hdr, c_fixedPrecisionAny)), FixedToString(lp_duration, c_fixedPrecisionAny));
}

string libNtve_gf_SetWalkAnimMoveSpeed (fixed lp_value) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetWalkAnimMoveSpeed", FixedToString(lp_value, c_fixedPrecisionAny));
}

string libNtve_gf_SetZ (fixed lp_z) {
    // Implementation
    return libNtve_gf_ActorMsg1("SetZ", FixedToString(lp_z, c_fixedPrecisionAny));
}

string libNtve_gf_Signal (string lp_signal) {
    // Implementation
    return libNtve_gf_ActorMsg1("Signal", lp_signal);
}

string libNtve_gf_SoundAddDSP (string lp_effect) {
    // Implementation
    return libNtve_gf_ActorMsg1("SoundAddDSP", lp_effect);
}

string libNtve_gf_SoundSetMuted (bool lp_mutedState, bool lp_fade) {
    // Implementation
    return libNtve_gf_ActorMsg2("SoundSetMuted", IntToString(BoolToInt(lp_mutedState)), IntToString(BoolToInt(lp_fade)));
}

string libNtve_gf_SoundSetOffset (int lp_offset) {
    // Implementation
    return libNtve_gf_ActorMsg1("SoundSetOffset", IntToString(lp_offset));
}

string libNtve_gf_SoundSetPaused (bool lp_pausedState, bool lp_fade) {
    // Implementation
    return libNtve_gf_ActorMsg2("SoundSetPaused", IntToString(BoolToInt(lp_pausedState)), IntToString(BoolToInt(lp_fade)));
}

string libNtve_gf_StatusDecrement (string lp_statusVariable) {
    // Implementation
    return libNtve_gf_ActorMsg1("StatusDecrement", lp_statusVariable);
}

string libNtve_gf_StatusIncrement (string lp_statusVariable) {
    // Implementation
    return libNtve_gf_ActorMsg1("StatusIncrement", lp_statusVariable);
}

string libNtve_gf_TextureDump () {
    // Implementation
    return "TextureDump";
}

string libNtve_gf_TextureDumpDB () {
    // Implementation
    return "TextureDumpDB";
}

string libNtve_gf_TextureGroupApply (string lp_textureProps) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureGroupApply", lp_textureProps);
}

string libNtve_gf_TextureGroupRemove (string lp_textureProps) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureGroupRemove", lp_textureProps);
}

string libNtve_gf_TextureSelectByID (string lp_texture) {
    // Implementation
    return libNtve_gf_ActorMsg1("TextureSelectById", lp_texture);
}

string libNtve_gf_TextureVideoSetFrame (string lp_texture, int lp_frame) {
    // Implementation
    return MakeMsgTextureVideoSetFrame(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_frame);
}

string libNtve_gf_TextureVideoSetPaused (string lp_texture, bool lp_pauseState) {
    // Implementation
    return MakeMsgTextureVideoSetPaused(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_pauseState);
}

string libNtve_gf_TextureVideoSetTime (string lp_texture, fixed lp_time) {
    // Implementation
    return MakeMsgTextureVideoSetTime(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture), lp_time);
}

string libNtve_gf_TextureVideoStop (string lp_texture) {
    // Implementation
    return MakeMsgTextureVideoStop(TextureGetSlotName(lp_texture), TextureGetSlotComponent(lp_texture));
}

string libNtve_gf_TextureVideoStopAll () {
    // Implementation
    return ("TextureVideoStopAll");
}

string libNtve_gf_TimerSet (fixed lp_duration, string lp_timerName) {
    // Implementation
    return libNtve_gf_ActorMsg2("TimerSet", FixedToString(lp_duration, c_fixedPrecisionAny), lp_timerName);
}

string libNtve_gf_TimerKill (string lp_timerName) {
    // Implementation
    return libNtve_gf_ActorMsg1("TimerKill", lp_timerName);
}

void libNtve_gf_KillModel (actor lp_model) {
    // Implementation
    ActorSend(lp_model, "AnimBracketStop BSD");
}

void libNtve_gf_RemoveDoodadsinRegion (region lp_target, string lp_doodadType) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_animTermsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_animTermsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    if ((lp_doodadType != null)) {
        lv_animTermsString = ("ScopeContains " + (lp_doodadType));
        lv_animTermsString = (lv_animTermsString + "; ");
    }
    else {
    }
    lv_animTermsString = (lv_animTermsString + "!HasStatus DoodadKilled");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Doodad", lv_animTermsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_RemoveDeathModelsinRegion (region lp_region) {
    // Variable Declarations
    actor lv_actorRegion;

    // Variable Initialization
    lv_actorRegion = null;

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_region);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "Destroy", "Model", "ScopeContains _DeathModel");
    ActorWorldParticleFXDestroy();
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

actor libNtve_gf_LookAtTargetFromPointWithZOffset (point lp_point, fixed lp_z) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
    ActorSend(libNtve_gf_LastCreatedActor(), libNtve_gf_SetHeight(lp_z));
    return libNtve_gf_LastCreatedActor();
}

actor libNtve_gf_LookAtTargetFromUnitAttachPoint (unit lp_unit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_unit, "Invisible", lp_attachPoint);
    return libNtve_gf_LastCreatedActor();
}

void libNtve_gf_CreateLookAtTargetAtPoint (point lp_point) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
}

void libNtve_gf_CreateLookAtTargetAtUnitAttachPoint (unit lp_unit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_unit, "Invisible", lp_attachPoint);
}

void libNtve_gf_SimpleLookAtStart (unit lp_unit, string lp_type, actor lp_lookAtTarget) {
    // Implementation
    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lp_unit), lp_type, lp_lookAtTarget);
}

void libNtve_gf_MakeUnitLookAtPoint (unit lp_unit, string lp_type, point lp_point) {
    // Implementation
    libNtve_gf_CreateActorAtPoint("LookAtTarget", lp_point);
    libNtve_gf_SimpleLookAtStart(lp_unit, lp_type, libNtve_gf_LastCreatedActor());
}

void libNtve_gf_MakeUnitLookAtUnit (unit lp_unit, string lp_type, unit lp_lookAtTargetUnit, string lp_attachPoint) {
    // Implementation
    libNtve_gf_AttachModelToUnit(lp_lookAtTargetUnit, "Invisible", lp_attachPoint);
    libNtve_gf_SimpleLookAtStart(lp_unit, lp_type, libNtve_gf_LastCreatedActor());
}

void libNtve_gf_SimpleLookAtStop (unit lp_unit, string lp_type) {
    // Implementation
    ActorLookAtTypeStop(libNtve_gf_MainActorofUnit(lp_unit), lp_type);
}

actor libNtve_gf_MainActorofUnit (unit lp_unit) {
    // Implementation
    return ActorFromScope(ActorScopeFromUnit(lp_unit), "::Main");
}

void libNtve_gf_MakeModelFaceAngle (actor lp_model, fixed lp_angle) {
    // Implementation
    ActorSend(lp_model, libNtve_gf_SetRotation(Cos(lp_angle), Sin(lp_angle), 0, 0, 0, 1.0));
}

void libNtve_gf_PlayMovieTextureOnUnitActor (unit lp_unit, string lp_movieTexture) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), libNtve_gf_ActorMsg1("TextureSelectById", (lp_movieTexture)));
}

void libNtve_gf_StopAllVideoTexturesOnUnit (unit lp_unit) {
    // Implementation
    ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "TextureVideoStopAll");
}

int libNtve_gf_DifficultyValueInt (int lp_easy, int lp_normal, int lp_advanced, int lp_expert) {
    int auto25C665AE_val;

    // Implementation
    auto25C665AE_val = PlayerDifficulty(1);
    if (auto25C665AE_val == 1) {
        return lp_easy;
    }
    else if (auto25C665AE_val == 2) {
        return lp_normal;
    }
    else if (auto25C665AE_val == 3) {
        return lp_advanced;
    }
    else if (auto25C665AE_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

fixed libNtve_gf_DifficultyValueFixed (fixed lp_easy, fixed lp_normal, fixed lp_advanced, fixed lp_expert) {
    int auto7E83D6CB_val;

    // Implementation
    auto7E83D6CB_val = PlayerDifficulty(1);
    if (auto7E83D6CB_val == 1) {
        return lp_easy;
    }
    else if (auto7E83D6CB_val == 2) {
        return lp_normal;
    }
    else if (auto7E83D6CB_val == 3) {
        return lp_advanced;
    }
    else if (auto7E83D6CB_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

string libNtve_gf_DifficultyValueUnitType (string lp_easy, string lp_normal, string lp_advanced, string lp_expert) {
    int auto6A030EA6_val;

    // Implementation
    auto6A030EA6_val = PlayerDifficulty(1);
    if (auto6A030EA6_val == 1) {
        return lp_easy;
    }
    else if (auto6A030EA6_val == 2) {
        return lp_normal;
    }
    else if (auto6A030EA6_val == 3) {
        return lp_advanced;
    }
    else if (auto6A030EA6_val == 4) {
        return lp_expert;
    }
    else {
        return lp_normal;
    }
}

void libNtve_gf_AICast (unit lp_unit, order lp_order) {
    // Implementation
    AICast(lp_unit, lp_order, c_noMarker, c_castHold);
}

void libNtve_gf_DeclareNextTown (int lp_player, point lp_center) {
    // Implementation
    AIDeclareTown(lp_player, AIGetNextUnusedTownSlot(lp_player), lp_center);
}

void libNtve_gf_SetTacticalAIRange (int lp_player, string lp_unitType, int lp_distance) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, (lp_unitType), "TacticalAIRange", lp_player, IntToString(lp_distance));
}

void libNtve_gf_SetTacticalAIThink (int lp_player, string lp_unitType, string lp_target, bool lp_isNative) {
    // Variable Declarations
    string lv_aIThinkTempStr;

    // Variable Initialization
    lv_aIThinkTempStr = "";

    // Implementation
    if ((lp_isNative == true)) {
        lv_aIThinkTempStr = lp_target;
    }
    else {
        lv_aIThinkTempStr = ("gf_" + lp_target);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, (lp_unitType), "TacticalAIThink", lp_player, lv_aIThinkTempStr);
}

void libNtve_gf_PlayAnimation (actor lp_target, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime) {
    // Variable Declarations
    string lv_animationString;
    bool lv_fullMatchFlag;
    bool lv_playForeverFlag;
    bool lv_nonLoopingFlag;
    string lv_flagString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_animationString = "";
    lv_fullMatchFlag = false;
    lv_playForeverFlag = false;
    lv_nonLoopingFlag = false;
    lv_flagString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_animationString = StringReplaceWord(lp_animation, " ", ",", 0, c_stringCase);
    lv_fullMatchFlag = (lp_flags & c_animFlagFullMatch) == c_animFlagFullMatch;
    lv_playForeverFlag = (lp_flags & c_animFlagPlayForever) == c_animFlagPlayForever;
    lv_nonLoopingFlag = (lp_flags & c_animFlagNonLooping) == c_animFlagNonLooping;
    if ((lv_fullMatchFlag == true)) {
        lv_flagString = (lv_flagString + "FullMatch");
    }
    else {
    }
    if ((lv_playForeverFlag == true)) {
        if ((lv_fullMatchFlag == true)) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "PlayForever");
    }
    else {
    }
    if ((lv_nonLoopingFlag == true)) {
        if (((lv_fullMatchFlag == true) || (lv_playForeverFlag == true))) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "NonLooping");
    }
    else {
    }
    if ((lv_flagString == "")) {
        lv_flagString = "0";
    }
    else {
    }
    lv_actorMessageString = ("AnimPlay " + lp_identifier + " " + lv_animationString + " " + lv_flagString + " " + FixedToString(lp_blendTime, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_PlayAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier, string lp_animation, int lp_flags, fixed lp_blendTime) {
    // Variable Declarations
    string lv_animationString;
    bool lv_fullMatchFlag;
    bool lv_playForeverFlag;
    bool lv_nonLoopingFlag;
    string lv_flagString;
    string lv_actorMessageString;
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_animationString = "";
    lv_fullMatchFlag = false;
    lv_playForeverFlag = false;
    lv_nonLoopingFlag = false;
    lv_flagString = "";
    lv_actorMessageString = "";
    lv_actorRegion = null;
    lv_termsString = "";

    // Implementation
    lv_animationString = StringReplaceWord(lp_animation, " ", ",", 0, c_stringCase);
    lv_fullMatchFlag = (lp_flags & c_animFlagFullMatch) == c_animFlagFullMatch;
    lv_playForeverFlag = (lp_flags & c_animFlagPlayForever) == c_animFlagPlayForever;
    lv_nonLoopingFlag = (lp_flags & c_animFlagNonLooping) == c_animFlagNonLooping;
    if ((lv_fullMatchFlag == true)) {
        lv_flagString = (lv_flagString + "FullMatch");
    }
    else {
    }
    if ((lv_playForeverFlag == true)) {
        if ((lv_fullMatchFlag == true)) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "PlayForever");
    }
    else {
    }
    if ((lv_nonLoopingFlag == true)) {
        if (((lv_fullMatchFlag == true) || (lv_playForeverFlag == true))) {
            lv_flagString = (lv_flagString + ",");
        }
        else {
        }
        lv_flagString = (lv_flagString + "NonLooping");
    }
    else {
    }
    if ((lv_flagString == "")) {
        lv_flagString = "0";
    }
    else {
    }
    lv_actorMessageString = ("AnimPlay " + lp_identifier + " " + lv_animationString + " " + lv_flagString + " " + FixedToString(lp_blendTime, c_fixedPrecisionAny));
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + lp_doodadType);
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, (lv_actorMessageString), "Doodad", lv_termsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_KillDoodadsInRegion (region lp_target, string lp_doodadType) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_animTermsString;
    string lv_statusTermsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_animTermsString = "";
    lv_statusTermsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    if ((lp_doodadType != null)) {
        lv_animTermsString = ("ScopeContains " + (lp_doodadType));
        lv_statusTermsString = lv_animTermsString;
        lv_animTermsString = (lv_animTermsString + "; ");
    }
    else {
    }
    lv_animTermsString = (lv_animTermsString + "!HasStatus DoodadKilled");
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "AnimPlay Death Death PlayForever,NonLooping", "Doodad", lv_animTermsString);
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, "StatusIncrement DoodadKilled", "Doodad", lv_statusTermsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libNtve_gf_ClearAnimation (actor lp_target, string lp_identifier) {
    // Implementation
    ActorSend(lp_target, (("AnimClear " + lp_identifier)));
}

void libNtve_gf_ClearAnimationOnDoodadsInRegion (region lp_target, string lp_doodadType, string lp_identifier) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_actorRegion = null;
    lv_termsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_LastCreatedActor();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + lp_doodadType);
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, libNtve_gf_AnimClear(lp_identifier, -1.0), "Doodad", lv_termsString);
}

void libNtve_gf_TurnAnimationPropertiesOn (actor lp_target, string lp_prop) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_actorMessageString = ("AnimGroupApply " + lv_propertiesString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut (actor lp_target, string lp_prop, string lp_blendInAnimation, string lp_blendOutAnimation) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_blendInString;
    string lv_blendOutString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_blendInString = "";
    lv_blendOutString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_blendInString = (lv_propertiesString + "," + StringReplaceWord(lp_blendInAnimation, " ", ",", 0, c_stringCase));
    lv_blendOutString = (lv_propertiesString + "," + StringReplaceWord(lp_blendOutAnimation, " ", ",", 0, c_stringCase));
    lv_actorMessageString = ("AnimGroupApply " + lv_propertiesString + " " + lv_blendInString + " " + lv_blendOutString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAnimationPropertiesOff (actor lp_target, string lp_prop) {
    // Variable Declarations
    string lv_propertiesString;
    string lv_actorMessageString;

    // Variable Initialization
    lv_propertiesString = "";
    lv_actorMessageString = "";

    // Implementation
    lv_propertiesString = StringReplaceWord(lp_prop, " ", ",", 0, c_stringCase);
    lv_actorMessageString = ("AnimGroupRemove " + lv_propertiesString);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_TurnAllAnimationPropertiesOff (actor lp_target) {
    // Implementation
    ActorSend(lp_target, "AnimGroupRemoveAll");
}

void libNtve_gf_SetAnimationTime (actor lp_target, string lp_identifier, fixed lp_time, bool lp_scaled) {
    // Variable Declarations
    string lv_scaledOption;
    string lv_actorMessageString;

    // Variable Initialization
    lv_scaledOption = "";
    lv_actorMessageString = "";

    // Implementation
    if ((lp_scaled == false)) {
        lv_scaledOption = "0";
    }
    else {
        lv_scaledOption = "1";
    }
    lv_actorMessageString = ("AnimSetTime " + lp_identifier + " " + FixedToString(lp_time, c_fixedPrecisionAny) + " " + lv_scaledOption);
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationTimeScale (actor lp_target, string lp_identifier, fixed lp_scale) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetTimeScale " + lp_identifier + " " + FixedToString(lp_scale, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationCompletion (actor lp_target, string lp_identifier, fixed lp_percent) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetCompletion " + lp_identifier + " " + FixedToString(lp_percent, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SetAnimationDuration (actor lp_target, string lp_identifier, fixed lp_duration) {
    // Variable Declarations
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Implementation
    lv_actorMessageString = ("AnimSetDuration " + lp_identifier + " " + FixedToString(lp_duration, c_fixedPrecisionAny));
    ActorSend(lp_target, (lv_actorMessageString));
}

void libNtve_gf_SwooshCamera (int lp_player, fixed lp_distance1, fixed lp_distance2, point lp_location, fixed lp_duration) {
    // Implementation
    CameraPan(lp_player, lp_location, 0.0, 0, 10, false);
    CameraSetValue(lp_player, c_cameraValueDistance, lp_distance1, 0.0, 0, 10);
    CameraSetValue(lp_player, c_cameraValueDistance, lp_distance2, lp_duration, 0, 10);
}

camerainfo libNtve_gf_CopyOfCameraObject (camerainfo lp_cam) {
    // Variable Declarations
    camerainfo lv_newCam;

    // Variable Initialization
    lv_newCam = CameraInfoDefault();

    // Implementation
    CameraInfoSetTarget(lv_newCam, CameraInfoGetTarget(lp_cam));
    CameraInfoSetValue(lv_newCam, c_cameraValuePitch, CameraInfoGetValue(lp_cam, c_cameraValuePitch));
    CameraInfoSetValue(lv_newCam, c_cameraValueDistance, CameraInfoGetValue(lp_cam, c_cameraValueDistance));
    CameraInfoSetValue(lv_newCam, c_cameraValueFarClip, CameraInfoGetValue(lp_cam, c_cameraValueFarClip));
    CameraInfoSetValue(lv_newCam, c_cameraValueFieldOfView, CameraInfoGetValue(lp_cam, c_cameraValueFieldOfView));
    CameraInfoSetValue(lv_newCam, c_cameraValueHeightOffset, CameraInfoGetValue(lp_cam, c_cameraValueHeightOffset));
    CameraInfoSetValue(lv_newCam, c_cameraValueNearClip, CameraInfoGetValue(lp_cam, c_cameraValueNearClip));
    CameraInfoSetValue(lv_newCam, c_cameraValueRoll, CameraInfoGetValue(lp_cam, c_cameraValueRoll));
    CameraInfoSetValue(lv_newCam, c_cameraValueYaw, CameraInfoGetValue(lp_cam, c_cameraValueYaw));
    CameraInfoSetValue(lv_newCam, c_cameraValueShadowClip, CameraInfoGetValue(lp_cam, c_cameraValueShadowClip));
    return lv_newCam;
}

fixed libNtve_gf_CostOfAbility (string lp_ability, string lp_costType) {
    // Variable Declarations
    string lv_value;
    string lv_field;

    // Variable Initialization
    lv_value = "";
    lv_field = "";

    // Implementation
    if (((lp_costType == "Minerals") || (lp_costType == "Gas"))) {
        lv_field = ("Cost." + lp_costType);
    }
    else if (((lp_costType == "Energy") || (lp_costType == "Life") || (lp_costType == "Shields"))) {
        lv_field = ("Cost.Vital[" + lp_costType + "]");
    }
    lv_value = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, lv_field, 1);
    return StringToFixed(lv_value);
}

void libNtve_gf__CineModeTurnOnOffForPlayer (int lp_player, bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        PlayerGroupAdd(libNtve_gv__PlayersInCineMode, lp_player);
        TimerPause(libNtve_gv__GameTimer[lp_player], true);
    }
    else {
        PlayerGroupRemove(libNtve_gv__PlayersInCineMode, lp_player);
        TimerPause(libNtve_gv__GameTimer[lp_player], false);
    }
}

void libNtve_gf__CineModeTurnOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff) {
    playergroup autoB2419D0B_g;
    int autoB2419D0B_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    autoB2419D0B_g = lp_players;
    autoB2419D0B_p = 1;
    while (autoB2419D0B_p <= PlayerGroupCount(autoB2419D0B_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(autoB2419D0B_g, autoB2419D0B_p);
        libNtve_gf__CineModeTurnOnOffForPlayer(lv_pickedPlayer, lp_onOff);
        if (lv_pickedPlayer == PlayerGroupPlayer(autoB2419D0B_g, autoB2419D0B_p)) {
            autoB2419D0B_p = autoB2419D0B_p + 1;
        }
    }
}

bool libNtve_gf__CineModeFogSetting (int lp_player) {
    // Implementation
    return libNtve_gv__CineModeSavedSettingFog[lp_player];
}

void libNtve_gf__CineModeChangeFogSettingForPlayer (int lp_player, bool lp_fog) {
    // Implementation
    libNtve_gv__CineModeSavedSettingFog[lp_player] = lp_fog;
}

void libNtve_gf__CineModeChangeFogSettingForPlayerGroup (playergroup lp_players, bool lp_fog) {
    playergroup auto5A0494EE_g;
    int auto5A0494EE_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto5A0494EE_g = lp_players;
    auto5A0494EE_p = 1;
    while (auto5A0494EE_p <= PlayerGroupCount(auto5A0494EE_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto5A0494EE_g, auto5A0494EE_p);
        libNtve_gf__CineModeChangeFogSettingForPlayer(lv_pickedPlayer, lp_fog);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto5A0494EE_g, auto5A0494EE_p)) {
            auto5A0494EE_p = auto5A0494EE_p + 1;
        }
    }
}

bool libNtve_gf__CineModeMaskSetting (int lp_player) {
    // Implementation
    return libNtve_gv__CineModeSavedSettingMask[lp_player];
}

void libNtve_gf__CineModeChangeMaskSettingForPlayer (int lp_player, bool lp_mask) {
    // Implementation
    libNtve_gv__CineModeSavedSettingMask[lp_player] = lp_mask;
}

void libNtve_gf__CineModeChangeMaskSettingForPlayerGroup (playergroup lp_players, bool lp_mask) {
    playergroup autoBFF267B3_g;
    int autoBFF267B3_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    autoBFF267B3_g = lp_players;
    autoBFF267B3_p = 1;
    while (autoBFF267B3_p <= PlayerGroupCount(autoBFF267B3_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(autoBFF267B3_g, autoBFF267B3_p);
        libNtve_gf__CineModeChangeMaskSettingForPlayer(lv_pickedPlayer, lp_mask);
        if (lv_pickedPlayer == PlayerGroupPlayer(autoBFF267B3_g, autoBFF267B3_p)) {
            autoBFF267B3_p = autoBFF267B3_p + 1;
        }
    }
}

void libNtve_gf__CineModeHideUI (playergroup lp_players) {
    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
    UISetFrameVisible(lp_players, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeBattleReportPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeCashPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeCharacterSheetButton, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeMercenaryPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypePlanetPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypePurchasePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeResearchPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeRoomPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeTipAlertPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeVictoryPanel, false);
}

void libNtve_gf__CineModeRestoreUI (playergroup lp_players) {
    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
}

void libNtve_gf_CinematicMode (bool lp_onOff, playergroup lp_players, fixed lp_duration) {
    playergroup auto0ACAB445_g;
    int auto0ACAB445_p;
    playergroup autoA2450245_g;
    int autoA2450245_p;
    playergroup auto451C348A_g;
    int auto451C348A_p;
    playergroup auto10906981_g;
    int auto10906981_p;
    playergroup auto1544564B_g;
    int auto1544564B_p;
    playergroup auto74C9138D_g;
    int auto74C9138D_p;
    playergroup autoCF5F6C0D_g;
    int autoCF5F6C0D_p;
    playergroup auto2009A28F_g;
    int auto2009A28F_p;

    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();
    lv_pickedPlayer = 0;

    // Implementation
    lv_validPlayers = PlayerGroupCopy(lp_players);
    if ((lp_onOff == true)) {
        autoA2450245_g = lv_validPlayers;
        autoA2450245_p = 1;
        while (autoA2450245_p <= PlayerGroupCount(autoA2450245_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoA2450245_g, autoA2450245_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == true)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(autoA2450245_g, autoA2450245_p)) {
                autoA2450245_p = autoA2450245_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, true);
        libNtve_gf__CineModeHideUI(lv_validPlayers);
        CinematicMode(lv_validPlayers, true, lp_duration);
        UIClearMessages(lv_validPlayers, c_messageAreaAll);
        UISetCursorVisible(lv_validPlayers, false);
        libNtve_gf_ShowHidePlacementModels(false);
        libNtve_gf_SetAllSoundChannelVolumes(0, lv_validPlayers, lp_duration);
        auto74C9138D_g = lv_validPlayers;
        auto74C9138D_p = 1;
        while (auto74C9138D_p <= PlayerGroupCount(auto74C9138D_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto74C9138D_g, auto74C9138D_p);
            UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, lp_duration);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto74C9138D_g, auto74C9138D_p)) {
                auto74C9138D_p = auto74C9138D_p + 1;
            }
        }
        autoCF5F6C0D_g = lv_validPlayers;
        autoCF5F6C0D_p = 1;
        while (autoCF5F6C0D_p <= PlayerGroupCount(autoCF5F6C0D_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoCF5F6C0D_g, autoCF5F6C0D_p);
            PlayerPauseAllCharges(lv_pickedPlayer, true);
            PlayerPauseAllCooldowns(lv_pickedPlayer, true);
            if (lv_pickedPlayer == PlayerGroupPlayer(autoCF5F6C0D_g, autoCF5F6C0D_p)) {
                autoCF5F6C0D_p = autoCF5F6C0D_p + 1;
            }
        }
        auto2009A28F_g = lv_validPlayers;
        auto2009A28F_p = 1;
        while (auto2009A28F_p <= PlayerGroupCount(auto2009A28F_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto2009A28F_g, auto2009A28F_p);
            PlayerScoreValueEnableAll(lv_pickedPlayer, false);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto2009A28F_g, auto2009A28F_p)) {
                auto2009A28F_p = auto2009A28F_p + 1;
            }
        }
        UIFlyerHelperOverride(lv_validPlayers, 0);
    }
    else {
        auto0ACAB445_g = lv_validPlayers;
        auto0ACAB445_p = 1;
        while (auto0ACAB445_p <= PlayerGroupCount(auto0ACAB445_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto0ACAB445_g, auto0ACAB445_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == false)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto0ACAB445_g, auto0ACAB445_p)) {
                auto0ACAB445_p = auto0ACAB445_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        TransmissionClearAll();
        libNtve_gf__CineModeTurnOnOffForPlayerGroup(lv_validPlayers, false);
        libNtve_gf_SetAllSoundChannelVolumes(2, lv_validPlayers, lp_duration);
        libNtve_gf__CineModeRestoreUI(lv_validPlayers);
        CinematicMode(lv_validPlayers, false, lp_duration);
        auto451C348A_g = lv_validPlayers;
        auto451C348A_p = 1;
        while (auto451C348A_p <= PlayerGroupCount(auto451C348A_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto451C348A_g, auto451C348A_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == false)) {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeConsole, lp_duration);
            }
            else {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeFullscreen, lp_duration);
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto451C348A_g, auto451C348A_p)) {
                auto451C348A_p = auto451C348A_p + 1;
            }
        }
        UISetCursorVisible(lv_validPlayers, true);
        libNtve_gf_ShowHidePlacementModels(true);
        auto10906981_g = lv_validPlayers;
        auto10906981_p = 1;
        while (auto10906981_p <= PlayerGroupCount(auto10906981_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto10906981_g, auto10906981_p);
            PlayerPauseAllCharges(lv_pickedPlayer, false);
            PlayerPauseAllCooldowns(lv_pickedPlayer, false);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto10906981_g, auto10906981_p)) {
                auto10906981_p = auto10906981_p + 1;
            }
        }
        auto1544564B_g = lv_validPlayers;
        auto1544564B_p = 1;
        while (auto1544564B_p <= PlayerGroupCount(auto1544564B_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto1544564B_g, auto1544564B_p);
            PlayerScoreValueEnableAll(lv_pickedPlayer, true);
            if (lv_pickedPlayer == PlayerGroupPlayer(auto1544564B_g, auto1544564B_p)) {
                auto1544564B_p = auto1544564B_p + 1;
            }
        }
        UIFlyerHelperClearOverride(lv_validPlayers);
    }
}

void libNtve_gf_GlobalCinematicSetting (bool lp_onOff) {
    // Implementation
    if ((libNtve_gv__CineModeGlobalOn == lp_onOff)) {
        return ;
    }
    else {
    }
    if ((lp_onOff == true)) {
        libNtve_gv__CineModeSavedSpeed = GameGetSpeedValue();
        GameSetSpeedValue(c_gameSpeedNormal);
        GameSetSpeedLocked(true);
        GameSetSeedLocked(true);
        GamePauseAllCharges(true);
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
    }
    else {
        GameSetSpeedValue(libNtve_gv__CineModeSavedSpeed);
        GameSetSpeedLocked(false);
        GameSetSeedLocked(false);
        GamePauseAllCharges(false);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
    }
    libNtve_gv__CineModeGlobalOn = lp_onOff;
}

bool libNtve_gf_PlayerInCinematicMode (int lp_player) {
    // Implementation
    return PlayerGroupHasPlayer(libNtve_gv__PlayersInCineMode, lp_player);
}

void libNtve_gf_MovieDynamicSubtitlesandDuration (string lp_soundFile) {
    // Implementation
    MovieAddSubTitleText((StringExternal("Param/Value/lib_Ntve_2790CD6C") + StringExternal(CatalogFieldValueGet(c_gameCatalogSound, (lp_soundFile), "AssetArray[0].Speaker", c_playerAny)) + StringExternal("Param/Value/lib_Ntve_112EB177") + StringExternal(CatalogFieldValueGet(c_gameCatalogSound, (lp_soundFile), "AssetArray[0].Subtitle", c_playerAny))), ((1000 * FixedToInt(SoundLengthSync(SoundLink(lp_soundFile, 0)))) + 400), -1);
}

text libNtve_gf_ConvertBooleanToText (bool lp_value) {
    // Implementation
    if ((lp_value == true)) {
        return StringExternal("Param/Value/lib_Ntve_AB4DD212");
    }
    else {
        return StringExternal("Param/Value/lib_Ntve_1E5D9313");
    }
}

string libNtve_gf_ConvertBooleanToString (bool lp_value) {
    // Implementation
    if ((lp_value == true)) {
        return "True";
    }
    else {
        return "False";
    }
}

color libNtve_gf_ConvertPlayerColorToColor (int lp_playerColor) {
    // Implementation
    return ColorFromIndex((lp_playerColor), c_teamColorDiffuse);
}

string libNtve_gf_ConvertColorToString (color lp_color) {
    // Implementation
    return (IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentRed))) + "," + IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentGreen))) + "," + IntToString(Color255FromFixed(ColorGetComponent(lp_color, c_colorComponentBlue))));
}

string libNtve_gf_ConvertBearingsToString (fixed lp_positionX, fixed lp_positionY, fixed lp_positionZ, fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return (libNtve_gf_Convert3DVectorToString(lp_positionX, lp_positionY, lp_positionZ) + " " + libNtve_gf_Convert3DRotationToString(lp_forwardX, lp_forwardY, lp_forwardZ, lp_upX, lp_upY, lp_upZ));
}

string libNtve_gf_ConvertXYToString (fixed lp_x, fixed lp_y) {
    // Implementation
    return (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny));
}

string libNtve_gf_Convert3DVectorToString (fixed lp_x, fixed lp_y, fixed lp_z) {
    // Implementation
    return (FixedToString(lp_x, c_fixedPrecisionAny) + "," + FixedToString(lp_y, c_fixedPrecisionAny) + "," + FixedToString(lp_z, c_fixedPrecisionAny));
}

string libNtve_gf_Convert3DRotationToString (fixed lp_forwardX, fixed lp_forwardY, fixed lp_forwardZ, fixed lp_upX, fixed lp_upY, fixed lp_upZ) {
    // Implementation
    return (libNtve_gf_Convert3DVectorToString(lp_forwardX, lp_forwardY, lp_forwardZ) + "," + libNtve_gf_Convert3DVectorToString(lp_upX, lp_upY, lp_upZ));
}

void libNtve_gf_SetDialogItemText (int lp_dialogItem, text lp_text, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsText(lp_dialogItem, c_triggerControlPropertyText, lp_players, lp_text);
}

text libNtve_gf_DialogItemText (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsText(lp_dialogItem, c_triggerControlPropertyText, lp_player);
}

int libNtve_gf_CreateDialogItemAchievement (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_achievement) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeAchievement);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemAchievement(lv_dialogitem, lp_achievement, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemButton (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, text lp_buttonText, string lp_hoverImage) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeButton);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_dialogitem, lp_buttonText, PlayerGroupAll());
    if ((lp_hoverImage != "")) {
        libNtve_gf_SetDialogItemImage2(lv_dialogitem, lp_hoverImage, PlayerGroupAll());
    }
    else {
    }
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemCheckBox (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, bool lp_checked) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeCheckBox);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemChecked(lv_dialogitem, lp_checked, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemImage (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_tooltip, string lp_image, int lp_imageType, bool lp_tiled, color lp_tintColor, int lp_blendMode) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeImage);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemTooltip(lv_dialogitem, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(lv_dialogitem, lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(lv_dialogitem, lp_imageType, PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType2(lv_dialogitem, lp_tiled, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_tintColor, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(lv_dialogitem, lp_blendMode, PlayerGroupAll());
    return lv_dialogitem;
}

int libNtve_gf_CreateDialogItemLabel (int lp_dialog, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, text lp_text, color lp_color, bool lp_textWriteout, fixed lp_textWriteoutDuration) {
    // Variable Declarations
    int lv_dialogitem;

    // Variable Initialization
    lv_dialogitem = c_invalidDialogControlId;

    // Implementation
    DialogControlCreate(lp_dialog, c_triggerControlTypeLabel);
    lv_dialogitem = DialogControlLastCreated();
    DialogControlSetSize(lv_dialogitem, PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(lv_dialogitem, PlayerGroupAll(), lp_anchor, lp_offsetX, lp_offsetY);
    libNtve_gf_SetDialogItemText(lv_dialogitem, lp_text, PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(lv_dialogitem, lp_color, PlayerGroupAll());
    libNtve_gf_SetDialogItemTextWriteout(lv_dialogitem, lp_textWriteout, PlayerGroupAll());
    if ((lp_textWriteout == true)) {
        libNtve_gf_SetDialogItemTextWriteoutDuration(lv_dialogitem, lp_textWriteoutDuration, PlayerGroupAll());
    }
    else {
    }
    return lv_dialogitem;
}

void libNtve_gf_SetDialogItemRotation (int lp_dialogItem, int lp_rotation, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyRotation, lp_players, (lp_rotation));
}

void libNtve_gf_SetDialogItemCurrentValue (int lp_dialogItem, fixed lp_currentValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyValue, lp_players, lp_currentValue);
}

void libNtve_gf_SetDialogItemMinimumValue (int lp_dialogItem, fixed lp_minValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMinValue, lp_players, lp_minValue);
}

void libNtve_gf_SetDialogItemMaximumValue (int lp_dialogItem, fixed lp_maxValue, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMaxValue, lp_players, lp_maxValue);
}

void libNtve_gf_SetDialogItemChecked (int lp_dialogItem, bool lp_checked, playergroup lp_players) {
    // Implementation
    if ((lp_checked == true)) {
        DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_players, true);
    }
    else {
        DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_players, false);
    }
}

void libNtve_gf_SetDialogItemEditorValue (int lp_dialogItem, string lp_value, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyEditText, lp_players, lp_value);
}

fixed libNtve_gf_DialogItemValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyValue, lp_player);
}

fixed libNtve_gf_DialogItemMaximumValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMaxValue, lp_player);
}

fixed libNtve_gf_DialogItemMinimumValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyMinValue, lp_player);
}

bool libNtve_gf_DialogItemIsChecked (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyChecked, lp_player);
}

string libNtve_gf_DialogItemEditValue (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyEditText, lp_player);
}

void libNtve_gf_SetDialogItemColor (int lp_dialogItem, color lp_color, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsColor(lp_dialogItem, c_triggerControlPropertyColor, lp_players, lp_color);
}

void libNtve_gf_SetDialogItemStyle (int lp_dialogItem, string lp_style, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyStyle, lp_players, lp_style);
}

void libNtve_gf_SetDialogItemTextWriteout (int lp_dialogItem, bool lp_writeout, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyTextWriteout, lp_players, lp_writeout);
}

void libNtve_gf_SetDialogItemTextWriteoutDuration (int lp_dialogItem, fixed lp_duration, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsFixed(lp_dialogItem, c_triggerControlPropertyTextWriteoutDuration, lp_players, lp_duration);
}

void libNtve_gf_SetDialogItemTooltip (int lp_dialogItem, text lp_tooltip, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsText(lp_dialogItem, c_triggerControlPropertyTooltip, lp_players, lp_tooltip);
}

color libNtve_gf_DialogItemColor (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsColor(lp_dialogItem, c_triggerControlPropertyColor, lp_player);
}

string libNtve_gf_DialogItemStyle (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyStyle, lp_player);
}

text libNtve_gf_DialogItemTooltip (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsText(lp_dialogItem, c_triggerControlPropertyTooltip, lp_player);
}

void libNtve_gf_SetDialogItemImage (int lp_dialogItem, string lp_image, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyImage, lp_players, lp_image);
}

void libNtve_gf_SetDialogItemImage2 (int lp_dialogItem, string lp_image, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyHoverImage, lp_players, lp_image);
}

void libNtve_gf_SetDialogItemImageType (int lp_dialogItem, int lp_imageType, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyImageType, lp_players, (lp_imageType));
}

void libNtve_gf_SetDialogItemBlendMode (int lp_dialogItem, int lp_blendMode, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyBlendMode, lp_players, (lp_blendMode));
}

void libNtve_gf_SetDialogItemImageType2 (int lp_dialogItem, bool lp_tiled, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsBool(lp_dialogItem, c_triggerControlPropertyTiled, lp_players, lp_tiled);
}

string libNtve_gf_DialogItemImage (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsString(lp_dialogItem, c_triggerControlPropertyImage, lp_player);
}

int libNtve_gf_DialogItemImageType (int lp_dialogItem, int lp_player) {
    // Implementation
    return DialogControlGetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyImageType, lp_player);
}

void libNtve_gf_SetDialogItemFlash (int lp_dialogItem, string lp_flash, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyFile, lp_players, lp_flash);
}

void libNtve_gf_SetDialogItemAchievement (int lp_dialogItem, string lp_achievement, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsString(lp_dialogItem, c_triggerControlPropertyAchievement, lp_players, lp_achievement);
}

void libNtve_gf_SetDialogItemRenderPriority (int lp_dialogItem, int lp_renderPriority, playergroup lp_players) {
    // Implementation
    DialogControlSetPropertyAsInt(lp_dialogItem, c_triggerControlPropertyRenderPriority, lp_players, lp_renderPriority);
}

void libNtve_gf_DisplayScreenButton (int lp_screenButtonID, text lp_text, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY, trigger lp_callback) {
    // Implementation
    if ((lp_screenButtonID > libNtve_gv_c_ScreenButtonMaxCount)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_3EFBEA6A") + IntToText(libNtve_gv_c_ScreenButtonMaxCount) + StringExternal("Param/Value/lib_Ntve_8BE5995A")));
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, true);
        libNtve_gv_screenButtonDialogs[lp_screenButtonID] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    else {
    }
    DialogSetSize(libNtve_gv_screenButtonDialogs[lp_screenButtonID], lp_width, lp_height);
    DialogSetPosition(libNtve_gv_screenButtonDialogs[lp_screenButtonID], lp_anchor, lp_offsetX, lp_offsetY);
    if ((libNtve_gv_screenButtons[lp_screenButtonID] == c_invalidDialogControlId)) {
        DialogControlCreate(libNtve_gv_screenButtonDialogs[lp_screenButtonID], c_triggerControlTypeButton);
        libNtve_gv_screenButtons[lp_screenButtonID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), libNtve_gv_screenButtonsBorderImage[lp_screenButtonID], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), libNtve_gv_screenButtonsHoverImage[lp_screenButtonID], PlayerGroupAll());
    }
    else {
    }
    DialogControlSetSize(libNtve_gv_screenButtons[lp_screenButtonID], PlayerGroupAll(), lp_width, lp_height);
    DialogControlSetPosition(libNtve_gv_screenButtons[lp_screenButtonID], PlayerGroupAll(), c_anchorCenter, 0, 0);
    DialogControlSetPropertyAsText(libNtve_gv_screenButtons[lp_screenButtonID], c_triggerControlPropertyText, PlayerGroupAll(), lp_text);
    libNtve_gf_SetDialogItemStyle(libNtve_gv_screenButtons[lp_screenButtonID], "ScreenButton", PlayerGroupAll());
    libNtve_gv_screenButtonCallbacks[lp_screenButtonID] = lp_callback;
    DialogSetVisible(libNtve_gv_screenButtonDialogs[lp_screenButtonID], PlayerGroupAll(), true);
}

void libNtve_gf_HideScreenButton (bool lp_showHide, int lp_screenButtonID) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv_screenButtonDialogs[lp_screenButtonID], PlayerGroupAll(), lp_showHide);
}

void libNtve_gf_FlashScreenButton (int lp_screenButtonID, fixed lp_flashTime, color lp_color1, color lp_color2) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libNtve_gv_tP_FlashScreenButtonID = lp_screenButtonID;
    libNtve_gv_tP_FlashScreenButtonFlashTime = lp_flashTime;
    libNtve_gv_tP_FlashScreenButtonColor1 = lp_color1;
    libNtve_gv_tP_FlashScreenButtonColor2 = lp_color2;
    TriggerExecute(libNtve_gt_FlashScreenButton, true, false);
}

void libNtve_gf_StopFlashingScreenButton (int lp_screenButtonID) {
    // Implementation
    if ((libNtve_gv_screenButtonDialogs[lp_screenButtonID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonsFlashing[lp_screenButtonID] == false)) {
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenButtonsFlashStopping[lp_screenButtonID] == true)) {
        return ;
    }
    else {
    }
    libNtve_gv_screenButtonsFlashStopping[lp_screenButtonID] = true;
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenButtons[lp_screenButtonID], libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lp_screenButtonID), "Assets\\Textures\\ui_mission_hackingbutton_normalpressed.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lp_screenButtonID), "Assets\\Textures\\ui_mission_hackingbutton_normaloverpressedover.dds", PlayerGroupAll());
}

void libNtve_gf_SetScreenButtonBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType) {
    // Implementation
    libNtve_gv_screenButtonsBorderType[lp_screenButtonID] = lp_borderType;
    libNtve_gv_screenButtonsBorderImage[lp_screenButtonID] = lp_borderImage;
    libNtve_gv_screenButtonsHoverImage[lp_screenButtonID] = lp_hoverImage;
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenButtons[lp_screenButtonID], libNtve_gv_screenButtonsBorderType[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsBorderImage[lp_screenButtonID], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lp_screenButtonID), libNtve_gv_screenButtonsHoverImage[lp_screenButtonID], PlayerGroupAll());
}

void libNtve_gf_SetScreenButtonFlashingBorderImage (int lp_screenButtonID, string lp_borderImage, string lp_hoverImage, int lp_borderType) {
    // Implementation
    libNtve_gv_screenButtonsFlashingBorderType[lp_screenButtonID] = lp_borderType;
    libNtve_gv_screenButtonsFlashingBorderImage[lp_screenButtonID] = lp_borderImage;
    libNtve_gv_screenButtonsFlashingHoverImage[lp_screenButtonID] = lp_hoverImage;
}

int libNtve_gf_ScreenButtonDialog (int lp_screenButtonID) {
    // Implementation
    return libNtve_gv_screenButtonDialogs[lp_screenButtonID];
}

int libNtve_gf_ScreenButton (int lp_screenButtonID) {
    // Implementation
    return libNtve_gv_screenButtons[lp_screenButtonID];
}

void libNtve_gf_DisplayScreenImage (int lp_screenImageID, string lp_image, int lp_blendMode, int lp_width, int lp_height, int lp_anchor, int lp_offsetX, int lp_offsetY) {
    // Implementation
    if ((lp_screenImageID == libNtve_gv_c_ScreenImageMaxCount)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_83A50D3D") + IntToText(libNtve_gv_c_ScreenImageMaxCount) + StringExternal("Param/Value/lib_Ntve_B9D80F71")));
        return ;
    }
    else {
    }
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        DialogCreate(1, 1, c_anchorCenter, 0, 0, false);
        libNtve_gv_screenImageDialogs[lp_screenImageID] = DialogLastCreated();
    }
    else {
    }
    DialogSetImageVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], false);
    DialogSetSize(libNtve_gv_screenImageDialogs[lp_screenImageID], lp_width, lp_height);
    DialogSetPosition(libNtve_gv_screenImageDialogs[lp_screenImageID], lp_anchor, lp_offsetX, lp_offsetY);
    DialogSetTransparency(libNtve_gv_screenImageDialogs[lp_screenImageID], 0.0);
    if ((libNtve_gv_screenImageDialogImages[lp_screenImageID] == c_invalidDialogControlId)) {
        DialogControlCreate(libNtve_gv_screenImageDialogs[lp_screenImageID], c_triggerControlTypeImage);
        libNtve_gv_screenImageDialogImages[lp_screenImageID] = DialogControlLastCreated();
    }
    else {
    }
    libNtve_gf_SetDialogItemImageType(libNtve_gv_screenImageDialogImages[lp_screenImageID], c_triggerImageTypeNormal, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gv_screenImageDialogImages[lp_screenImageID], lp_image, PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(libNtve_gv_screenImageDialogImages[lp_screenImageID], lp_blendMode, PlayerGroupAll());
    DialogControlSetSize(libNtve_gv_screenImageDialogImages[lp_screenImageID], PlayerGroupAll(), lp_width, lp_height);
    libNtve_gf_SetDialogItemRotation(libNtve_gv_screenImageDialogImages[lp_screenImageID], 0, PlayerGroupAll());
    DialogControlSetPosition(libNtve_gv_screenImageDialogImages[lp_screenImageID], PlayerGroupAll(), c_anchorCenter, 0, 0);
    libNtve_gv_screenImagePulsing[lp_screenImageID] = false;
    DialogSetVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], PlayerGroupAll(), true);
}

void libNtve_gf_HideScreenImage (bool lp_showHideOption, int lp_screenImageID) {
    // Implementation
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv_screenImageDialogs[lp_screenImageID], PlayerGroupAll(), lp_showHideOption);
}

void libNtve_gf_PulseScreenImage (int lp_screenImageID, fixed lp_period, fixed lp_transparency1, fixed lp_transparency2) {
    // Implementation
    libNtve_gv_tP_PulseScreenImageID = lp_screenImageID;
    libNtve_gv_tP_PulseScreenImagePeriod = lp_period;
    libNtve_gv_tP_PulseScreenImageTransparency1 = lp_transparency1;
    libNtve_gv_tP_PulseScreenImageTransparency2 = lp_transparency2;
    TriggerExecute(libNtve_gt_PulseScreenImage, true, false);
}

void libNtve_gf_StopPulsingScreenImage (int lp_screenImageID) {
    // Implementation
    if ((libNtve_gv_screenImageDialogs[lp_screenImageID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    libNtve_gv_screenImagePulsing[lp_screenImageID] = false;
}

int libNtve_gf_ScreenImageDialog (int lp_screenImageID) {
    // Implementation
    return libNtve_gv_screenImageDialogs[lp_screenImageID];
}

int libNtve_gf_ScreenImageDialogItem (int lp_screenImageID) {
    // Implementation
    return libNtve_gv_screenImageDialogImages[lp_screenImageID];
}

void libNtve_gf_CreateExplosionAtPoint (int lp_size, int lp_race, point lp_point) {
    // Variable Declarations
    string lv_race;
    string lv_size;
    actor lv_explosion;

    // Variable Initialization
    lv_race = "Terran";
    lv_size = "Large";
    lv_explosion = null;

    // Implementation
    libNtve_gf_CreateActorAtPoint("TriggeredExplosion", lp_point);
    lv_explosion = libNtve_gf_LastCreatedActor();
    if ((lp_race == 1)) {
        lv_race = "Protoss";
    }
    else {
        if ((lp_race == 2)) {
            lv_race = "Zerg";
        }
        else {
        }
    }
    if ((lp_size == 1)) {
        lv_size = "Small";
    }
    else {
    }
    ActorSend(lv_explosion, (("Signal " + lv_race + lv_size)));
}

bool libNtve_gf_PlayerCanCreateEffectAtPoint (int lp_player, string lp_effect, point lp_point) {
    // Implementation
    return (PlayerValidateEffectPoint(lp_player, lp_effect, lp_point) == 0);
}

bool libNtve_gf_PlayerCanCreateEffectOnUnit (int lp_player, string lp_effect, unit lp_target) {
    // Implementation
    return (PlayerValidateEffectUnit(lp_player, lp_effect, lp_target) == 0);
}

bool libNtve_gf_UnitCanCreateEffectAtPoint (unit lp_caster, string lp_effect, point lp_point) {
    // Implementation
    return (UnitValidateEffectPoint(lp_caster, lp_effect, lp_point) == 0);
}

bool libNtve_gf_UnitCanCreateEffectOnUnit (unit lp_caster, string lp_effect, unit lp_target) {
    // Implementation
    return (UnitValidateEffectUnit(lp_caster, lp_effect, lp_target) == 0);
}

fixed libNtve_gf_GamePlayTime (int lp_player) {
    // Implementation
    return TimerGetElapsed(libNtve_gv__GameTimer[lp_player]);
}

void libNtve_gf_GameRemoveChargeRegen (string lp_inCharge) {
    // Implementation
    GameAddChargeRegen(lp_inCharge, (-1.0 * GameGetChargeRegen(lp_inCharge)));
}

void libNtve_gf_GameRemoveChargeUsed (string lp_inCharge) {
    // Implementation
    GameAddChargeUsed(lp_inCharge, (-1.0 * GameGetChargeUsed(lp_inCharge)));
}

void libNtve_gf_GameRemoveCooldown (string lp_inCooldown) {
    // Implementation
    GameAddCooldown(lp_inCooldown, (-1.0 * GameGetCooldown(lp_inCooldown)));
}

void libNtve_gf_PreloadModelObject (string lp_id, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogModel, (lp_id), lp_queue);
}

void libNtve_gf_PreloadSoundObject (string lp_id, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogSound, (lp_id), lp_queue);
}

void libNtve_gf_PreloadSoundtrack (string lp_soundtrack, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogSoundtrack, (lp_soundtrack), lp_queue);
}

void libNtve_gf_PreloadUnit (string lp_unit, bool lp_queue) {
    // Implementation
    PreloadObject(c_gameCatalogUnit, (lp_unit), lp_queue);
}

void libNtve_gf_WaitForTimer (timer lp_timer, fixed lp_time, bool lp_waitType) {
    // Implementation
    if ((lp_waitType == true)) {
        while (!((TimerGetElapsed(lp_timer) >= lp_time))) {
            Wait(0.05, c_timeGame);
        }
    }
    else {
        while (!((TimerGetRemaining(lp_timer) <= lp_time))) {
            Wait(0.05, c_timeGame);
        }
    }
}

int libNtve_gf_ArithmeticIntClamp (int lp_value, int lp_min, int lp_max) {
    // Implementation
    if ((lp_value < lp_min)) {
        return lp_min;
    }
    else {
    }
    if ((lp_value > lp_max)) {
        return lp_max;
    }
    else {
    }
    return lp_value;
}

fixed libNtve_gf_ArithmeticRealClamp (fixed lp_value, fixed lp_min, fixed lp_max) {
    // Implementation
    if ((lp_value < lp_min)) {
        return lp_min;
    }
    else {
    }
    if ((lp_value > lp_max)) {
        return lp_max;
    }
    else {
    }
    return lp_value;
}

fixed libNtve_gf_RandomPercent () {
    // Implementation
    return RandomFixed(0.0, 100.0);
}

fixed libNtve_gf_RandomAngle () {
    // Implementation
    return RandomFixed(0.0, 360.0);
}

void libNtve_gf_CreatePingFacingAngle (playergroup lp_players, string lp_model, point lp_position, color lp_color, fixed lp_duration, fixed lp_angle) {
    // Variable Declarations
    point lv_pointWithAngle;

    // Variable Initialization
    lv_pointWithAngle = null;

    // Implementation
    lv_pointWithAngle = libNtve_gf_PointFromPositionAndAngle(lp_position, lp_angle);
    PingCreate(lp_players, lp_model, lv_pointWithAngle, lp_color, lp_duration);
}

void libNtve_gf_ClearAlliance (int lp_sourcePlayer, int lp_targetPlayer) {
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, false);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, false);
}

void libNtve_gf_MakeAlly (int lp_sourcePlayer, int lp_targetPlayer) {
    // Implementation
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSeekHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdGiveHelp, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdTrade, lp_targetPlayer, true);
    PlayerSetAlliance(lp_sourcePlayer, c_allianceIdDefeat, lp_targetPlayer, true);
}

void libNtve_gf_SetAlliance (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    // Implementation
    libNtve_gf_SetAllianceOneWay(lp_sourcePlayer, lp_targetPlayer, lp_alliance);
    libNtve_gf_SetAllianceOneWay(lp_targetPlayer, lp_sourcePlayer, lp_alliance);
}

void libNtve_gf_SetAllianceOneWay (int lp_sourcePlayer, int lp_targetPlayer, int lp_alliance) {
    int autoC4A67CFA_val;

    // Implementation
    if ((lp_sourcePlayer != lp_targetPlayer)) {
        libNtve_gf_ClearAlliance(lp_sourcePlayer, lp_targetPlayer);
        autoC4A67CFA_val = lp_alliance;
        if (autoC4A67CFA_val == 0) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
        }
        else if (autoC4A67CFA_val == 1) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 2) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 3) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 4) {
            libNtve_gf_MakeAlly(lp_sourcePlayer, lp_targetPlayer);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdControl, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdSpend, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 7) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 8) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 9) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdPushable, lp_targetPlayer, true);
        }
        else if (autoC4A67CFA_val == 5) {
        }
        else if (autoC4A67CFA_val == 6) {
            PlayerSetAlliance(lp_sourcePlayer, c_allianceIdVision, lp_targetPlayer, true);
        }
        else {
        }
    }
    else {
    }
}

void libNtve_gf_SetPlayerGroupAlliance (playergroup lp_players, int lp_alliance) {
    playergroup autoC679B4B5_g;
    int autoC679B4B5_p;
    playergroup auto92EC5468_g;
    int auto92EC5468_p;

    // Variable Declarations
    int lv_player1;
    int lv_player2;

    // Variable Initialization
    lv_player1 = 0;
    lv_player2 = 0;

    // Implementation
    autoC679B4B5_g = lp_players;
    autoC679B4B5_p = 1;
    while (autoC679B4B5_p <= PlayerGroupCount(autoC679B4B5_g)) {
        lv_player1 = PlayerGroupPlayer(autoC679B4B5_g, autoC679B4B5_p);
        auto92EC5468_g = lp_players;
        auto92EC5468_p = 1;
        while (auto92EC5468_p <= PlayerGroupCount(auto92EC5468_g)) {
            lv_player2 = PlayerGroupPlayer(auto92EC5468_g, auto92EC5468_p);
            if ((lv_player1 != lv_player2)) {
                libNtve_gf_SetAllianceOneWay(lv_player1, lv_player2, lp_alliance);
            }
            else {
            }
            if (lv_player2 == PlayerGroupPlayer(auto92EC5468_g, auto92EC5468_p)) {
                auto92EC5468_p = auto92EC5468_p + 1;
            }
        }
        if (lv_player1 == PlayerGroupPlayer(autoC679B4B5_g, autoC679B4B5_p)) {
            autoC679B4B5_p = autoC679B4B5_p + 1;
        }
    }
}

bool libNtve_gf_PlayerIsEnemy (int lp_sourcePlayer, int lp_targetPlayer, int lp_relation) {
    int auto180886E4_val;

    // Implementation
    auto180886E4_val = lp_relation;
    if (auto180886E4_val == 0) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer));
    }
    else if (auto180886E4_val == 1) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdChat, lp_sourcePlayer));
    }
    else if (auto180886E4_val == 2) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer)));
    }
    else if (auto180886E4_val == 3) {
        return (PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer) && !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdChat, lp_targetPlayer)) && PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer) && !(PlayerGetAlliance(lp_targetPlayer, c_allianceIdChat, lp_sourcePlayer)));
    }
    else if (auto180886E4_val == 4) {
        return !(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer));
    }
    else if (auto180886E4_val == 5) {
        return (!(PlayerGetAlliance(lp_sourcePlayer, c_allianceIdPassive, lp_targetPlayer)) && !(PlayerGetAlliance(lp_targetPlayer, c_allianceIdPassive, lp_sourcePlayer)));
    }
    else {
    }
    return false;
}

void libNtve_gf_PlayerRemoveChargeRegen (int lp_inPlayer, string lp_inCharge) {
    // Implementation
    PlayerAddChargeRegen(lp_inPlayer, lp_inCharge, (-1.0 * PlayerGetChargeRegen(lp_inPlayer, lp_inCharge)));
}

void libNtve_gf_PlayerRemoveChargeUsed (int lp_inPlayer, string lp_inCharge) {
    // Implementation
    PlayerAddChargeUsed(lp_inPlayer, lp_inCharge, (-1.0 * PlayerGetChargeUsed(lp_inPlayer, lp_inCharge)));
}

void libNtve_gf_PlayerRemoveCooldown (int lp_inPlayer, string lp_inCooldown) {
    // Implementation
    PlayerAddCooldown(lp_inPlayer, lp_inCooldown, (-1.0 * PlayerGetCooldown(lp_inPlayer, lp_inCooldown)));
}

void libNtve_gf_AddPlayerGroupToPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup) {
    playergroup auto57A2B8C2_g;
    int auto57A2B8C2_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto57A2B8C2_g = lp_sourceGroup;
    auto57A2B8C2_p = 1;
    while (auto57A2B8C2_p <= PlayerGroupCount(auto57A2B8C2_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto57A2B8C2_g, auto57A2B8C2_p);
        PlayerGroupAdd(lp_targetGroup, lv_pickedPlayer);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto57A2B8C2_g, auto57A2B8C2_p)) {
            auto57A2B8C2_p = auto57A2B8C2_p + 1;
        }
    }
}

void libNtve_gf_RemovePlayerGroupFromPlayerGroup (playergroup lp_sourceGroup, playergroup lp_targetGroup) {
    playergroup auto2647939F_g;
    int auto2647939F_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto2647939F_g = lp_sourceGroup;
    auto2647939F_p = 1;
    while (auto2647939F_p <= PlayerGroupCount(auto2647939F_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto2647939F_g, auto2647939F_p);
        PlayerGroupRemove(lp_targetGroup, lv_pickedPlayer);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto2647939F_g, auto2647939F_p)) {
            auto2647939F_p = auto2647939F_p + 1;
        }
    }
}

point libNtve_gf_PointFromXYZ (fixed lp_x, fixed lp_y, fixed lp_y2) {
    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = null;

    // Implementation
    lv_point = Point(lp_x, lp_y);
    PointSetHeight(lv_point, lp_y2);
    return lv_point;
}

point libNtve_gf_PointFromPositionAndAngle (point lp_point, fixed lp_angle) {
    // Variable Declarations
    point lv_pointWithFacing;

    // Variable Initialization
    lv_pointWithFacing = null;

    // Implementation
    lv_pointWithFacing = lp_point;
    PointSetFacing(lv_pointWithFacing, lp_angle);
    return lv_pointWithFacing;
}

point libNtve_gf_PointWithZOffset (point lp_p, fixed lp_z) {
    // Implementation
    return libNtve_gf_PointFromXYZ(PointGetX(lp_p), PointGetY(lp_p), lp_z);
}

point libNtve_gf_PointOffsetTowardsPoint (point lp_sourcePoint, fixed lp_distance, point lp_targetPoint) {
    // Implementation
    return PointWithOffsetPolar(lp_sourcePoint, lp_distance, AngleBetweenPoints(lp_sourcePoint, lp_targetPoint));
}

point libNtve_gf_RandomPointBetweenPoints (point lp_point1, point lp_point2) {
    // Variable Declarations
    fixed lv_p1Weight;
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Implementation
    lv_p1Weight = RandomFixed(0.0, 1.0);
    lv_x = ((lv_p1Weight * PointGetX(lp_point1)) + ((1.0 - lv_p1Weight) * PointGetX(lp_point2)));
    lv_y = ((lv_p1Weight * PointGetY(lp_point1)) + ((1.0 - lv_p1Weight) * PointGetY(lp_point2)));
    return Point(lv_x, lv_y);
}

int libNtve_gf_CinematicPortrait (int lp_position) {
    int auto0CE35058_val;

    // Variable Declarations
    int lv_index;
    int lv_width;
    int lv_height;
    int lv_anchor;
    int lv_offsetX;
    int lv_offsetY;

    // Variable Initialization
    lv_index = 0;
    lv_width = 0;
    lv_height = 0;
    lv_anchor = c_anchorBottomLeft;
    lv_offsetX = 0;
    lv_offsetY = 0;

    // Implementation
    lv_height = 360;
    lv_width = FixedToInt((IntToFixed(lv_height) * (144.0 / 219.0)));
    lv_offsetX = 25;
    auto0CE35058_val = lp_position;
    if (auto0CE35058_val == 0) {
        lv_index = 0;
        lv_anchor = c_anchorTopLeft;
        lv_offsetY = 90;
    }
    else if (auto0CE35058_val == 1) {
        lv_index = 1;
        lv_anchor = c_anchorTopRight;
        lv_offsetY = 90;
    }
    else if (auto0CE35058_val == 2) {
        lv_index = 2;
        lv_anchor = c_anchorBottomLeft;
        lv_offsetY = 190;
    }
    else if (auto0CE35058_val == 3) {
        lv_index = 3;
        lv_anchor = c_anchorBottomRight;
        lv_offsetY = 190;
    }
    else if (auto0CE35058_val == 4) {
        lv_index = 4;
        lv_anchor = c_anchorLeft;
        lv_offsetY = -50;
    }
    else if (auto0CE35058_val == 5) {
        lv_index = 5;
        lv_anchor = c_anchorRight;
        lv_offsetY = -50;
    }
    else {
        return c_invalidPortraitId;
    }
    if ((libNtve_gv_portraits[lv_index] != c_invalidPortraitId)) {
        return libNtve_gv_portraits[lv_index];
    }
    else {
    }
    PortraitCreate(lv_offsetX, lv_offsetY, lv_anchor, lv_width, lv_height, null, "Dflt", "", true, true);
    libNtve_gv_portraits[lv_index] = PortraitLastCreated();
    PortraitSetBorderVisible(libNtve_gv_portraits[lv_index], true);
    PortraitUseTransition(libNtve_gv_portraits[lv_index], true);
    PortraitSetVisible(libNtve_gv_portraits[lv_index], PlayerGroupAll(), false, false);
    return libNtve_gv_portraits[lv_index];
}

int libNtve_gf_FullscreenPortrait () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Implementation
    lv_index = 6;
    if ((libNtve_gv_portraits[lv_index] != c_invalidPortraitId)) {
        return libNtve_gv_portraits[lv_index];
    }
    else {
    }
    PortraitCreate(0, 0, c_anchorCenter, 0, 0, null, "Dflt", "", true, true);
    libNtve_gv_portraits[lv_index] = PortraitLastCreated();
    PortraitSetFullscreen(libNtve_gv_portraits[lv_index], true);
    PortraitSetBorderVisible(libNtve_gv_portraits[lv_index], false);
    PortraitUseTransition(libNtve_gv_portraits[lv_index], false);
    PortraitSetVisible(libNtve_gv_portraits[lv_index], PlayerGroupAll(), false, false);
    return libNtve_gv_portraits[lv_index];
}

void libNtve_gf_PortraitSetAnim (int lp_Portrait, string lp_Anim, string lp_identifier, int lp_flags, fixed lp_blendTime) {
    // Implementation
    libNtve_gf_PlayAnimation(ActorFromPortrait(lp_Portrait), lp_identifier, lp_Anim, lp_flags, lp_blendTime);
}

void libNtve_gf_PortraitSetTintColor (int lp_Portrait, color lp_color) {
    // Variable Declarations
    actor lv_a;

    // Variable Initialization
    lv_a = null;

    // Implementation
    lv_a = ActorFromPortrait(lp_Portrait);
    ActorSend(lv_a, libNtve_gf_SetTintColor(lp_color, 1.0, -1.0));
}

void libNtve_gf_ClearPortraitAnimation (int lp_portrait, string lp_identifier) {
    // Implementation
    libNtve_gf_ClearAnimation(ActorFromPortrait(lp_portrait), lp_identifier);
}

fixed libNtve_gf_WidthOfRegion (region lp_region) {
    // Implementation
    return AbsF((PointGetX(RegionGetBoundsMax(lp_region)) - PointGetX(RegionGetBoundsMin(lp_region))));
}

fixed libNtve_gf_HeightOfRegion (region lp_region) {
    // Implementation
    return AbsF((PointGetY(RegionGetBoundsMax(lp_region)) - PointGetY(RegionGetBoundsMin(lp_region))));
}

void libNtve_gf_StoreUnitSelection (int lp_forPlayer, int lp_storeOption) {
    // Implementation
    libNtve_gv_unitSelectionStored[lp_forPlayer] = UnitGroupSelected(lp_forPlayer);
    if ((lp_storeOption == 0)) {
        UnitClearSelection(lp_forPlayer);
    }
    else {
    }
}

void libNtve_gf_RestoreUnitSelection (int lp_forPlayer) {
    // Implementation
    UnitClearSelection(lp_forPlayer);
    UnitGroupSelect(libNtve_gv_unitSelectionStored[lp_forPlayer], lp_forPlayer, true);
}

void libNtve_gf_SetAllSoundChannelVolumes (int lp_mode, playergroup lp_players, fixed lp_duration) {
    int auto37650D48_val;

    // Implementation
    auto37650D48_val = lp_mode;
    if (auto37650D48_val == 0) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 40.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else if (auto37650D48_val == 1) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 60.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 70.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 25.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else if (auto37650D48_val == 2) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, lp_duration);
    }
    else if (auto37650D48_val == 3) {
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAlert, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryAmbient, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryBuild, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDialogue, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDoodad, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFlames, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryFoley, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryGather, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMission, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovie, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryOther, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryReady, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySAmbient, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySEmitters, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySPieces, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryTV, 0.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, lp_duration);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 0.0, lp_duration);
    }
    else {
    }
}

void libNtve_gf__StoryModeOnOffForPlayer (int lp_player, bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        PlayerGroupAdd(libNtve_gv__PlayersInStoryMode, lp_player);
    }
    else {
        PlayerGroupRemove(libNtve_gv__PlayersInStoryMode, lp_player);
    }
}

void libNtve_gf__StoryModeOnOffForPlayerGroup (playergroup lp_players, bool lp_onOff) {
    playergroup auto476D40C9_g;
    int auto476D40C9_p;

    // Variable Declarations
    int lv_pickedPlayer;

    // Variable Initialization
    lv_pickedPlayer = 0;

    // Implementation
    auto476D40C9_g = lp_players;
    auto476D40C9_p = 1;
    while (auto476D40C9_p <= PlayerGroupCount(auto476D40C9_g)) {
        lv_pickedPlayer = PlayerGroupPlayer(auto476D40C9_g, auto476D40C9_p);
        libNtve_gf__StoryModeOnOffForPlayer(lv_pickedPlayer, lp_onOff);
        if (lv_pickedPlayer == PlayerGroupPlayer(auto476D40C9_g, auto476D40C9_p)) {
            auto476D40C9_p = auto476D40C9_p + 1;
        }
    }
}

void libNtve_gf__StoryModeHideUI (playergroup lp_players) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 0;

    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
    UISetFrameVisible(lp_players, c_syncFrameTypeAlertPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, false);
}

void libNtve_gf__StoryModeRestoreUI (playergroup lp_players) {
    // Implementation
    libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
}

void libNtve_gf_StoryMode (playergroup lp_players, bool lp_onOff) {
    playergroup auto4DCAC640_g;
    int auto4DCAC640_p;
    playergroup autoF122BA15_g;
    int autoF122BA15_p;
    playergroup auto24E8EA3B_g;
    int auto24E8EA3B_p;

    // Variable Declarations
    playergroup lv_validPlayers;
    int lv_pickedPlayer;

    // Variable Initialization
    lv_validPlayers = PlayerGroupEmpty();
    lv_pickedPlayer = 0;

    // Implementation
    lv_validPlayers = PlayerGroupCopy(lp_players);
    if ((lp_onOff == true)) {
        auto24E8EA3B_g = lv_validPlayers;
        auto24E8EA3B_p = 1;
        while (auto24E8EA3B_p <= PlayerGroupCount(auto24E8EA3B_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto24E8EA3B_g, auto24E8EA3B_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == true)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto24E8EA3B_g, auto24E8EA3B_p)) {
                auto24E8EA3B_p = auto24E8EA3B_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__StoryModeOnOffForPlayerGroup(lv_validPlayers, true);
        libNtve_gf__StoryModeHideUI(lv_validPlayers);
        UISetMode(lv_validPlayers, c_uiModeFullscreen, 0.0);
        StoryMode(lv_validPlayers, true);
    }
    else {
        auto4DCAC640_g = lv_validPlayers;
        auto4DCAC640_p = 1;
        while (auto4DCAC640_p <= PlayerGroupCount(auto4DCAC640_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(auto4DCAC640_g, auto4DCAC640_p);
            if ((libNtve_gf_PlayerInStoryMode(lv_pickedPlayer) == false)) {
                PlayerGroupRemove(lv_validPlayers, lv_pickedPlayer);
            }
            else {
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(auto4DCAC640_g, auto4DCAC640_p)) {
                auto4DCAC640_p = auto4DCAC640_p + 1;
            }
        }
        if ((PlayerGroupCount(lv_validPlayers) == 0)) {
            return ;
        }
        else {
        }
        libNtve_gf__StoryModeOnOffForPlayerGroup(lv_validPlayers, false);
        libNtve_gf__StoryModeRestoreUI(lv_validPlayers);
        autoF122BA15_g = lv_validPlayers;
        autoF122BA15_p = 1;
        while (autoF122BA15_p <= PlayerGroupCount(autoF122BA15_g)) {
            lv_pickedPlayer = PlayerGroupPlayer(autoF122BA15_g, autoF122BA15_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_pickedPlayer) == false)) {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeConsole, 0.0);
            }
            else {
                UISetMode(PlayerGroupSingle(lv_pickedPlayer), c_uiModeLetterboxed, 0.0);
            }
            if (lv_pickedPlayer == PlayerGroupPlayer(autoF122BA15_g, autoF122BA15_p)) {
                autoF122BA15_p = autoF122BA15_p + 1;
            }
        }
        StoryMode(lv_validPlayers, false);
    }
}

bool libNtve_gf_PlayerInStoryMode (int lp_player) {
    // Implementation
    return PlayerGroupHasPlayer(libNtve_gv__PlayersInStoryMode, lp_player);
}

void libNtve_gf_SetUpgradeLevelForPlayer (int lp_p, string lp_upgrade, int lp_levels) {
    // Variable Declarations
    int lv_levelCurrent;

    // Variable Initialization
    lv_levelCurrent = 0;

    // Implementation
    lv_levelCurrent = TechTreeUpgradeCount(lp_p, lp_upgrade, c_techCountCompleteOnly);
    TechTreeUpgradeAddLevel(lp_p, lp_upgrade, (lp_levels - lv_levelCurrent));
}

void libNtve_gf_SendTransmissionSimple (transmissionsource lp_Source, int lp_Target, soundlink lp_Sound, fixed lp_Duration, int lp_DurationType, bool lp_WaitUntilDone) {
    // Implementation
    TransmissionSend(PlayerGroupAll(), lp_Source, lp_Target, "Talk", lp_Sound, null, null, lp_Duration, lp_DurationType, lp_WaitUntilDone);
}

void libNtve_gf_UIErrorMessage (playergroup lp_players, text lp_message, soundlink lp_sound) {
    // Implementation
    UIDisplayMessage(lp_players, c_messageAreaError, (StringExternal("Param/Value/lib_Ntve_C82E9187") + lp_message));
    SoundPlay(lp_sound, lp_players, 100.0, 0.0);
}

int libNtve_gf__BB_PortraitBorderWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) - 40.0));
}

int libNtve_gf__BB_PortraitBorderHeight (int lp_barID) {
    // Implementation
    return libNtve_gf__BB_PortraitBorderWidth(lp_barID);
}

int libNtve_gf__BB_PortraitWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_PortraitBorderWidth(lp_barID)) - 10.0));
}

int libNtve_gf__BB_PortraitHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_PortraitWidth(lp_barID)) - 0.0));
}

int libNtve_gf__BB_TitleBarWidth (int lp_barID) {
    // Implementation
    return ((libNtve_gv__BB_BarWidth[lp_barID] - libNtve_gf__BB_PortraitWidth(lp_barID)) - 30);
}

int libNtve_gf__BB_TitleBarHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) * 0.4));
}

int libNtve_gf__BB_HPBorderWidth (int lp_barID) {
    // Implementation
    return (libNtve_gf__BB_TitleBarWidth(lp_barID) - 60);
}

int libNtve_gf__BB_HPBorderHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gv__BB_BarHeight[lp_barID]) * 0.31));
}

int libNtve_gf__BB_HPBarWidth (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_HPBorderWidth(lp_barID)) - 10.0));
}

int libNtve_gf__BB_HPBarHeight (int lp_barID) {
    // Implementation
    return FixedToInt((IntToFixed(libNtve_gf__BB_HPBorderHeight(lp_barID)) - 3.0));
}

int libNtve_gf__BB_HPBarCurrentWidth (int lp_barID) {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    int lv_width;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_width = 0;

    // Implementation
    if ((libNtve_gv__BB_Boss[lp_barID] == null)) {
        lv_current = libNtve_gv__BB_CurrentValue[lp_barID];
        lv_max = libNtve_gv__BB_MaxValue[lp_barID];
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShieldsMax, c_unitPropCurrent));
    }
    if ((lv_max <= 0.0)) {
        lv_max = 1.0;
    }
    else {
    }
    if ((lv_current > lv_max)) {
        lv_current = lv_max;
    }
    else {
    }
    lv_width = FixedToInt((IntToFixed(libNtve_gf__BB_HPBarWidth(lp_barID)) * (lv_current / lv_max)));
    return lv_width;
}

text libNtve_gf__BB_HPBarFormatLabel (int lp_barID) {
    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_label = null;

    // Implementation
    if ((libNtve_gv__BB_Boss[lp_barID] == null)) {
        lv_current = libNtve_gv__BB_CurrentValue[lp_barID];
        lv_max = libNtve_gv__BB_MaxValue[lp_barID];
    }
    else {
        lv_current = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShields, c_unitPropCurrent));
        lv_max = (UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropLifeMax, c_unitPropCurrent) + UnitGetPropertyFixed(libNtve_gv__BB_Boss[lp_barID], c_unitPropShieldsMax, c_unitPropCurrent));
    }
    lv_label = (IntToText(FixedToInt(lv_current)) + StringExternal("Param/Value/lib_Ntve_22BDA933") + IntToText(FixedToInt(lv_max)));
    return lv_label;
}

trigger auto_libNtve_gf__BB_HPBarChange_Trigger = null;
int auto_libNtve_gf__BB_HPBarChange_lp_barID;

void libNtve_gf__BB_HPBarChange (int lp_barID) {
    auto_libNtve_gf__BB_HPBarChange_lp_barID = lp_barID;

    if (auto_libNtve_gf__BB_HPBarChange_Trigger == null) {
        auto_libNtve_gf__BB_HPBarChange_Trigger = TriggerCreate("auto_libNtve_gf__BB_HPBarChange_TriggerFunc");
    }

    TriggerExecute(auto_libNtve_gf__BB_HPBarChange_Trigger, false, false);
}

bool auto_libNtve_gf__BB_HPBarChange_TriggerFunc (bool testConds, bool runActions) {
    int lp_barID = auto_libNtve_gf__BB_HPBarChange_lp_barID;

    // Variable Declarations
    fixed lv_current;
    fixed lv_max;
    text lv_label;
    int lv_newWidth;
    int lv_width;

    // Variable Initialization
    lv_current = 0.0;
    lv_max = 0.0;
    lv_label = null;
    lv_newWidth = 0;
    lv_width = 0;

    // Implementation
    if (((libNtve_gv__BB_HPOldWidth[lp_barID] < 0) || (libNtve_gv__BB_HPOldWidth[lp_barID] > libNtve_gf__BB_HPBarWidth(lp_barID)))) {
        libNtve_gv__BB_HPOldWidth[lp_barID] = libNtve_gf__BB_HPBarWidth(lp_barID);
    }
    else {
    }
    lv_newWidth = libNtve_gf__BB_HPBarCurrentWidth(lp_barID);
    lv_width = (libNtve_gv__BB_HPOldWidth[lp_barID] - lv_newWidth);
    libNtve_gv__BB_HPOldWidth[lp_barID] = lv_newWidth;
    if ((lv_width >= 4)) {
        DialogControlCreate(libNtve_gv__BB_Dialog[lp_barID], c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(78.43, 78.43, 0.00), libNtve_gv__BB_Players[lp_barID]);
        DialogControlSetSize(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], lv_width, libNtve_gf__BB_HPBarHeight(lp_barID));
        DialogControlSetPositionRelative(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_barID], c_anchorLeft, lv_newWidth, 0);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.0, 60.0);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.2, 20.0);
        Wait(0.2, c_timeReal);
        DialogControlFadeTransparency(DialogControlLastCreated(), libNtve_gv__BB_Players[lp_barID], 0.8, 100.0);
        Wait(0.8, c_timeReal);
        DialogControlDestroy(DialogControlLastCreated());
    }
    else {
    }
    return true;
}

void libNtve_gf_DisplayBossBar (int lp_bossBarID, string lp_portrait, text lp_title, int lp_max, playergroup lp_players) {
    // Variable Declarations
    const int lv_width = 800;
    const int lv_height = 100;

    // Variable Initialization

    // Implementation
    if ((lp_bossBarID <= 0)) {
        return ;
    }
    else {
    }
    if ((lp_bossBarID > libNtve_gv__BBC_BossBarMaxCount)) {
        UIDisplayMessage(lp_players, c_messageAreaSubtitle, (StringExternal("Param/Value/lib_Ntve_13ECDD4D") + IntToText(libNtve_gv__BBC_BossBarMaxCount) + StringExternal("Param/Value/lib_Ntve_84FA80EA")));
        return ;
    }
    else {
    }
    libNtve_gv__BB_Players[lp_bossBarID] = lp_players;
    libNtve_gv__BB_Portraits[lp_bossBarID] = lp_portrait;
    libNtve_gv__BB_Title[lp_bossBarID] = lp_title;
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    libNtve_gf_SetBossBarMaximumValue(lp_bossBarID, lp_max, false);
    libNtve_gf_SetBossBarCurrentValue(lp_bossBarID, lp_max, false);
    libNtve_gv__BB_HPOldWidth[lp_bossBarID] = -1;
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        DialogCreate(libNtve_gv__BB_BarWidth[lp_bossBarID], libNtve_gv__BB_BarHeight[lp_bossBarID], c_anchorTop, 0, 50, false);
        libNtve_gv__BB_Dialog[lp_bossBarID] = DialogLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgBar[lp_bossBarID] = DialogControlLastCreated();
        DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_light.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_BGImgPortrait[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_frame_unit.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_PortraitImage[lp_bossBarID] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_TitleLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarTitle", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpBorderImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_frame.dds", PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpFullImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gv__BB_HpCurrentImage[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_mission_leaderboard_progressbar_fill.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 100.00, 0.00), PlayerGroupAll());
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
        libNtve_gv__BB_HpLabel[lp_bossBarID] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "BossBarHP", PlayerGroupAll());
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 520, PlayerGroupAll());
    }
    else {
    }
    libNtve_gf_RefreshBossBar(lp_bossBarID);
    DialogSetVisible(libNtve_gv__BB_Dialog[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], true);
}

void libNtve_gf_SetBossBarMaximumValue (int lp_bossBarID, int lp_max, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_MaxValue[lp_bossBarID] = IntToFixed(lp_max);
    if ((libNtve_gv__BB_MaxValue[lp_bossBarID] <= 0.0)) {
        libNtve_gv__BB_MaxValue[lp_bossBarID] = 1.0;
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarCurrentValue (int lp_bossBarID, int lp_current, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_CurrentValue[lp_bossBarID] = IntToFixed(lp_current);
    if ((libNtve_gv__BB_CurrentValue[lp_bossBarID] < 0.0)) {
        libNtve_gv__BB_CurrentValue[lp_bossBarID] = 0.0;
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = null;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarBoss (int lp_bossBarID, unit lp_boss, bool lp_refresh) {
    // Implementation
    if ((lp_boss != null)) {
        TriggerEnable(libNtve_gt__BB_BossHPChanged, true);
    }
    else {
    }
    libNtve_gv__BB_Boss[lp_bossBarID] = lp_boss;
    libNtve_gv__BB_MaxValue[lp_bossBarID] = 0.0;
    libNtve_gv__BB_CurrentValue[lp_bossBarID] = 0.0;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_SetBossBarRace (int lp_bossBarID, int lp_race, bool lp_refresh) {
    // Implementation
    libNtve_gv__BB_Race[lp_bossBarID] = lp_race;
    if ((lp_refresh == true)) {
        libNtve_gf_RefreshBossBar(lp_bossBarID);
    }
    else {
    }
}

void libNtve_gf_MoveBossBar (int lp_bossBarID, int lp_anchor, int lp_offsetX, int lp_offsetY) {
    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetPosition(libNtve_gv__BB_Dialog[lp_bossBarID], lp_anchor, lp_offsetX, lp_offsetY);
}

void libNtve_gf_ShowHideBossBar (bool lp_showHide, int lp_bossBarID) {
    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogSetVisible(libNtve_gv__BB_Dialog[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], lp_showHide);
}

void libNtve_gf_RefreshBossBar (int lp_bossBarID) {
    int auto070B1B5C_val;

    // Implementation
    if ((libNtve_gv__BB_Dialog[lp_bossBarID] == c_invalidDialogId)) {
        return ;
    }
    else {
    }
    DialogControlSetSize(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitBorderWidth(lp_bossBarID), libNtve_gf__BB_PortraitBorderHeight(lp_bossBarID));
    DialogControlSetPosition(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, 18, 1);
    libNtve_gf_SetDialogItemImage(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Portraits[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID]);
    DialogControlSetSize(libNtve_gv__BB_PortraitImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_PortraitWidth(lp_bossBarID), libNtve_gf__BB_PortraitHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_PortraitImage[lp_bossBarID], PlayerGroupAll(), c_anchorCenter, libNtve_gv__BB_BGImgPortrait[lp_bossBarID], c_anchorCenter, 0, 0);
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Title[lp_bossBarID], PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_TitleBarWidth(lp_bossBarID), libNtve_gf__BB_TitleBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_TitleLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTopLeft, libNtve_gv__BB_PortraitImage[lp_bossBarID], c_anchorTopRight, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpBorderImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorTop, libNtve_gv__BB_TitleLabel[lp_bossBarID], c_anchorBottom, 0, -12);
    libNtve_gf_SetDialogItemText(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gf__BB_HPBarFormatLabel(lp_bossBarID), PlayerGroupAll());
    DialogControlSetSize(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBorderWidth(lp_bossBarID), libNtve_gf__BB_HPBorderHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpLabel[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 1);
    DialogControlSetSize(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpFullImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorCenter, libNtve_gv__BB_HpBorderImage[lp_bossBarID], c_anchorCenter, 0, 0);
    DialogControlSetSize(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], libNtve_gf__BB_HPBarCurrentWidth(lp_bossBarID), libNtve_gf__BB_HPBarHeight(lp_bossBarID));
    DialogControlSetPositionRelative(libNtve_gv__BB_HpCurrentImage[lp_bossBarID], libNtve_gv__BB_Players[lp_bossBarID], c_anchorLeft, libNtve_gv__BB_HpFullImage[lp_bossBarID], c_anchorLeft, 0, 0);
    libNtve_gf__BB_HPBarChange(lp_bossBarID);
    auto070B1B5C_val = libNtve_gv__BB_Race[lp_bossBarID];
    if (auto070B1B5C_val == 0) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleTerran", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(21.18, 82.35, 49.80), PlayerGroupAll());
    }
    else if (auto070B1B5C_val == 1) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleProtoss", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(24.71, 70.98, 89.41), PlayerGroupAll());
    }
    else if (auto070B1B5C_val == 2) {
        libNtve_gf_SetDialogItemStyle(libNtve_gv__BB_TitleLabel[lp_bossBarID], "BossBarTitleZerg", PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgBar[lp_bossBarID], Color(100.00, 50.20, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_BGImgPortrait[lp_bossBarID], Color(100.00, 50.20, 0.00), PlayerGroupAll());
        libNtve_gf_SetDialogItemColor(libNtve_gv__BB_HpBorderImage[lp_bossBarID], Color(71.37, 32.16, 8.63), PlayerGroupAll());
    }
    else {
    }
}

void libNtve_gf__StoreGameUIVisibleStates (bool lp_storeRestore, playergroup lp_players) {
    playergroup auto1380166C_g;
    int auto1380166C_p;
    int auto47DD0165_as;
    int auto47DD0165_ae;
    int auto47DD0165_ai;

    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization
    lv_player = 0;
    lv_index = 0;

    // Implementation
    auto1380166C_g = lp_players;
    auto1380166C_p = 1;
    while (auto1380166C_p <= PlayerGroupCount(auto1380166C_g)) {
        lv_player = PlayerGroupPlayer(auto1380166C_g, auto1380166C_p);
        auto47DD0165_as = c_syncFrameTypeFirst;
        auto47DD0165_ae = c_syncFrameTypeLast;
        auto47DD0165_ai = 1;
        lv_index = auto47DD0165_as;
        if (auto47DD0165_ai > 0 || (auto47DD0165_ai == 0 && auto47DD0165_as < auto47DD0165_ae)) {
            while (lv_index <= auto47DD0165_ae) {
                if ((lp_storeRestore == true)) {
                    if ((UIFrameVisible(lv_player, lv_index) == true)) {
                        libNtve_gv__GameUIVisible[lv_player][lv_index] = true;
                    }
                    else {
                        libNtve_gv__GameUIVisible[lv_player][lv_index] = false;
                    }
                }
                else {
                    UISetFrameVisible(PlayerGroupSingle(lv_player), lv_index, libNtve_gv__GameUIVisible[lv_player][lv_index]);
                }
                lv_index = lv_index + auto47DD0165_ai;
            }
        }
        else if (auto47DD0165_ai < 0 || (auto47DD0165_ai == 0 && auto47DD0165_ae < auto47DD0165_as)) {
            while (lv_index >= auto47DD0165_ae) {
                if ((lp_storeRestore == true)) {
                    if ((UIFrameVisible(lv_player, lv_index) == true)) {
                        libNtve_gv__GameUIVisible[lv_player][lv_index] = true;
                    }
                    else {
                        libNtve_gv__GameUIVisible[lv_player][lv_index] = false;
                    }
                }
                else {
                    UISetFrameVisible(PlayerGroupSingle(lv_player), lv_index, libNtve_gv__GameUIVisible[lv_player][lv_index]);
                }
                lv_index = lv_index + auto47DD0165_ai;
            }
        }
        if (lv_player == PlayerGroupPlayer(auto1380166C_g, auto1380166C_p)) {
            auto1380166C_p = auto1380166C_p + 1;
        }
    }
}

void libNtve_gf_HideGameUI (bool lp_showHide, playergroup lp_players) {
    playergroup auto659B6716_g;
    int auto659B6716_p;
    int autoE2F9A9EF_as;
    int autoE2F9A9EF_ae;
    int autoE2F9A9EF_ai;
    playergroup autoE7F18298_g;
    int autoE7F18298_p;

    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization
    lv_player = 0;
    lv_index = 0;

    // Implementation
    if ((lp_showHide == true)) {
        autoE7F18298_g = lp_players;
        autoE7F18298_p = 1;
        while (autoE7F18298_p <= PlayerGroupCount(autoE7F18298_g)) {
            lv_player = PlayerGroupPlayer(autoE7F18298_g, autoE7F18298_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_player) == false) && (libNtve_gf_PlayerInStoryMode(lv_player) == false)) {
                UISetMode(PlayerGroupSingle(lv_player), c_uiModeConsole, c_transitionDurationImmediate);
            }
            else {
            }
            if (lv_player == PlayerGroupPlayer(autoE7F18298_g, autoE7F18298_p)) {
                autoE7F18298_p = autoE7F18298_p + 1;
            }
        }
        libNtve_gf__StoreGameUIVisibleStates(false, lp_players);
    }
    else {
        auto659B6716_g = lp_players;
        auto659B6716_p = 1;
        while (auto659B6716_p <= PlayerGroupCount(auto659B6716_g)) {
            lv_player = PlayerGroupPlayer(auto659B6716_g, auto659B6716_p);
            if ((libNtve_gf_PlayerInCinematicMode(lv_player) == false) && (libNtve_gf_PlayerInStoryMode(lv_player) == false)) {
                UISetMode(PlayerGroupSingle(lv_player), c_uiModeFullscreen, c_transitionDurationImmediate);
            }
            else {
            }
            if (lv_player == PlayerGroupPlayer(auto659B6716_g, auto659B6716_p)) {
                auto659B6716_p = auto659B6716_p + 1;
            }
        }
        libNtve_gf__StoreGameUIVisibleStates(true, lp_players);
        autoE2F9A9EF_as = c_syncFrameTypeFirst;
        autoE2F9A9EF_ae = c_syncFrameTypeLast;
        autoE2F9A9EF_ai = 1;
        lv_index = autoE2F9A9EF_as;
        if (autoE2F9A9EF_ai > 0 || (autoE2F9A9EF_ai == 0 && autoE2F9A9EF_as < autoE2F9A9EF_ae)) {
            while (lv_index <= autoE2F9A9EF_ae) {
                UISetFrameVisible(lp_players, lv_index, false);
                lv_index = lv_index + autoE2F9A9EF_ai;
            }
        }
        else if (autoE2F9A9EF_ai < 0 || (autoE2F9A9EF_ai == 0 && autoE2F9A9EF_ae < autoE2F9A9EF_as)) {
            while (lv_index >= autoE2F9A9EF_ae) {
                UISetFrameVisible(lp_players, lv_index, false);
                lv_index = lv_index + autoE2F9A9EF_ai;
            }
        }
    }
}

text libNtve_gf_FormatTipTitle (text lp_title, int lp_type) {
    int auto17A93AD3_val;

    // Variable Declarations
    text lv_colorCode1;
    text lv_colorCode2;
    text lv_colorCode3;
    text lv_colorCode4;

    // Variable Initialization
    lv_colorCode1 = StringExternal("Param/Value/lib_Ntve_C6CD21F3");
    lv_colorCode2 = StringExternal("Param/Value/lib_Ntve_B237EA1F");
    lv_colorCode3 = StringExternal("Param/Value/lib_Ntve_6FA768D4");
    lv_colorCode4 = StringExternal("Param/Value/lib_Ntve_207B352D");

    // Implementation
    lv_colorCode1 = StringExternal("Param/Value/lib_Ntve_17346975");
    lv_colorCode2 = StringExternal("Param/Value/lib_Ntve_9196C077");
    lv_colorCode3 = StringExternal("Param/Value/lib_Ntve_7B619F3C");
    lv_colorCode4 = StringExternal("Param/Value/lib_Ntve_3A5DC4AF");
    auto17A93AD3_val = lp_type;
    if (auto17A93AD3_val == 1) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_0DBBF5F5") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else if (auto17A93AD3_val == 2) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_18619CE6") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else if (auto17A93AD3_val == 3) {
        return (lv_colorCode1 + StringExternal("Param/Value/lib_Ntve_CD27226C") + lv_colorCode2 + lv_colorCode3 + lp_title + lv_colorCode4);
    }
    else {
    }
    return (lv_colorCode3 + lp_title + lv_colorCode4);
}

void libNtve_gf_CreateUnitsWithDefaultFacing (int lp_count, string lp_type, int lp_style, int lp_player, point lp_p) {
    // Variable Declarations
    fixed lv_angle;

    // Variable Initialization
    lv_angle = 0.0;

    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "FlagArray[1]", lp_player) == "1")) {
        lv_angle = libNtve_gf_RandomAngle();
    }
    else {
        lv_angle = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, lp_type, "Facing", lp_player));
        lv_angle=lv_angle - 90.0;
    }
    UnitCreate(lp_count, lp_type, lp_style, lp_player, lp_p, lv_angle);
}

void libNtve_gf_CreateUnitsAtPoint2 (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_p) {
    // Implementation
    UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_p, PointGetFacing(lp_p));
}

unitgroup libNtve_gf_UnitCreateFacingPoint (int lp_count, string lp_type, int lp_flags, int lp_player, point lp_pos, point lp_facing) {
    // Implementation
    UnitCreate(lp_count, lp_type, lp_flags, lp_player, lp_pos, AngleBetweenPoints(lp_pos, lp_facing));
    return UnitLastCreatedGroup();
}

void libNtve_gf_ReplaceUnit (unit lp_unit, string lp_unitType, int lp_options) {
    int auto481D3762_val;

    // Variable Declarations
    int lv_owner;
    point lv_position;
    fixed lv_facing;
    unit lv_newUnit;

    // Variable Initialization
    lv_owner = 0;
    lv_position = null;
    lv_facing = 0.0;
    lv_newUnit = null;

    // Implementation
    if (((lp_unit == null) || (UnitGetType(lp_unit) == lp_unitType))) {
        return ;
    }
    else {
    }
    lv_owner = UnitGetOwner(lp_unit);
    lv_position = UnitGetPosition(lp_unit);
    lv_facing = UnitGetFacing(lp_unit);
    libNtve_gf_ShowHideUnit(lp_unit, false);
    UnitCreate(1, lp_unitType, 0, lv_owner, lv_position, lv_facing);
    lv_newUnit = UnitLastCreated();
    auto481D3762_val = lp_options;
    if (auto481D3762_val == 0) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLife, UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropShields, UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergy, UnitGetPropertyFixed(lp_unit, c_unitPropEnergy, c_unitPropCurrent));
    }
    else if (auto481D3762_val == 1) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLifePercent, UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent));
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropShieldsMax, c_unitPropCurrent) > 0.0)) {
            UnitSetPropertyFixed(lv_newUnit, c_unitPropShieldsPercent, UnitGetPropertyFixed(lp_unit, c_unitPropShieldsPercent, c_unitPropCurrent));
        }
        else {
        }
        if ((UnitGetPropertyFixed(lp_unit, c_unitPropEnergyMax, c_unitPropCurrent) > 0.0)) {
            UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergyPercent, UnitGetPropertyFixed(lp_unit, c_unitPropEnergyPercent, c_unitPropCurrent));
        }
        else {
        }
    }
    else if (auto481D3762_val == 3) {
        UnitSetPropertyFixed(lv_newUnit, c_unitPropLife, UnitGetPropertyFixed(lv_newUnit, c_unitPropLifeMax, c_unitPropNormal));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropShields, UnitGetPropertyFixed(lv_newUnit, c_unitPropShieldsMax, c_unitPropNormal));
        UnitSetPropertyFixed(lv_newUnit, c_unitPropEnergy, UnitGetPropertyFixed(lv_newUnit, c_unitPropEnergyMax, c_unitPropNormal));
    }
    else {
    }
    UnitRemove(lp_unit);
    libNtve_gv_lastReplacedUnit = lv_newUnit;
}

unit libNtve_gf_LastReplacedUnit () {
    // Implementation
    return libNtve_gv_lastReplacedUnit;
}

void libNtve_gf_RescueUnit (unit lp_unit, int lp_player, bool lp_changeColor) {
    // Variable Declarations
    fixed lv_lifePercent;
    fixed lv_shieldsPercent;
    fixed lv_energyPercent;

    // Variable Initialization
    lv_lifePercent = 0.0;
    lv_shieldsPercent = 0.0;
    lv_energyPercent = 0.0;

    // Implementation
    SoundPlay(SoundLink("UI_TerranRescueUnit", 0), PlayerGroupSingle(lp_player), 100.0, 0.0);
    UnitFlashSelection(lp_unit, 0.4);
    lv_lifePercent = UnitGetPropertyFixed(lp_unit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_shieldsPercent = UnitGetPropertyFixed(lp_unit, c_unitPropShieldsPercent, c_unitPropCurrent);
    lv_energyPercent = UnitGetPropertyFixed(lp_unit, c_unitPropEnergyPercent, c_unitPropCurrent);
    UnitSetOwner(lp_unit, lp_player, lp_changeColor);
    UnitSetPropertyFixed(lp_unit, c_unitPropLifePercent, lv_lifePercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropShieldsPercent, lv_shieldsPercent);
    UnitSetPropertyFixed(lp_unit, c_unitPropEnergyPercent, lv_energyPercent);
}

void libNtve_gf_RescueUnit2 (unitgroup lp_unit, int lp_player, bool lp_changeColor) {
    unitgroup auto5209AAFA_g;
    int auto5209AAFA_u;

    // Variable Declarations
    unit lv_forUnit;

    // Variable Initialization
    lv_forUnit = null;

    // Implementation
    auto5209AAFA_g = lp_unit;
    auto5209AAFA_u = 1;
    while (auto5209AAFA_u <= UnitGroupCount(auto5209AAFA_g, c_unitCountAll)) {
        lv_forUnit = UnitGroupUnit(auto5209AAFA_g, auto5209AAFA_u);
        libNtve_gf_RescueUnit(lv_forUnit, lp_player, lp_changeColor);
        if (lv_forUnit == UnitGroupUnit(auto5209AAFA_g, auto5209AAFA_u)) {
            auto5209AAFA_u = auto5209AAFA_u + 1;
        }
    }
}

bool libNtve_gf_UnitGroupIsDead (unitgroup lp_units) {
    // Implementation
    return (UnitGroupCount(lp_units, c_unitCountAlive) == 0);
}

void libNtve_gf_MakeUnitFacePoint (unit lp_unit, point lp_point, fixed lp_duration) {
    // Implementation
    UnitSetFacing(lp_unit, AngleBetweenPoints(UnitGetPosition(lp_unit), lp_point), lp_duration);
}

void libNtve_gf_PauseUnit (unit lp_unit, bool lp_pauseUnpause) {
    // Implementation
    if ((lp_pauseUnpause == true)) {
        UnitSetState(lp_unit, c_unitStatePaused, true);
    }
    else {
        UnitSetState(lp_unit, c_unitStatePaused, false);
    }
}

void libNtve_gf_ShowHideUnit (unit lp_unit, bool lp_showHide) {
    // Implementation
    if ((lp_showHide == true)) {
        UnitSetState(lp_unit, c_unitStateHidden, false);
    }
    else {
        UnitSetState(lp_unit, c_unitStateHidden, true);
    }
}

void libNtve_gf_ShareVisionofUnit (unit lp_unit, bool lp_shareUnshare, int lp_player) {
    // Implementation
    if ((lp_shareUnshare == true)) {
        UnitBehaviorAddPlayer(lp_unit, "PermanentShareVision", lp_player, 1);
    }
    else {
        UnitBehaviorRemovePlayer(lp_unit, "PermanentShareVision", lp_player, 1);
    }
}

bool libNtve_gf_UnitIsPaused (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStatePaused);
}

bool libNtve_gf_UnitIsHidden (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateHidden);
}

bool libNtve_gf_UnitIsVisibleToPlayer (unit lp_unit, int lp_player) {
    // Implementation
    return UnitFilterMatch(lp_unit, lp_player, UnitFilter((1 << c_targetFilterVisible), 0, 0, 0));
}

bool libNtve_gf_UnitInRegion (unit lp_u, region lp_regioin) {
    // Implementation
    return RegionContainsPoint(lp_regioin, UnitGetPosition(lp_u));
}

void libNtve_gf_MakeUnitInvulnerable (unit lp_unit, bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        UnitSetState(lp_unit, c_unitStateInvulnerable, true);
    }
    else {
        UnitSetState(lp_unit, c_unitStateInvulnerable, false);
    }
}

void libNtve_gf_MakeUnitUncommandable (unit lp_unit, bool lp_option) {
    // Implementation
    if ((lp_option == true)) {
        UnitBehaviorAdd(lp_unit, "PermanentlyUncommandable", lp_unit, 1);
    }
    else {
        UnitBehaviorRemove(lp_unit, "PermanentlyUncommandable", 1);
    }
}

bool libNtve_gf_UnitIsInvulnerable (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateInvulnerable);
}

int libNtve_gf_UnitGetPropertyKills (unit lp_u, bool lp_current) {
    // Implementation
    return FixedToInt(UnitGetPropertyFixed(lp_u, c_unitPropKills, lp_current));
}

int libNtve_gf_UnitGetPropertyResources (unit lp_u, bool lp_current) {
    // Implementation
    return FixedToInt(UnitGetPropertyFixed(lp_u, c_unitPropResources, lp_current));
}

bool libNtve_gf_UnitMoverExists (string lp_unitType, string lp_mover) {
    // Variable Declarations
    int lv_invalidPlayer;

    // Variable Initialization
    lv_invalidPlayer = -1;

    // Implementation
    if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "Mover", lv_invalidPlayer) == lp_mover)) {
        return true;
    }
    else {
        return false;
    }
}

void libNtve_gf_UnitSetVariation (unit lp_unit, string lp_model, int lp_percent, string lp_textures) {
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_unit, libNtve_gf_ModelSwap(lp_model, lp_percent));
    if ((StringLength(lp_textures) > 0)) {
        libNtve_gf_SendActorMessageToUnit(lp_unit, MakeMsgTextureSelectBySlot("main", c_textureSlotComponentDefault, ("BestMatch " + lp_textures)));
    }
    else {
    }
}

void libNtve_gf_ChangeUnitDamage (unit lp_unit, int lp_takeDeal, int lp_option) {
    int autoFCC9BD29_val;
    int auto01104878_val;
    int autoAD3C10F2_val;
    int auto328DEC3D_val;

    // Implementation
    autoFCC9BD29_val = lp_takeDeal;
    if (autoFCC9BD29_val == 0) {
        UnitBehaviorRemove(lp_unit, "DamageTakenMega", 1);
        UnitBehaviorRemove(lp_unit, "DamageTakenMinimal", 1);
        UnitBehaviorRemove(lp_unit, "DamageTakenNone", 1);
    }
    else if (autoFCC9BD29_val == 1) {
        UnitBehaviorRemove(lp_unit, "DamageDealtMega", 1);
        UnitBehaviorRemove(lp_unit, "DamageDealtMinimal", 1);
        UnitBehaviorRemove(lp_unit, "DamageDealtNone", 1);
    }
    else {
        return ;
    }
    if ((lp_option == 0)) {
        return ;
    }
    else {
    }
    auto01104878_val = lp_takeDeal;
    if (auto01104878_val == 0) {
        autoAD3C10F2_val = lp_option;
        if (autoAD3C10F2_val == 3) {
            UnitBehaviorAdd(lp_unit, "DamageTakenMega", lp_unit, 1);
        }
        else if (autoAD3C10F2_val == 2) {
            UnitBehaviorAdd(lp_unit, "DamageTakenMinimal", lp_unit, 1);
        }
        else if (autoAD3C10F2_val == 1) {
            UnitBehaviorAdd(lp_unit, "DamageTakenNone", lp_unit, 1);
        }
        else {
        }
    }
    else if (auto01104878_val == 1) {
        auto328DEC3D_val = lp_option;
        if (auto328DEC3D_val == 3) {
            UnitBehaviorAdd(lp_unit, "DamageDealtMega", lp_unit, 1);
        }
        else if (auto328DEC3D_val == 2) {
            UnitBehaviorAdd(lp_unit, "DamageDealtMinimal", lp_unit, 1);
        }
        else if (auto328DEC3D_val == 1) {
            UnitBehaviorAdd(lp_unit, "DamageDealtNone", lp_unit, 1);
        }
        else {
        }
    }
    else {
        return ;
    }
}

unitfilter libNtve_gf_ConvertTargetFilterStringToUnitFilter (string lp_targetFilterString) {
    string auto4C294513_val;

    // Variable Declarations
    string lv_newTargetFilterString;
    int lv_wordIndex;
    string lv_wordOfFilterString;
    int lv_filterType;
    int lv_filterState;
    unitfilter lv_unitFilter;

    // Variable Initialization
    lv_newTargetFilterString = "";
    lv_wordIndex = 1;
    lv_wordOfFilterString = "";
    lv_filterType = c_targetFilterAir;
    lv_filterState = c_unitFilterRequired;
    lv_unitFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    lv_newTargetFilterString = StringReplaceWord(lp_targetFilterString, ",", " ", 0, c_stringCase);
    lv_newTargetFilterString = StringReplaceWord(lv_newTargetFilterString, ";", " DIV ", 0, c_stringCase);
    lv_wordOfFilterString = StringWord(lv_newTargetFilterString, 1);
    while ((lv_wordOfFilterString != "")) {
        if ((lv_wordOfFilterString == "DIV")) {
            lv_filterState = c_unitFilterExcluded;
        }
        else {
            if ((lv_wordOfFilterString != "-")) {
                auto4C294513_val = lv_wordOfFilterString;
                if (auto4C294513_val == "Air") {
                    lv_filterType = c_targetFilterAir;
                }
                else if (auto4C294513_val == "Ally") {
                    lv_filterType = c_targetFilterAlly;
                }
                else if (auto4C294513_val == "Armored") {
                    lv_filterType = c_targetFilterArmored;
                }
                else if (auto4C294513_val == "Biological") {
                    lv_filterType = c_targetFilterBiological;
                }
                else if (auto4C294513_val == "Buried") {
                    lv_filterType = c_targetFilterBuried;
                }
                else if (auto4C294513_val == "CanHaveEnergy") {
                    lv_filterType = c_targetFilterCanHaveEnergy;
                }
                else if (auto4C294513_val == "CanHaveShields") {
                    lv_filterType = c_targetFilterCanHaveShields;
                }
                else if (auto4C294513_val == "Cloaked") {
                    lv_filterType = c_targetFilterCloaked;
                }
                else if (auto4C294513_val == "Dead") {
                    lv_filterType = c_targetFilterDead;
                }
                else if (auto4C294513_val == "Destructible") {
                    lv_filterType = c_targetFilterDestructible;
                }
                else if (auto4C294513_val == "Enemy") {
                    lv_filterType = c_targetFilterEnemy;
                }
                else if (auto4C294513_val == "Ground") {
                    lv_filterType = c_targetFilterGround;
                }
                else if (auto4C294513_val == "Hallucination") {
                    lv_filterType = c_targetFilterHallucination;
                }
                else if (auto4C294513_val == "HarvestableResource") {
                    lv_filterType = c_targetFilterHarvestableResource;
                }
                else if (auto4C294513_val == "HasEnergy") {
                    lv_filterType = c_targetFilterHasEnergy;
                }
                else if (auto4C294513_val == "HasShields") {
                    lv_filterType = c_targetFilterHasShields;
                }
                else if (auto4C294513_val == "Hidden") {
                    lv_filterType = c_targetFilterHidden;
                }
                else if (auto4C294513_val == "Hover") {
                    lv_filterType = c_targetFilterHover;
                }
                else if (auto4C294513_val == "Invulnerable") {
                    lv_filterType = c_targetFilterInvulnerable;
                }
                else if (auto4C294513_val == "Item") {
                    lv_filterType = c_targetFilterItem;
                }
                else if (auto4C294513_val == "Light") {
                    lv_filterType = c_targetFilterLight;
                }
                else if (auto4C294513_val == "Massive") {
                    lv_filterType = c_targetFilterMassive;
                }
                else if (auto4C294513_val == "Mechanical") {
                    lv_filterType = c_targetFilterMechanical;
                }
                else if (auto4C294513_val == "Missile") {
                    lv_filterType = c_targetFilterMissile;
                }
                else if (auto4C294513_val == "Neutral") {
                    lv_filterType = c_targetFilterNeutral;
                }
                else if (auto4C294513_val == "Passive") {
                    lv_filterType = c_targetFilterPassive;
                }
                else if (auto4C294513_val == "Player") {
                    lv_filterType = c_targetFilterPlayer;
                }
                else if (auto4C294513_val == "PreventDefeat") {
                    lv_filterType = c_targetFilterPreventDefeat;
                }
                else if (auto4C294513_val == "PreventReveal") {
                    lv_filterType = c_targetFilterPreventReveal;
                }
                else if (auto4C294513_val == "Psionic") {
                    lv_filterType = c_targetFilterPsionic;
                }
                else if (auto4C294513_val == "RawResource") {
                    lv_filterType = c_targetFilterRawResource;
                }
                else if (auto4C294513_val == "Robotic") {
                    lv_filterType = c_targetFilterRobotic;
                }
                else if (auto4C294513_val == "Self") {
                    lv_filterType = c_targetFilterSelf;
                }
                else if (auto4C294513_val == "Stasis") {
                    lv_filterType = c_targetFilterStasis;
                }
                else if (auto4C294513_val == "Structure") {
                    lv_filterType = c_targetFilterStructure;
                }
                else if (auto4C294513_val == "Uncommandable") {
                    lv_filterType = c_targetFilterUncommandable;
                }
                else if (auto4C294513_val == "UnderConstruction") {
                    lv_filterType = c_targetFilterUnderConstruction;
                }
                else if (auto4C294513_val == "Visible") {
                    lv_filterType = c_targetFilterVisible;
                }
                else if (auto4C294513_val == "Worker") {
                    lv_filterType = c_targetFilterWorker;
                }
                else {
                }
                UnitFilterSetState(lv_unitFilter, lv_filterType, lv_filterState);
            }
            else {
            }
        }
        lv_wordIndex=lv_wordIndex + 1;
        lv_wordOfFilterString = StringWord(lv_newTargetFilterString, lv_wordIndex);
    }
    return lv_unitFilter;
}

bool libNtve_gf_UnitIsInsideTransport (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateInsideTransport);
}

bool libNtve_gf_UnitCanAttackUnit (unit lp_u, unit lp_s) {
    int auto761381D2_as;
    int auto761381D2_ae;
    int auto761381D2_ai;

    // Variable Declarations
    int lv_weapon;
    unitfilter lv_weaponFilter;

    // Variable Initialization
    lv_weapon = 0;
    lv_weaponFilter = UnitFilter(0, 0, 0, 0);

    // Implementation
    auto761381D2_as = 1;
    auto761381D2_ae = UnitWeaponCount(lp_u);
    auto761381D2_ai = 1;
    lv_weapon = auto761381D2_as;
    if (auto761381D2_ai > 0 || (auto761381D2_ai == 0 && auto761381D2_as < auto761381D2_ae)) {
        while (lv_weapon <= auto761381D2_ae) {
            lv_weaponFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_u, lv_weapon)), "TargetFilters", UnitGetOwner(lp_u)));
            if ((UnitWeaponIsEnabled(lp_u, lv_weapon) == true) && (UnitFilterMatch(lp_s, UnitGetOwner(lp_u), lv_weaponFilter) == true)) {
                return true;
            }
            else {
            }
            lv_weapon = lv_weapon + auto761381D2_ai;
        }
    }
    else if (auto761381D2_ai < 0 || (auto761381D2_ai == 0 && auto761381D2_ae < auto761381D2_as)) {
        while (lv_weapon >= auto761381D2_ae) {
            lv_weaponFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, (UnitWeaponGet(lp_u, lv_weapon)), "TargetFilters", UnitGetOwner(lp_u)));
            if ((UnitWeaponIsEnabled(lp_u, lv_weapon) == true) && (UnitFilterMatch(lp_s, UnitGetOwner(lp_u), lv_weaponFilter) == true)) {
                return true;
            }
            else {
            }
            lv_weapon = lv_weapon + auto761381D2_ai;
        }
    }
    return false;
}

bool libNtve_gf_UnitIsUnderConstruction (unit lp_u) {
    // Implementation
    return UnitTestState(lp_u, c_unitStateUnderConstruction);
}

void libNtve_gf_UnitRemoveChargeRegen (unit lp_inUnit, string lp_inCharge) {
    // Implementation
    UnitAddChargeRegen(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeRegen(lp_inUnit, lp_inCharge)));
}

void libNtve_gf_UnitAbilityRemoveChargeRegen (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Implementation
    UnitAbilityAddChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeRegen(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libNtve_gf_UnitRemoveCooldown (unit lp_inUnit, string lp_inCooldown) {
    // Implementation
    UnitAddCooldown(lp_inUnit, lp_inCooldown, (-1.0 * UnitGetCooldown(lp_inUnit, lp_inCooldown)));
}

void libNtve_gf_UnitAbilityRemoveCooldown (unit lp_inUnit, string lp_inAbil, string lp_inCooldown) {
    // Implementation
    UnitAbilityAddCooldown(lp_inUnit, lp_inAbil, lp_inCooldown, (-1.0 * UnitAbilityGetCooldown(lp_inUnit, lp_inAbil, lp_inCooldown)));
}

void libNtve_gf_UnitBehaviorRemoveCooldown (unit lp_inUnit, string lp_inBehavior, string lp_inCooldown) {
    // Implementation
    UnitBehaviorAddCooldown(lp_inUnit, lp_inBehavior, lp_inCooldown, (-1.0 * UnitBehaviorGetCooldown(lp_inUnit, lp_inBehavior, lp_inCooldown)));
}

void libNtve_gf_UnitBehaviorRemoveChargeRegen (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Implementation
    UnitBehaviorAddChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeRegen(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

void libNtve_gf_UnitRemoveChargeUsed (unit lp_inUnit, string lp_inCharge) {
    // Implementation
    UnitAddChargeUsed(lp_inUnit, lp_inCharge, (-1.0 * UnitGetChargeUsed(lp_inUnit, lp_inCharge)));
}

void libNtve_gf_UnitAbilityRemoveChargeUsed (unit lp_inUnit, string lp_inAbil, string lp_inCharge) {
    // Implementation
    UnitAbilityAddChargeUsed(lp_inUnit, lp_inAbil, lp_inCharge, (-1.0 * UnitAbilityGetChargeUsed(lp_inUnit, lp_inAbil, lp_inCharge)));
}

void libNtve_gf_UnitBehaviorRemoveChargeUsed (unit lp_inUnit, string lp_inBehavior, string lp_inCharge) {
    // Implementation
    UnitBehaviorAddChargeUsed(lp_inUnit, lp_inBehavior, lp_inCharge, (-1.0 * UnitBehaviorGetChargeUsed(lp_inUnit, lp_inBehavior, lp_inCharge)));
}

unitgroup libNtve_gf_ConvertUnitToUnitGroup (unit lp_unit) {
    // Variable Declarations
    unitgroup lv_group;

    // Variable Initialization
    lv_group = UnitGroupEmpty();

    // Implementation
    UnitGroupAdd(lv_group, lp_unit);
    return lv_group;
}

void libNtve_gf_AddUnitGroupToUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup) {
    unitgroup autoCAE39990_g;
    int autoCAE39990_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization
    lv_pickedUnit = null;

    // Implementation
    autoCAE39990_g = lp_sourceUnitGroup;
    autoCAE39990_u = 1;
    while (autoCAE39990_u <= UnitGroupCount(autoCAE39990_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(autoCAE39990_g, autoCAE39990_u);
        UnitGroupAdd(lp_targetUnitGroup, lv_pickedUnit);
        if (lv_pickedUnit == UnitGroupUnit(autoCAE39990_g, autoCAE39990_u)) {
            autoCAE39990_u = autoCAE39990_u + 1;
        }
    }
}

void libNtve_gf_RemoveUnitGroupFromUnitGroup (unitgroup lp_sourceUnitGroup, unitgroup lp_targetUnitGroup) {
    unitgroup auto153074BC_g;
    int auto153074BC_u;

    // Variable Declarations
    unit lv_pickedUnit;

    // Variable Initialization
    lv_pickedUnit = null;

    // Implementation
    auto153074BC_g = lp_sourceUnitGroup;
    auto153074BC_u = 1;
    while (auto153074BC_u <= UnitGroupCount(auto153074BC_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(auto153074BC_g, auto153074BC_u);
        UnitGroupRemove(lp_targetUnitGroup, lv_pickedUnit);
        if (lv_pickedUnit == UnitGroupUnit(auto153074BC_g, auto153074BC_u)) {
            auto153074BC_u = auto153074BC_u + 1;
        }
    }
}

unit libNtve_gf_ClosestUnitToPoint (point lp_point, unitgroup lp_group) {
    unitgroup auto9FF4A9A2_g;
    int auto9FF4A9A2_u;

    // Variable Declarations
    unit lv_pickedUnit;
    unit lv_closestUnit;
    fixed lv_distance;
    fixed lv_distanceShortest;
    point lv_unitLocation;
    fixed lv_xDiff;
    fixed lv_yDiff;

    // Variable Initialization
    lv_pickedUnit = null;
    lv_closestUnit = null;
    lv_distance = 0.0;
    lv_distanceShortest = 0.0;
    lv_unitLocation = null;
    lv_xDiff = 0.0;
    lv_yDiff = 0.0;

    // Implementation
    lv_distanceShortest = -1.0;
    lv_closestUnit = null;
    auto9FF4A9A2_g = lp_group;
    auto9FF4A9A2_u = 1;
    while (auto9FF4A9A2_u <= UnitGroupCount(auto9FF4A9A2_g, c_unitCountAll)) {
        lv_pickedUnit = UnitGroupUnit(auto9FF4A9A2_g, auto9FF4A9A2_u);
        lv_unitLocation = UnitGetPosition(lv_pickedUnit);
        lv_xDiff = (PointGetX(lv_unitLocation) - PointGetX(lp_point));
        lv_yDiff = (PointGetY(lv_unitLocation) - PointGetY(lp_point));
        lv_distance = ((lv_xDiff * lv_xDiff) + (lv_yDiff * lv_yDiff));
        if (((lv_distanceShortest < 0) || (lv_distance < lv_distanceShortest))) {
            lv_distanceShortest = lv_distance;
            lv_closestUnit = lv_pickedUnit;
        }
        else {
        }
        if (lv_pickedUnit == UnitGroupUnit(auto9FF4A9A2_g, auto9FF4A9A2_u)) {
            auto9FF4A9A2_u = auto9FF4A9A2_u + 1;
        }
    }
    return lv_closestUnit;
}

point libNtve_gf_CenterOfUnitGroup (unitgroup lp_unitGroup) {
    unitgroup autoC1C95F67_g;
    int autoC1C95F67_u;

    // Variable Declarations
    unit lv_forUnit;
    point lv_unitLocation;
    fixed lv_xSum;
    fixed lv_ySum;
    int lv_count;

    // Variable Initialization
    lv_forUnit = null;
    lv_unitLocation = null;
    lv_xSum = 0.0;
    lv_ySum = 0.0;
    lv_count = 0;

    // Implementation
    lv_xSum = 0.0;
    lv_ySum = 0.0;
    lv_count = 0;
    autoC1C95F67_g = lp_unitGroup;
    autoC1C95F67_u = 1;
    while (autoC1C95F67_u <= UnitGroupCount(autoC1C95F67_g, c_unitCountAll)) {
        lv_forUnit = UnitGroupUnit(autoC1C95F67_g, autoC1C95F67_u);
        lv_unitLocation = UnitGetPosition(lv_forUnit);
        lv_xSum = (lv_xSum + PointGetX(lv_unitLocation));
        lv_ySum = (lv_ySum + PointGetY(lv_unitLocation));
        lv_count = (lv_count + 1);
        if (lv_forUnit == UnitGroupUnit(autoC1C95F67_g, autoC1C95F67_u)) {
            autoC1C95F67_u = autoC1C95F67_u + 1;
        }
    }
    if ((lv_count == 0)) {
        return null;
    }
    else {
        return Point((lv_xSum / IntToFixed(lv_count)), (lv_ySum / IntToFixed(lv_count)));
    }
}

void libNtve_gf_ShowHidePlacementModels (bool lp_show) {
    // Implementation
    if ((lp_show == true)) {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal ShowPlacement");
    }
    else {
        libNtve_gf_SendActorMessageToGameRegion(RegionEntireMap(), "Signal HidePlacement");
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ScreenButton Clicked
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_ScreenButtonClicked_Func (bool testConds, bool runActions) {
    int auto6600C605_as;
    int auto6600C605_ae;
    int auto6600C605_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6600C605_as = 1;
    auto6600C605_ae = libNtve_gv_c_ScreenButtonMaxCount;
    auto6600C605_ai = 1;
    lv_index = auto6600C605_as;
    if (auto6600C605_ai > 0 || (auto6600C605_ai == 0 && auto6600C605_as < auto6600C605_ae)) {
        while (lv_index <= auto6600C605_ae) {
            if ((EventDialogControl() == libNtve_gv_screenButtons[lv_index])) {
                TriggerExecute(libNtve_gv_screenButtonCallbacks[lv_index], true, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto6600C605_ai;
        }
    }
    else if (auto6600C605_ai < 0 || (auto6600C605_ai == 0 && auto6600C605_ae < auto6600C605_as)) {
        while (lv_index >= auto6600C605_ae) {
            if ((EventDialogControl() == libNtve_gv_screenButtons[lv_index])) {
                TriggerExecute(libNtve_gv_screenButtonCallbacks[lv_index], true, false);
                return true;
            }
            else {
            }
            lv_index = lv_index + auto6600C605_ai;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_ScreenButtonClicked_Init () {
    libNtve_gt_ScreenButtonClicked = TriggerCreate("libNtve_gt_ScreenButtonClicked_Func");
    TriggerAddEventDialogControl(libNtve_gt_ScreenButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flash Screen Button
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_FlashScreenButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iD;
    fixed lv_flashTime;
    fixed lv_flashTimeHalf;
    color lv_color1;
    color lv_color2;
    int lv_image;

    // Variable Initialization
    lv_iD = 0;
    lv_flashTime = 0.0;
    lv_flashTimeHalf = 0.0;
    lv_color1 = Color(0,0,0);
    lv_color2 = Color(0,0,0);
    lv_image = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_iD = libNtve_gv_tP_FlashScreenButtonID;
    lv_flashTime = libNtve_gv_tP_FlashScreenButtonFlashTime;
    lv_color1 = libNtve_gv_tP_FlashScreenButtonColor1;
    lv_color2 = libNtve_gv_tP_FlashScreenButtonColor2;
    lv_flashTimeHalf = (lv_flashTime / 2.0);
    if (((lv_flashTime <= 0.0) || (lv_flashTimeHalf <= 0.0))) {
        return true;
    }
    else {
    }
    while (!((libNtve_gv_screenButtonsFlashStopping[lv_iD] == false))) {
        Wait(0.125, c_timeReal);
    }
    if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == true))) {
        return true;
    }
    else {
    }
    libNtve_gv_screenButtonsFlashing[lv_iD] = true;
    while (true) {
        if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == false) || (libNtve_gv_screenButtonsFlashStopping[lv_iD] == true))) {
            break;
        }
        else {
        }
        libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingBorderType[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingBorderImage[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsFlashingHoverImage[lv_iD], PlayerGroupAll());
        Wait(lv_flashTimeHalf, c_timeReal);
        if (((libNtve_gf_ScreenButtonDialog(lv_iD) == c_invalidDialogId) || (libNtve_gv_screenButtonsFlashing[lv_iD] == false) || (libNtve_gv_screenButtonsFlashStopping[lv_iD] == true))) {
            break;
        }
        else {
        }
        libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderType[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderImage[lv_iD], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsHoverImage[lv_iD], PlayerGroupAll());
        Wait(lv_flashTimeHalf, c_timeReal);
    }
    libNtve_gv_screenButtonsFlashing[lv_iD] = false;
    libNtve_gv_screenButtonsFlashStopping[lv_iD] = false;
    libNtve_gf_SetDialogItemImageType(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderType[lv_iD], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsBorderImage[lv_iD], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(libNtve_gf_ScreenButton(lv_iD), libNtve_gv_screenButtonsHoverImage[lv_iD], PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_FlashScreenButton_Init () {
    libNtve_gt_FlashScreenButton = TriggerCreate("libNtve_gt_FlashScreenButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pulse Screen Image
//--------------------------------------------------------------------------------------------------
bool libNtve_gt_PulseScreenImage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_screenImageID;
    fixed lv_period;
    fixed lv_transparency1;
    fixed lv_transparency2;
    fixed lv_halfPeriod;

    // Variable Initialization
    lv_screenImageID = 0;
    lv_period = 0.0;
    lv_transparency1 = 0.0;
    lv_transparency2 = 0.0;
    lv_halfPeriod = 0.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_screenImageID = libNtve_gv_tP_PulseScreenImageID;
    lv_period = libNtve_gv_tP_PulseScreenImagePeriod;
    lv_transparency1 = libNtve_gv_tP_PulseScreenImageTransparency1;
    lv_transparency2 = libNtve_gv_tP_PulseScreenImageTransparency2;
    if (((lv_period <= 0.0) || (libNtve_gv_screenImageDialogs[lv_screenImageID] == c_invalidDialogId) || (libNtve_gv_screenImagePulsing[lv_screenImageID] == true))) {
        return true;
    }
    else {
    }
    libNtve_gv_screenImagePulsing[lv_screenImageID] = true;
    lv_halfPeriod = (lv_period / 2.0);
    libNtve_gf_HideScreenImage(true, lv_screenImageID);
    DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), 0.0, lv_transparency1);
    while (true) {
        DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), lv_halfPeriod, lv_transparency2);
        Wait(lv_halfPeriod, c_timeGame);
        if ((libNtve_gv_screenImagePulsing[lv_screenImageID] == false)) {
            return true;
        }
        else {
        }
        DialogControlFadeTransparency(libNtve_gv_screenImageDialogImages[lv_screenImageID], PlayerGroupAll(), lv_halfPeriod, lv_transparency1);
        Wait(lv_halfPeriod, c_timeGame);
        if ((libNtve_gv_screenImagePulsing[lv_screenImageID] == false)) {
            return true;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt_PulseScreenImage_Init () {
    libNtve_gt_PulseScreenImage = TriggerCreate("libNtve_gt_PulseScreenImage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Map Initialization
//--------------------------------------------------------------------------------------------------
bool libNtve_gt__MapInitialization_Func (bool testConds, bool runActions) {
    playergroup autoF196A52B_g;
    int autoF196A52B_p;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = 0;

    // Actions
    if (!runActions) {
        return true;
    }

    autoF196A52B_g = PlayerGroupAll();
    autoF196A52B_p = 1;
    while (autoF196A52B_p <= PlayerGroupCount(autoF196A52B_g)) {
        lv_player = PlayerGroupPlayer(autoF196A52B_g, autoF196A52B_p);
        libNtve_gv__GameTimer[lv_player] = TimerCreate();
        TimerStart(libNtve_gv__GameTimer[lv_player], c_timerDurationInfinite, false, c_timeGame);
        if ((libNtve_gf_PlayerInCinematicMode(lv_player) == true)) {
            TimerPause(libNtve_gv__GameTimer[lv_player], true);
        }
        else {
        }
        if (lv_player == PlayerGroupPlayer(autoF196A52B_g, autoF196A52B_p)) {
            autoF196A52B_p = autoF196A52B_p + 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt__MapInitialization_Init () {
    libNtve_gt__MapInitialization = TriggerCreate("libNtve_gt__MapInitialization_Func");
    TriggerAddEventMapInit(libNtve_gt__MapInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _BB_BossHPChanged
//--------------------------------------------------------------------------------------------------
bool libNtve_gt__BB_BossHPChanged_Func (bool testConds, bool runActions) {
    int auto8BB89956_as;
    int auto8BB89956_ae;
    int auto8BB89956_ai;

    // Variable Declarations
    int lv_index;
    bool lv_bossSet;

    // Variable Initialization
    lv_index = 0;
    lv_bossSet = false;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8BB89956_as = 1;
    auto8BB89956_ae = libNtve_gv__BBC_BossBarMaxCount;
    auto8BB89956_ai = 1;
    lv_index = auto8BB89956_as;
    if (auto8BB89956_ai > 0 || (auto8BB89956_ai == 0 && auto8BB89956_as < auto8BB89956_ae)) {
        while (lv_index <= auto8BB89956_ae) {
            if ((libNtve_gv__BB_Boss[lv_index] == EventUnit())) {
                libNtve_gf_RefreshBossBar(lv_index);
            }
            else {
            }
            if ((libNtve_gv__BB_Boss[lv_index] != null)) {
                lv_bossSet = true;
            }
            else {
            }
            lv_index = lv_index + auto8BB89956_ai;
        }
    }
    else if (auto8BB89956_ai < 0 || (auto8BB89956_ai == 0 && auto8BB89956_ae < auto8BB89956_as)) {
        while (lv_index >= auto8BB89956_ae) {
            if ((libNtve_gv__BB_Boss[lv_index] == EventUnit())) {
                libNtve_gf_RefreshBossBar(lv_index);
            }
            else {
            }
            if ((libNtve_gv__BB_Boss[lv_index] != null)) {
                lv_bossSet = true;
            }
            else {
            }
            lv_index = lv_index + auto8BB89956_ai;
        }
    }
    if ((lv_bossSet == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libNtve_gt__BB_BossHPChanged_Init () {
    libNtve_gt__BB_BossHPChanged = TriggerCreate("libNtve_gt__BB_BossHPChanged_Func");
    TriggerEnable(libNtve_gt__BB_BossHPChanged, false);
    TriggerAddEventUnitProperty(libNtve_gt__BB_BossHPChanged, null, c_unitPropLife);
    TriggerAddEventUnitProperty(libNtve_gt__BB_BossHPChanged, null, c_unitPropShields);
}

void libNtve_InitTriggers () {
    libNtve_gt_ScreenButtonClicked_Init();
    libNtve_gt_FlashScreenButton_Init();
    libNtve_gt_PulseScreenImage_Init();
    libNtve_gt__MapInitialization_Init();
    libNtve_gt__BB_BossHPChanged_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void libNtve_InitLib () {
    libNtve_InitVariables();
    libNtve_InitTriggers();
}



//==================================================================================================
// Native Function Prototypes
//==================================================================================================
include "TriggerLibs/GameData/GameDataAllNatives.galaxy"

//--------------------------------------------------------------------------------------------------
// Contents
//--------------------------------------------------------------------------------------------------
// - About Types
// - Common
// - Achievements
// - Actor
// - Animation
// - Bank
// - Boards
// - Camera
// - Campaign
// - Catalogs
// - Cinematics
// - Conversions
// - Conversation
// - Data Table
// - Dialogs
// - Environment
// - Game
// - Looping
// - Markers
// - Math
// - Melee
// - Minimap
// - Movie
// - Objectives
// - Orders
// - Ping
// - Planet
// - Players
// - Player Groups
// - Points
// - Portraits
// - Preload
// - PurchaseItems
// - Regions
// - Sound
// - Story Mode
// - Strings
// - Tech Tree
// - Text Tags
// - Timing
// - Transmission
// - Triggers
// - Units
// - Unit Filters
// - Unit Groups
// - Unit Reference
// - Unit Selection
// - User Interface
// - Visibility
//
//--------------------------------------------------------------------------------------------------
// About Types
//--------------------------------------------------------------------------------------------------
//
// -- Complex types and automatic deletion --
// 
// Many native types represent "complex" objects (i.e. larger than 4 bytes).  The script language
// automatically keeps track of these objects and deletes them from memory when they are no longer
// used (that is, when nothing in the script references them any longer).  The types which benefit
// from automatic deletion are:
//
//      abilcmd, bank, camerainfo, marker, order, playergroup, point,
//      region, soundlink, string, text, timer, transmissionsource, unitfilter, unitgroup, unitref,
//      waveinfo, wavetarget
//
// Other object types must be explicitly destroyed with the appropriate native function when you
// are done using them.
//
//
// -- Complex types and equality --
// 
// Normally, comparing two "complex" objects with the == or != operators will only compare the
// object reference, not the contained object data.  However, a few types will compare the contained
// data instead.  These types are:
//
//      abilcmd, point, string, unitfilter, unitref
//
// Examples:
//
//      Point(1, 2) == Point(1, 2)                              // True
//      "test string" == "test string"                          // True (note: this is case sensitive)
//      AbilityCommand("move", 0) == AbilityCommand("move", 0)  // True
//      Order(abilCmd) == Order(abilCmd)                        // False (two different order instances)
//      RegionEmpty() == RegionEmpty()                          // False (two different region instances)
//
//
// -- Complex types and +/- operators --
//
// Besides numerical types (byte, int, fixed), a few complex types support + and/or - operators:
//
//      string, text    + operator will concatenate the strings or text
//      point           +/- operators will add or subtract the x and y components of the points
//

//--------------------------------------------------------------------------------------------------
// Common
// - Constants used in multiple sections
//--------------------------------------------------------------------------------------------------
// Alignment
const int c_alignLeft   = 0;
const int c_alignTop    = 0;
const int c_alignRight  = 1;
const int c_alignBottom = 1;
const int c_alignCenter = 2;

// Anchor
const int c_anchorTopLeft       = 0;
const int c_anchorTop           = 1;
const int c_anchorTopRight      = 2;
const int c_anchorLeft          = 3;
const int c_anchorCenter        = 4;
const int c_anchorRight         = 5;
const int c_anchorBottomLeft    = 6;
const int c_anchorBottom        = 7;
const int c_anchorBottomRight   = 8;

//--------------------------------------------------------------------------------------------------
// Achievements
//--------------------------------------------------------------------------------------------------
native void AchievementAward (int player, string name);     //  Blizzard maps only
native void AchievementErase (int player, string name);     //  Blizzard maps only
native void AchievementPanelSetCategory (playergroup players, string name);
native void AchievementPanelSetVisible (playergroup players, bool visible);
native text AchievementPercentText (int player, string category); // Blizzard maps only

native void AchievementTermQuantitySet (int player, string term, int quantity);     //  Blizzard maps only

native void AchievementsDisable (int player);

//--------------------------------------------------------------------------------------------------
// Actor
// - Can send actor messages through API that is temporarily similar to the animation API.
//
// Design Comments
// - Trigger code is synchronous and actors are asynchronous.  This means we can't have any
//   routines that return any results, since anything from the actor system is suspect.
//   This includes even the existence of actors themselves; an actor might only be created on
//   machines with good graphics cards, for instance.
// - This also means collection classes are out, since we can't return a count that is guaranteed
//   to match.  (Technically, we could still have them, but just not populate them via "query".
//   The value at this point is unfortunately low enough to not be worth the complexity.)
// - We can return actors and scopes, but these will be opaque values that might even be NULL.
//   The client can do stuff with them, but won't be guaranteed to have them work.  In other
//   words, the client always appears to get a valid object, but the user has no way of actually
//   knowing whether it was valid, except to look at the screen.  Testing against null only
//   determines whether there has ever been an attempt to assign these values.
//
// FAQ
//
// Q01  Why do we not use scope names to get a hold of scopes?
// A01  Scope names started as a debugging tool.  We want to see if we can get by with that.
//      Until there's a super compelling need, we want to get by without exposing a whole new
//      namespace.
//
// Q02  Why does ::LastCreated only get set with new values if they are successfully created?
//      Won't this create subtle bugs where we send messages to the prior actor that was created,
//      b/c we are accidentally not creating a new one?
// A02  Well, it might.  But it's also a simply explained rule.  No one will remember the
//      alternative, which is something like actors/scopes created by ActorCreate, and create
//      messages sent by the user.  It also leads to simpler, less bug-prone C++ code on my end. :)
//
// Q03  Why does ActorCreate have 3 content params?  Is that many really necessary?
// A03  It is exactly enough to create a beam with a custom model and two custom sites.
//--------------------------------------------------------------------------------------------------
native actorscope   ActorScopeCreate (string name);
native actorscope   ActorScopeFrom (string name);
native actorscope   ActorScopeFromActor (actor a);
native actorscope   ActorScopeFromUnit (unit u);
native actorscope   ActorScopeFromPortrait (int p);
native text         ActorScopeGetText (actorscope as);
native void         ActorScopeKill (actorscope as);
native void         ActorScopeOrphan (actorscope as);
native actor        ActorScopeRefGet (actorscope as, string refName);
native void         ActorScopeRefSet (actorscope as, string refName, actor aValue);
native void         ActorScopeSend (actorscope as, string msg);
native actor        ActorCreate (actorscope as, string actorName, string content1Name, string content2Name, string content3Name);
native actor        ActorFrom (string name);
native actor        ActorFromActor (actor a, string name);
native actor        ActorFromScope (actorscope as, string name);
native actor        ActorFromDoodad (doodad d);
native actor        ActorFromPortrait (int p);
native text         ActorGetText (actor a);
native actor        ActorRefGet (actor a, string refName);
native void         ActorRefSet (actor a, string refName, actor aValue);
native void         ActorSend (actor a, string msg);
native void         ActorSendTo (actor a, string refName, string msg);
native void         ActorLookAtStart (actor s, string lookAt, int weight, fixed time, actor t);
native void         ActorLookAtStop (actor s, string lookAt, int weight, fixed time);
native void         ActorLookAtTypeStart (actor s, string type, actor t);
native void         ActorLookAtTypeStop (actor s, string type);
native void         ActorTextureGroupApplyGlobal (string textureProps);
native void         ActorTextureGroupRemoveGlobal (string textureProps);
native void         ActorWorldParticleFXDestroy ();

native actor        ActorRegionCreate (actorscope as, string actorName, region r);
native void         ActorRegionSend (actor a, int intersect, string msg, string filters, string terms);

const int c_actorIntersectAgainstCenter             = 0;
const int c_actorIntersectAgainstRadiusContact      = 1;
const int c_actorIntersectAgainstRadiusGame         = 2;
const int c_actorIntersectAgainstRadiusVisual       = 3;

const int c_animTimeVariantAsAutomatic              = 0;
const int c_animTimeVariantAsDuration               = 1;
const int c_animTimeVariantAsTimeScale              = 2;

const int c_animTransitionFlagInstant               = (1 << 0);

const int c_animBracketStartFlagClosingFull         = (1 << 0);
const int c_animBracketStartFlagContentNonLooping   = (1 << 1);
const int c_animBracketStartFlagContentPlayOnce     = (1 << 2);
const int c_animBracketStartFlagOpeningPlayForever  = (1 << 3);
const int c_animBracketStartFlagInstant             = (1 << 4);

const int c_animGroupApplyFlagClosingFull           = (1 << 0);
const int c_animGroupApplyFlagInstant               = (1 << 1);

const int c_animFlagFullMatch                       = (1 << 0);
const int c_animFlagPlayForever                     = (1 << 1);
const int c_animFlagNonLooping                      = (1 << 2);
const int c_animFlagAssetDrivenLooping              = (1 << 3);
const int c_animFlagRandomStartOffset               = (1 << 4);

const int c_actorRefSpaceGlobal                     = 1;
const int c_actorRefSpaceScope                      = 2;
const int c_actorRefSpaceActor                      = 3;

const int c_actorRequestScopeImplicit               = 0;
const int c_actorRequestScopeCaster                 = 1;
const int c_actorRequestScopeEffect                 = 2;
const int c_actorRequestScopeMissile                = 3;
const int c_actorRequestScopeOuter                  = 4;
const int c_actorRequestScopeSource                 = 5;
const int c_actorRequestScopeTarget                 = 6;

const int c_actorRequestActorImplicit               = 0;
const int c_actorRequestActorCreate                 = 1;
const int c_actorRequestActorFind                   = 2;

const int c_textureVideoPlayFlagLooping             = (1 << 0);
const int c_textureVideoPlayFlagSynced              = (1 << 1);

const int c_physicsDisabled                         = 0;
const int e_physicsKeyframed                        = 1;
const int e_physicsSimulated                        = 2;

const int c_actorTransitionIn                       = 0;
const int c_actorTransitionOut                      = 1;

const int c_textureSlotComponentDefault             = 0;
const int c_textureSlotComponentDiffuse             = 1;
const int c_textureSlotComponentEmissive            = 2;
const int c_textureSlotComponentNormal              = 3;
const int c_textureSlotComponentSpecular            = 4;

native string       MakeMsgAnimBracketResume (
                        string animName,
                        int animTransitionFlags,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgAnimBracketStart (
                        string animName,
                        string propsOpening,
                        string propsContent,
                        string propsClosing,
                        int animBracketStartFlags,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgAnimBracketStop (
                        string animName,
                        int animTransitionFlags,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgAnimGroupApply (
                        string animGroup,
                        string atApply,
                        string atRemove,
                        int animGroupApplyFlags,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgAnimGroupRemove (
                        string animGroup,
                        int animTransitionFlags,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgAnimPlay (
                        string animName,
                        string animProps,
                        int animFlags,
                        fixed blendIn,
                        fixed blendOut,
                        fixed timeVariant,
                        int timeType
                    );

native string       MakeMsgRefCreate (string refName);
native string       MakeMsgRefSetFromRequest (
                        string refName,
                        string subject,
                        string effectName,
                        int requestScope,
                        int requestActor
                    );
native string       MakeMsgRefTableDump (int space);
native string       MakeMsgSetPhysicsState (int physicsState, fixed delayLow, fixed delayHigh);
native string       MakeMsgTextureSelectByMatch (
                        string slotName,
                        int slotComponent,
                        string sourceSlotName,
                        int sourceSlotComponent
                    );
native string       MakeMsgTextureSelectBySlot (
                        string slotName,
                        int slotComponent,
                        string textureExpression
                    );
native string       MakeMsgTextureVideoPlay (
                        string slotName,
                         int slotComponent,
                         int fps,
                         int textureVideoPlayFlags,
                         int videoSoundType,
                         string attachQuery
                    );
native string       MakeMsgTextureVideoStop (string slotName, int slotComponent);
native string       MakeMsgTextureVideoSetFrame (string slotName, int slotComponent, int frame);
native string       MakeMsgTextureVideoSetPaused (string slotName, int slotComponent, bool isPaused);
native string       MakeMsgTextureVideoSetTime (string slotName, int slotComponent, fixed time);
native string       MakeMsgTransition (int transitionType, fixed durationBase, fixed durationRange);

native string       TextureGetSlotName (string textureLink);
native int          TextureGetSlotComponent (string textureLink);

native doodad       DoodadFromId (int id);

//--------------------------------------------------------------------------------------------------
// Animation
//--------------------------------------------------------------------------------------------------
const fixed c_animTimeDefault           = -1;

const string c_animNameDefault          = "Default";

native void     ModelAnimationLoad (string modelPath, string animPath);
native void     ModelAnimationUnload (string modelPath, string animPath);

//--------------------------------------------------------------------------------------------------
// Bank
//--------------------------------------------------------------------------------------------------
const int c_bankTypeFixed   = 0;
const int c_bankTypeFlag    = 1;
const int c_bankTypeInt     = 2;
const int c_bankTypeString  = 3;
const int c_bankTypeUnit    = 4;
const int c_bankTypePoint   = 5;
const int c_bankTypeText    = 6;

native bool     BankExists (string name, int player);
native bank     BankLastCreated ();
native bank     BankLoad (string name, int player);
native string   BankName (bank b);
native int      BankPlayer (bank b);
native void     BankRemove (bank b);
native void     BankSave (bank b);
native void     BankDeleteCampaignBanks (int player);     //  Blizzard maps only

native int      BankSectionCount (bank b);
native bool     BankSectionExists (bank b, string section);
native string   BankSectionName (bank b, int index);
native void     BankSectionRemove (bank b, string section);

native int      BankKeyCount (bank b, string section);
native bool     BankKeyExists (bank b, string section, string key);
native string   BankKeyName (bank b, string section, int index);
native void     BankKeyRemove (bank b, string section, string key);

native bool     BankValueIsType (bank b, string section, string key, int type);

native fixed    BankValueGetAsFixed (bank b, string section, string key);
native void     BankValueSetFromFixed (bank b, string section, string key, fixed value);

native bool     BankValueGetAsFlag (bank b, string section, string key);
native void     BankValueSetFromFlag (bank b, string section, string key, bool value);

native int      BankValueGetAsInt (bank b, string section, string key);
native void     BankValueSetFromInt (bank b, string section, string key, int value);

native point    BankValueGetAsPoint (bank b, string section, string key);
native void     BankValueSetFromPoint (bank b, string section, string key, point value);

native string   BankValueGetAsString (bank b, string section, string key);
native void     BankValueSetFromString (bank b, string section, string key, string value);

native text     BankValueGetAsText (bank b, string section, string key);
native void     BankValueSetFromText (bank b, string section, string key, text value);

native unit     BankLastRestoredUnit ();
native unit     BankValueGetAsUnit (bank b, string section, string key, int player, point p, fixed facing);
native void     BankValueSetFromUnit (bank b, string section, string key, unit value);

//--------------------------------------------------------------------------------------------------
// Battle Report
//--------------------------------------------------------------------------------------------------
const int c_invalidBattleReportId		= 0;

const int c_battleReportStateNormal     = 0;
const int c_battleReportStateCompleted  = 1;
const int c_battleReportStateHidden     = 2;

const int c_battleReportTypeMission     = 0;
const int c_battleReportTypeScene       = 1;

native void     BattleReportPanelSetSelectedBattleReport (playergroup players, int inBattleReport);
native int      BattleReportPanelGetSelectedBattleReport (int inPlayer);

native int      BattleReportCreate (playergroup inPlayerGroup, text inText, int inType, int inState);
native int      BattleReportLastCreated ();
native void     BattleReportDestroy (int inBattleReportId);

native void     BattleReportSetState (int inBattleReportId, int inState);
native void     BattleReportSetPriority (int inBattleReportId, int inPriority);
native void     BattleReportSetButtonText (int inBattleReportId, text inText);
native void     BattleReportSetButtonImage (int inBattleReportId, string inImage);

native void     BattleReportSetMissionText (int inBattleReportId, text inText);
native void     BattleReportSetResearchTitle (int inBattleReportId, text inText);
native void     BattleReportSetResearchText (int inBattleReportId, text inText);
native void     BattleReportSetBonusTitle (int inBattleReportId, text inText);
native void     BattleReportSetBonusText (int inBattleReportId, text inText);
native void     BattleReportSetWorldText (int inBattleReportId, text inText);
native void     BattleReportSetObjectiveTitle (int inBattleReportId, text inText);
native void     BattleReportSetObjectiveText (int inBattleReportId, text inText);
native void     BattleReportSetAchievementTitle (int inBattleReportId, text inText);
native void     BattleReportSetBestTimeText (int inBattleReportId, text inText);
native void     BattleReportSetMissionImage (int inBattleReportId, string inImage);
native void     BattleReportSetDifficultyLevelCompleted (int inBattleReportId, int inDifficultyLevel, bool inCompleted);
native void     BattleReportSetDifficultyLevelBestTimeText (int inBattleReportId, int inDifficultyLevel, text inText);
native void     BattleReportAddAchievement (int inBattleReportId, string inAchievement);
native void     BattleReportSetSceneText (int inBattleReportId, text inText);
native void     BattleReportSetSceneImage (int inBattleReportId, string inImage);
native void     BattleReportSetShownInMissionTotal (int inBattleReportId, bool inShown);

// Battle Report events
native void     TriggerAddEventBattleReportPanelExit (trigger t, int inPlayer);
native void     TriggerAddEventBattleReportPanelPlayMission (trigger t, int inPlayer);
native void     TriggerAddEventBattleReportPanelPlayScene (trigger t, int inPlayer);
native void     TriggerAddEventBattleReportPanelSelectionChanged (trigger t, int inPlayer);

native int      EventBattleReportPanelMissionSelected ();
native int      EventBattleReportPanelDifficultySelected ();
native int      EventBattleReportPanelSceneSelected ();

//--------------------------------------------------------------------------------------------------
// Boards
//--------------------------------------------------------------------------------------------------
const int c_boardNone = 0;

native int          BoardCreate (int inCols, int inRows, text inName, color inColor);
native int          BoardLastCreated ();
native void         BoardDestroy (int inBoard);

native void         BoardShowAll (bool inShow, playergroup inPlayers);

// Board title
const int c_boardColorText          = 0;
const int c_boardColorBackground    = 1;

const int c_boardIconPosLeft        = 0;
const int c_boardIconPosRight       = 1;

native void         BoardTitleShow (int inBoard, playergroup inPlayers, bool inShow);
native void         BoardTitleSetText (int inBoard, text inText);
native void         BoardTitleSetColor (int inBoard, int inType, color inColor);
native void         BoardTitleSetIcon (int inBoard, string inIcon);
native void         BoardTitleSetAlignment (int inBoard, int inAlign, int inIconPos);
native void         BoardTitleSetClickable (int inBoard, bool inClickable);

// Board properties
native void         BoardSetName (int inBoard, text inName, color inColor);

const int c_boardStateShowing       = 0;
const int c_boardStateShowTitle     = 1;
const int c_boardStateShowMinimize  = 2;
const int c_boardStateMinimized     = 3;
const int c_boardStateShowHeader    = 4;
const int c_boardStateSorted        = 5;

native void         BoardSetState (int inBoard, playergroup inPlayers, int inState, bool inVal);

// Board minimize button
native void         BoardMinimizeShow (int inBoard, playergroup inPlayers, bool inShow);
native void         BoardMinimizeEnable (int inBoard, playergroup inPlayers, bool inEnable);
native void         BoardMinimizeSetState (int inBoard, playergroup inPlayers, bool inVal);
native void         BoardMinimizeSetColor (int inBoard, color inColor);

// Board columns and rows
native void         BoardSetColumnCount (int inBoard, int inCols);
native void         BoardSetRowCount (int inBoard, int inRows);

const fixed c_boardWidthAuto    = 0; // Automatically size the column to fit all items

native void         BoardSetColumnWidth (int inBoard, int inCol, fixed inWidth);

// Board row groups
native void         BoardSetGroupCount (int inBoard, int inGroups);
native void         BoardRowSetGroup (int inBoard, int inRow, int inGroup);

// Board items
const int c_boardColGroups  = -3; // Use as column value to treat row value as group instead
const int c_boardItemAll    = -2; // Use as row or column value to modify all items
const int c_boardRowHeader  = -1; // Use as row value to access header items

native void         BoardItemSetText (int inBoard, int inCol, int inRow, text inText);
native void         BoardItemSetTextColor (int inBoard, int inCol, int inRow, color inColor);
native void         BoardItemSetBackgroundColor (int inBoard, int inCol, int inRow, color inColor);
native void         BoardItemSetIcon (int inBoard, int inCol, int inRow, string inIcon, bool inLeft);
native void         BoardItemSetAlignment (int inBoard, int inCol, int inRow, int inAlign);
native void         BoardItemSetFontSize (int inBoard, int inCol, int inRow, int inSize);
native void         BoardItemSetSortValue (int inBoard, int inCol, int inRow, int inVal);

native void         BoardItemSetProgressShow (int inBoard, int inCol, int inRow, bool inShow);
native void         BoardItemSetProgressRange (int inBoard, int inCol, int inRow, fixed inMin, fixed inMax);
native void         BoardItemSetProgressValue (int inBoard, int inCol, int inRow, fixed inVal);
native void         BoardItemSetProgressColor (int inBoard, int inCol, int inRow, color inColor, int inStep);

// Board sorting
// Note: inPriority defines multi-column sorting behavior.  If two items are identical, the next
//       sort priority is used (lowest priority value comes first).  inPriority should range
//       from 1 to the number of columns.
//
native void         BoardSort (int inBoard, int inCol, bool inAscending, int inPriority);

// Automatic player column
// Note: Once a player column has been added, the "row" values passed in to the functions above
//       should be the player id instead.
//
native void         BoardSetPlayerColumn (int inBoard, int inCol, bool inGroupByTeams);
native void         BoardPlayerAdd (int inBoard, int inPlayer);
native void         BoardPlayerRemove (int inBoard, int inPlayer);

//--------------------------------------------------------------------------------------------------
// Camera
//--------------------------------------------------------------------------------------------------
const int c_cameraValueFieldOfView      = 0;
const int c_cameraValueNearClip         = 1;
const int c_cameraValueFarClip          = 2;
const int c_cameraValueShadowClip       = 3;
const int c_cameraValueDistance         = 4;
const int c_cameraValuePitch            = 5;
const int c_cameraValueYaw              = 6;
const int c_cameraValueRoll             = 7;
const int c_cameraValueHeightOffset     = 8;
const int c_cameraValueDepthOfField     = 9;
const int c_cameraValueFocalDepth       = 10;
const int c_cameraValueFalloffStart     = 11;
const int c_cameraValueFalloffEnd       = 12;

const int c_cameraPositionEye           = 0;
const int c_cameraPositionTarget        = 1;
const int c_cameraPositionBoth          = 2;

const int c_cameraDirectionX            = 0;
const int c_cameraDirectionY            = 1;
const int c_cameraDirectionZ            = 2;
const int c_cameraDirectionXY           = 3;
const int c_cameraDirectionXZ           = 4;
const int c_cameraDirectionYZ           = 5;
const int c_cameraDirectionXYZ          = 6;

const int c_cameraRotationPitch         = 0;
const int c_cameraRotationRoll          = 1;
const int c_cameraRotationYaw           = 2;

// Camera Info
native camerainfo   CameraInfoDefault ();
native camerainfo   CameraInfoFromId (int id);

native void         CameraInfoSetValue (camerainfo c, int type, fixed value);
native fixed        CameraInfoGetValue (camerainfo c, int type);

native void         CameraInfoSetTarget (camerainfo c, point p);
native point        CameraInfoGetTarget (camerainfo c);

// Player Camera
native void         CameraApplyInfo (int player, camerainfo c, fixed duration, fixed velocity, fixed decelerate, bool useTarget);
native void         CameraPan (int player, point p, fixed duration, fixed velocity, fixed decelerate, bool smart);
native void         CameraSetValue (int player, int type, fixed value, fixed duration, fixed velocity, fixed decelerate);
native void         CameraUseModel (int player, unit u, string name, fixed duration);

native void         CameraForceMouseRelative (int player, bool value);
native void         CameraLockInput (int player, bool lock);
native void         CameraSetMouseRotates (int player, bool value);
native void         CameraSetMouseRotationSpeed (int player, int direction, fixed value);
native void         CameraSetVerticalFieldOfView (int player, bool value);
native void         CameraUseHeightDisplacement (int player, bool value);
native void         CameraUseHeightSmoothing (int player, bool value);

native void         CameraSetChannel (int player, unit cameraUnit, string cameraName, int channel, fixed aspectRatio);
native void         CameraClearChannel (int player, int channel);

native void         CameraSetChannelOnPortrait (int player, camerainfo c, fixed aspectRatio, int portraitId, int channel);
native void         CameraClearChannelOnPortrait (int player, int portraitId, int channel);

native void         CameraShakeStart (
                        int player,
                        int position,           // c_cameraPosition*
                        int direction,          // c_cameraDirection*
                        fixed amplitude,
                        fixed frequency,
                        fixed randomPercent,
                        fixed duration
                    );
native void         CameraShakeStop (int player);

// - CameraSave saves the current camera settings for the given player,
//   which can later be restored using CameraRestore.
//
native void         CameraSave (int player);
native void         CameraRestore (int player, fixed duration, fixed velocity, fixed decelerate);

// - CameraGetTarget returns the synchronized target for the given player
//
native point        CameraGetTarget (int player);
native fixed        CameraGetPitch (int player);
native fixed        CameraGetYaw (int player);

// Camera Bounds, optionally adjusting the minimap as well
// Camera bounds can never extend beyond the playable map area
//
native void         CameraSetBounds (playergroup players, region bounds, bool includeMinimap);

// Force the camera to start/stop following a group of units
//
native void         CameraFollowUnitGroup (int player, unitgroup group, bool follow, bool isOffset);

native void         CameraLookAt (int player, point p, fixed duration, fixed velocity, fixed decelerate);
// Make the camera look at an actor or unit, updating as it moves. Use null to stop looking.
//
native void         CameraLookAtActor (int player, actor a);
native void         CameraLookAtUnit (int player, unit u);

// Camera movement events
const int c_cameraMoveReasonAny             = -1;
const int c_cameraMoveReasonAlert           = 0;
const int c_cameraMoveReasonKeyScroll       = 1;
const int c_cameraMoveReasonMinimap         = 2;
const int c_cameraMoveReasonMouseScroll     = 3;
const int c_cameraMoveReasonSelection       = 4;
const int c_cameraMoveReasonTown            = 5;
const int c_cameraMoveReasonView            = 6;

native void         TriggerAddEventCameraMove (trigger t, int player, int reason);
native int          EventCameraMoveReason ();

//--------------------------------------------------------------------------------------------------
// Campaign
// 
// Game initialization and configuration associated with standard campaign games
//--------------------------------------------------------------------------------------------------
native void     CampaignInitAI ();
native void		CampaignProgressSetText (playergroup players, string campaignId, text inText); // Blizzard maps only
native void		CampaignProgressSetImageFilePath (playergroup players, string campaignId, string inFilePath); // Blizzard maps only
native void		CampaignProgressSetTutorialFinished (playergroup players, string campaignId, bool inFinished); // Blizzard maps only
native void		CampaignProgressSetCampaignFinished (playergroup players, string campaignId, bool inFinished); // Blizzard maps only

//--------------------------------------------------------------------------------------------------
// Catalogs
//
// Note: The catalog entry table includes references to entries from other fields,
//       even if that entry is not actually defined.  This means it is possible that
//       enumerating entries via CatalogEntryCount and CatalogEntryGet may return entries
//       that don't actually exist.  Use CatalogEntryIsValid to check for this case.
//
//--------------------------------------------------------------------------------------------------
native int AbilityClass (string ability);

native int CatalogEntryCount (int catalog);
native string CatalogEntryGet (int catalog, int index);

native bool CatalogEntryIsValid (int catalog, string entry);
native int CatalogEntryClass (int catalog, string entry);
native string CatalogEntryParent (int catalog, string entry);
native string CatalogEntryScope (int catalog, string entry);

native int CatalogFieldCount (string scope);
native string CatalogFieldGet (string scope, int index);
native bool CatalogFieldIsArray (string scope, string field);
native bool CatalogFieldIsScope (string scope, string field);
native string CatalogFieldType (string scope, string field);

native int CatalogFieldValueCount (int catalog, string entry, string fieldPath, int player);
native string CatalogFieldValueGet (int catalog, string entry, string fieldPath, int player);
native bool CatalogFieldValueSet (int catalog, string entry, string fieldPath, int player, string value);

//--------------------------------------------------------------------------------------------------
// CharacterSheet
//--------------------------------------------------------------------------------------------------
native void     CharacterSheetPanelSetNameText (playergroup players, text inText);
native void     CharacterSheetPanelSetDescriptionText (playergroup players, text inText);
native void     CharacterSheetPanelSetPortraitModelLink (playergroup players, string inModelLink);

//--------------------------------------------------------------------------------------------------
// Cinematics
//--------------------------------------------------------------------------------------------------
native void CinematicMode (playergroup players, bool cinematicMode, fixed duration);

const int c_fadeStyleNormal			= 0;
const int c_fadeStyleExponential	= 1;
const int c_fadeStyleSine			= 2;
const int c_fadeStyleSquareRoot		= 3;

native void CinematicFade (
    bool fadeIn,
    fixed duration,
    int style,
    color inColor,
    fixed transparency,
    bool waitUntilDone
);

native void CinematicOverlay (
    bool fadeIn,
    fixed duration,
    string imagePath,
    fixed transparency,
    bool waitUntilDone
);

native void CinematicDataRun (int id, playergroup players, bool waitUntilDone);
native void CinematicDataStop ();

//--------------------------------------------------------------------------------------------------
// Conversions
//--------------------------------------------------------------------------------------------------
native int      BoolToInt (bool f);
native int      Color255FromFixed (fixed f);

native fixed    IntToFixed (int x);
native string   IntToString (int x);
native text     IntToText (int x);

const int c_fixedPrecisionAny = -1;
native int      FixedToInt (fixed x);
native string   FixedToString (fixed x, int precision);
native text     FixedToText (fixed x, int precision);

native int      StringToInt (string x);
native fixed    StringToFixed (string x);

// Color
// Note: Component values are in percent (0-100)
//
const int c_colorComponentRed   = 0;
const int c_colorComponentGreen = 1;
const int c_colorComponentBlue  = 2;
const int c_colorComponentAlpha = 3;

native color    Color (fixed r, fixed g, fixed b);
native color    ColorWithAlpha (fixed r, fixed g, fixed b, fixed a);
native color    ColorFromIndex (int inIndex, int inType);
native fixed    ColorGetComponent (color c, int component);

native text     FormatNumber (int number);
native text     FormatDuration (int seconds);

//--------------------------------------------------------------------------------------------------
// Conversations
//--------------------------------------------------------------------------------------------------
const int c_invalidConversationId           = 0;
const int c_invalidReplyId                  = 0;

const int c_conversationReplyStateUnread    = 0;
const int c_conversationReplyStateRead      = 1;
const int c_conversationReplyStateOld       = 2;

native int          ConversationCreate (bool visible);
native int          ConversationLastCreated ();
native void         ConversationDestroy (int intId);
native void         ConversationDestroyAll ();

native void         ConversationShow (int intId, playergroup to, bool visible);
native bool         ConversationVisible (int intId, int player);

native int          ConversationReplyCreate (int intId, text inText);
native int          ConversationReplyLastCreated ();
native void         ConversationReplyDestroy (int intId, int replyId);
native void         ConversationReplyDestroyAll (int intId);

native void         ConversationReplySetText (int intId, int replyId, text inText);
native text         ConversationReplyGetText (int intId, int replyId);

native void         ConversationReplySetState (int intId, int replyId, int state);
native int          ConversationReplyGetState (int intId, int replyId);

// Conversation events
native void         TriggerAddEventConversationReplySelected (trigger t, int player, int intId, int replyId);

native int          EventConversation ();
native int          EventConversationReply ();

native int          ConversationReplyGetIndex (int intId, int replyId);

// Data-driven conversations
// Note: The stateIndex parameters specify the state id and the index id (if any), separated by "|".
//       ConversationDataStateIndex may be used to assemble the proper string for a given numerical
//       index in the state definition.
//
native int          ConversationDataStateIndexCount (string inStateId);
native string       ConversationDataStateIndex (string inStateId, int inIndex);

native text         ConversationDataStateName (string stateIndex);
native text         ConversationDataStateText (string stateIndex, string inInfoName);
native fixed        ConversationDataStateFixedValue (string stateIndex, string inInfoName);
native string       ConversationDataStateImagePath (string stateIndex);
native int          ConversationDataStateImageEdge (string stateIndex);
native string       ConversationDataStateAttachPoint (string stateIndex);
native string       ConversationDataStateMoviePath (string stateIndex);
native string       ConversationDataStateModel (string stateIndex, string inInfoName);
native string       ConversationDataStateUpgrade (string stateIndex, string inInfoName);
native abilcmd      ConversationDataStateAbilCmd (string stateIndex, string inInfoName);

native void         ConversationDataRegisterCamera (string camIndex, string charIndex, camerainfo c, trigger t, bool wait);
native void         ConversationDataRegisterUnit (string stateIndex, unit u);
native void         ConversationDataRegisterPortrait (string stateIndex, int p);

native void         ConversationDataStateSetValue (string stateIndex, int value);
native int          ConversationDataStateGetValue (string stateIndex);

native int          ConversationDataChoiceCount (string convId);
native string       ConversationDataChoiceId (string convId, int index);
native void         ConversationDataChoiceSetState (string convId, string choiceId, int state);
native int          ConversationDataChoiceGetState (string convId, string choiceId);
native void         ConversationDataChoiceSetPicked (string convId, string choiceId, bool picked);
native bool         ConversationDataChoiceGetPicked (string convId, string choiceId);
native void         ConversationDataChoiceSetPickedCount (string convId, string choiceId, int count);
native int          ConversationDataChoiceGetPickedCount (string convId, string choiceId);

native int          ConversationDataLineCount (string convId);
native string       ConversationDataLineId (string convId, int index);
native void         ConversationDataLineSetPickedCount (string convId, string lineId, int count);
native int          ConversationDataLineGetPickedCount (string convId, string lineId);

// State save/load via bank
// - State values are the arbitrary integer values associated with state objects.
//
native void         ConversationDataSaveStateValues (string stateId, bank b, string section);
native void         ConversationDataLoadStateValues (string stateId, bank b, string section);

native void         ConversationDataResetStateValues (string stateId);

// - Node state is the read/unread and picked state associated with lines and choices (nodes)
//   within a given conversation.
//
native void         ConversationDataSaveNodeState (string convId, bank b, string section);
native void         ConversationDataLoadNodeState (string convId, bank b, string section);

native void         ConversationDataResetNodeState (string convId);

// ConversationDataPreloadLines preloads sounds for all lines that are available to run given
// the current state.
//
native void         ConversationDataPreloadLines (string convId);

// ConversationDataCanRun returns true if the given conversation has any lines or choices available
// to run given the current state.
//
native bool         ConversationDataCanRun (string convId, bool unpickedOnly);

const int c_conversationSkipNone    = 0;    // Skipping not allowed
const int c_conversationSkipSimple  = 1;    // Skipping only allowed for all lines (esc key),
                                            // not individual lines (space bar, left click)
const int c_conversationSkipFull    = 2;    // Skipping allowed for all lines or individual lines

native void         ConversationDataRun (string convId, playergroup players, int skipType, bool waitUntilDone);
native void         ConversationDataStop ();

native string       ConversationDataActiveSound ();     // Sound id associated with the active line
native string       ConversationDataActiveCamera ();    // Last camera state to be applied

// Data Conversation events
native void         TriggerAddEventConversationStateChanged (trigger t, string stateIndex);

native string       EventConversationState ();

//--------------------------------------------------------------------------------------------------
// Data Table
// - Data tables provide named storage for any script type.
//   Table access may be either global or thread-local.
//--------------------------------------------------------------------------------------------------
// Types
const int c_dataTypeUnknown             = -1;
const int c_dataTypeAbilCmd             =  0;
const int c_dataTypeActor               =  1;
const int c_dataTypeActorScope          =  2;
const int c_dataTypeAIFilter            =  3;
const int c_dataTypeBank                =  4;
const int c_dataTypeBool                =  5;
const int c_dataTypeByte                =  6;
const int c_dataTypeCameraInfo          =  7;
const int c_dataTypeCinematic           =  8;
const int c_dataTypeColor               =  9;
const int c_dataTypeControl             = 10;
const int c_dataTypeConversation        = 11;
const int c_dataTypeDialog              = 12;
const int c_dataTypeDoodad              = 13;
const int c_dataTypeFixed               = 14;
const int c_dataTypeInt                 = 15;
const int c_dataTypeMarker              = 16;
const int c_dataTypeObjective           = 17;
const int c_dataTypeOrder               = 18;
const int c_dataTypePing                = 19;
const int c_dataTypePlanet              = 20;
const int c_dataTypePlayerGroup         = 21;
const int c_dataTypePoint               = 22;
const int c_dataTypePortrait            = 23;
const int c_dataTypeRegion              = 24;
const int c_dataTypeReply               = 25;
const int c_dataTypeRevealer            = 26;
const int c_dataTypeSound               = 27;
const int c_dataTypeSoundLink           = 28;
const int c_dataTypeString              = 29;
const int c_dataTypeText                = 30;
const int c_dataTypeTimer               = 31;
const int c_dataTypeTransmission        = 32;
const int c_dataTypeTransmissionSource  = 33;
const int c_dataTypeTrigger             = 34;
const int c_dataTypeUnit                = 35;
const int c_dataTypeUnitFilter          = 36;
const int c_dataTypeUnitGroup           = 37;
const int c_dataTypeUnitRef             = 38;
const int c_dataTypeWave                = 39;
const int c_dataTypeWaveInfo            = 40;
const int c_dataTypeWaveTarget          = 41;

// General functionality
native void     DataTableClear (bool global);
native int      DataTableValueCount (bool global);
native string   DataTableValueName (bool global, int index);
native bool     DataTableValueExists (bool global, string name);
native int      DataTableValueType (bool global, string name);
native void     DataTableValueRemove (bool global, string name);

// Type-specific value set/get
// - c_dataTypeAbilCmd
native void         DataTableSetAbilCmd (bool global, string name, abilcmd val);
native abilcmd      DataTableGetAbilCmd (bool global, string name);

// - c_dataTypeActor
native void         DataTableSetActor (bool global, string name, actor val);
native actor        DataTableGetActor (bool global, string name);

// - c_dataTypeActorScope
native void         DataTableSetActorScope (bool global, string name, actorscope val);
native actorscope   DataTableGetActorScope (bool global, string name);

// - c_dataTypeAIFilter
native void         DataTableSetAIFilter (bool global, string name, aifilter val);
native aifilter     DataTableGetAIFilter (bool global, string name);

// - c_dataTypeBank
native void         DataTableSetBank (bool global, string name, bank val);
native bank         DataTableGetBank (bool global, string name);

// - c_dataTypeBool
native void         DataTableSetBool (bool global, string name, bool val);
native bool         DataTableGetBool (bool global, string name);

// - c_dataTypeByte
native void         DataTableSetByte (bool global, string name, byte val);
native byte         DataTableGetByte (bool global, string name);

// - c_dataTypeCameraInfo
native void         DataTableSetCameraInfo (bool global, string name, camerainfo val);
native camerainfo   DataTableGetCameraInfo (bool global, string name);

// - c_dataTypeCinematic
native void         DataTableSetCinematic (bool global, string name, int val);
native int          DataTableGetCinematic (bool global, string name);

// - c_dataTypeColor
native void         DataTableSetColor (bool global, string name, color val);
native color        DataTableGetColor (bool global, string name);

// - c_dataTypeControl
native void         DataTableSetControl (bool global, string name, int val);
native int          DataTableGetControl (bool global, string name);

// - c_dataTypeConversation
native void         DataTableSetConversation (bool global, string name, int val);
native int          DataTableGetConversation (bool global, string name);

// - c_dataTypeDialog
native void         DataTableSetDialog (bool global, string name, int val);
native int          DataTableGetDialog (bool global, string name);

// - c_dataTypeDoodad
native void         DataTableSetDoodad (bool global, string name, doodad val);
native doodad       DataTableGetDoodad (bool global, string name);

// - c_dataTypeFixed
native void         DataTableSetFixed (bool global, string name, fixed val);
native fixed        DataTableGetFixed (bool global, string name);

// - c_dataTypeInt
native void         DataTableSetInt (bool global, string name, int val);
native int          DataTableGetInt (bool global, string name);

// - c_dataTypeMarker
native void         DataTableSetMarker (bool global, string name, marker val);
native marker       DataTableGetMarker (bool global, string name);

// - c_dataTypeObjective
native void         DataTableSetObjective (bool global, string name, int val);
native int          DataTableGetObjective (bool global, string name);

// - c_dataTypeOrder
native void         DataTableSetOrder (bool global, string name, order val);
native order        DataTableGetOrder (bool global, string name);

// - c_dataTypePing
native void         DataTableSetPing (bool global, string name, int val);
native int          DataTableGetPing (bool global, string name);

// - c_dataTypePlanet
native void         DataTableSetPlanet (bool global, string name, int val);
native int          DataTableGetPlanet (bool global, string name);

// - c_dataTypePlayerGroup
native void         DataTableSetPlayerGroup (bool global, string name, playergroup val);
native playergroup  DataTableGetPlayerGroup (bool global, string name);

// - c_dataTypePoint
native void         DataTableSetPoint (bool global, string name, point val);
native point        DataTableGetPoint (bool global, string name);

// - c_dataTypePortrait
native void         DataTableSetPortrait (bool global, string name, int val);
native int          DataTableGetPortrait (bool global, string name);

// - c_dataTypeRegion
native void         DataTableSetRegion (bool global, string name, region val);
native region       DataTableGetRegion (bool global, string name);

// - c_dataTypeReply
native void         DataTableSetReply (bool global, string name, int val);
native int          DataTableGetReply (bool global, string name);

// - c_dataTypeRevealer
native void         DataTableSetRevealer (bool global, string name, revealer val);
native revealer     DataTableGetRevealer (bool global, string name);

// - c_dataTypeSound
native void         DataTableSetSound (bool global, string name, sound val);
native sound        DataTableGetSound (bool global, string name);

// - c_dataTypeSoundLink
native void         DataTableSetSoundLink (bool global, string name, soundlink val);
native soundlink    DataTableGetSoundLink (bool global, string name);

// - c_dataTypeString
native void         DataTableSetString (bool global, string name, string val);
native string       DataTableGetString (bool global, string name);

// - c_dataTypeText
native void         DataTableSetText (bool global, string name, text val);
native text         DataTableGetText (bool global, string name);

// - c_dataTypeTimer
native void         DataTableSetTimer (bool global, string name, timer val);
native timer        DataTableGetTimer (bool global, string name);

// - c_dataTypeTransmission
native void         DataTableSetTransmission (bool global, string name, int val);
native int          DataTableGetTransmission (bool global, string name);

// - c_dataTypeTransmissionSource
native void                 DataTableSetTransmissionSource (bool global, string name, transmissionsource val);
native transmissionsource   DataTableGetTransmissionSource (bool global, string name);

// - c_dataTypeTrigger
native void         DataTableSetTrigger (bool global, string name, trigger val);
native trigger      DataTableGetTrigger (bool global, string name);

// - c_dataTypeUnit
native void         DataTableSetUnit (bool global, string name, unit val);
native unit         DataTableGetUnit (bool global, string name);

// - c_dataTypeUnitFilter
native void         DataTableSetUnitFilter (bool global, string name, unitfilter val);
native unitfilter   DataTableGetUnitFilter (bool global, string name);

// - c_dataTypeUnitGroup
native void         DataTableSetUnitGroup (bool global, string name, unitgroup val);
native unitgroup    DataTableGetUnitGroup (bool global, string name);

// - c_dataTypeUnitRef
native void         DataTableSetUnitRef (bool global, string name, unitref val);
native unitref      DataTableGetUnitRef (bool global, string name);

// - c_dataTypeWave
native void         DataTableSetWave (bool global, string name, wave val);
native wave         DataTableGetWave (bool global, string name);

// - c_dataTypeWaveInfo
native void         DataTableSetWaveInfo (bool global, string name, waveinfo val);
native waveinfo     DataTableGetWaveInfo (bool global, string name);

// - c_dataTypeWaveTarget
native void         DataTableSetWaveTarget (bool global, string name, wavetarget val);
native wavetarget   DataTableGetWaveTarget (bool global, string name);

//--------------------------------------------------------------------------------------------------
// Dialogs
//--------------------------------------------------------------------------------------------------
const int c_invalidDialogId     = 0;

native int      DialogCreate (
                    int width,
                    int height,
                    int anchor,
                    int offsetX,
                    int offsetY,
                    bool modal
                );
native int      DialogLastCreated ();
native void     DialogDestroy (int dialog);
native void     DialogDestroyAll ();

native void		DialogSetSubtitlePositionOverride (int dialog);
native void		DialogClearSubtitlePositionOverride ();

native void     DialogSetTitle (int dialog, text title);
native void     DialogSetSize (int dialog, int width, int height);
native void     DialogSetPosition (int dialog, int anchor, int offsetX, int offsetY);
native void     DialogSetPositionRelative (int dialog, int anchor, int relative, int relativeAnchor, int offsetX, int offsetY);
native void     DialogSetVisible (int dialog, playergroup players, bool isVisible);
native void     DialogSetTransparency (int dialog, fixed inTransparency);
native void     DialogSetImage (int dialog, string image);
native void     DialogSetImageVisible (int dialog, bool isVisible);
native void     DialogSetOffscreen (int dialog, bool isOffscreen);
native void     DialogSetFullscreen (int dialog, bool isFullscreen);
native void     DialogSetChannel (int dialog, int channel);

native bool     DialogIsModal (int dialog);
native text     DialogGetTitle (int dialog);
native int      DialogGetWidth (int dialog);
native int      DialogGetHeight (int dialog);
native int      DialogGetAnchor (int dialog);
native int      DialogGetRelativeDialog (int dialog);
native int      DialogGetRelativeAnchor (int dialog);
native int      DialogGetOffsetX (int dialog);
native int      DialogGetOffsetY (int dialog);
native bool     DialogIsVisible (int dialog, int player);
native fixed    DialogGetTransparency (int dialog);
native string   DialogGetImage (int dialog);
native bool     DialogIsImageVisible (int dialog);
native bool     DialogIsOffscreen (int dialog);
native bool     DialogIsFullscreen (int dialog);
native int      DialogGetChannel (int dialog);

// Control types
const int c_triggerControlTypeInvalid                   = 0;
const int c_triggerControlTypeLabel                     = 1;
const int c_triggerControlTypeImage                     = 2;
const int c_triggerControlTypeButton                    = 3;
const int c_triggerControlTypeCheckBox                  = 4;
const int c_triggerControlTypeListBox                   = 5;
const int c_triggerControlTypePulldown                  = 6;
const int c_triggerControlTypeProgressBar               = 7;
const int c_triggerControlTypeSlider                    = 8;
const int c_triggerControlTypeEditBox                   = 9;
const int c_triggerControlTypeFlash                     = 10;
const int c_triggerControlTypeAchievement               = 11;

// Control properties
const int c_triggerControlPropertyInvalid               = 0;
const int c_triggerControlPropertyText                  = 1;        // text
const int c_triggerControlPropertyStyle                 = 3;        // string
const int c_triggerControlPropertyImage                 = 4;        // string
const int c_triggerControlPropertyImageType             = 5;        // int
const int c_triggerControlPropertyColor                 = 6;        // color
const int c_triggerControlPropertyChecked               = 7;        // bool
const int c_triggerControlPropertyMinValue              = 8;        // fixed
const int c_triggerControlPropertyMaxValue              = 9;        // fixed
const int c_triggerControlPropertyValue                 = 10;       // fixed
const int c_triggerControlPropertyTooltip               = 11;       // text
const int c_triggerControlPropertyVisible               = 12;       // bool
const int c_triggerControlPropertyEnabled               = 13;       // bool
const int c_triggerControlPropertyWidth                 = 14;       // int
const int c_triggerControlPropertyHeight                = 15;       // int
const int c_triggerControlPropertyAnchor                = 16;       // int
const int c_triggerControlPropertyRelative              = 17;       // int
const int c_triggerControlPropertyRelativeAnchor        = 18;       // int
const int c_triggerControlPropertyOffsetX               = 19;       // int
const int c_triggerControlPropertyOffsetY               = 20;       // int
const int c_triggerControlPropertyEditText              = 21;       // string
const int c_triggerControlPropertyItemCount             = 22;       // int
const int c_triggerControlPropertySelectionIndex        = 23;       // int
const int c_triggerControlPropertyFile                  = 24;       // string
const int c_triggerControlPropertyOffscreen             = 25;       // bool
const int c_triggerControlPropertyChannel               = 26;       // int
const int c_triggerControlPropertyFullDialog            = 27;       // bool
const int c_triggerControlPropertyTextWriteout          = 28;       // bool
const int c_triggerControlPropertyTextWriteoutDuration  = 29;       // fixed
const int c_triggerControlPropertyBlendMode				= 30;       // int
const int c_triggerControlPropertyHoverImage            = 31;       // string
const int c_triggerControlPropertyTiled		            = 32;       // bool
const int c_triggerControlPropertyRotation              = 33;       // int
const int c_triggerControlPropertyAchievement           = 34;       // string
const int c_triggerControlPropertyRenderPriority        = 35;       // int

// Image types
const int c_triggerImageTypeNone                        = 0;
const int c_triggerImageTypeNormal                      = 1;
const int c_triggerImageTypeBorder                      = 2;
const int c_triggerImageTypeHorizontalBorder            = 3;
const int c_triggerImageTypeEndCap                      = 4;

// Blend Modes
const int c_triggerBlendModeNormal            = 0;  
const int c_triggerBlendModeMultiply          = 1;    
const int c_triggerBlendModeLighten           = 2;
const int c_triggerBlendModeDarken            = 3;    
const int c_triggerBlendModeAdd               = 4;
const int c_triggerBlendModeSubtract          = 5;    
const int c_triggerBlendModeAlpha             = 6;  
    
// Item constants
const int c_invalidDialogControlId                      = 0;

const int c_dialogControlItemNone                       = -1;

// Controls
native int      DialogControlCreate (int dialog, int type);
native int      DialogControlCreateFromTemplate (int dialog, int type, string inTemplate);
native int      DialogControlLastCreated ();
native void     DialogControlDestroy (int control);
native void     DialogControlDestroyAll (int dialog);

native void     DialogControlSetSize (int control, playergroup players, int width, int height);
native void     DialogControlSetPosition (int control, playergroup players, int anchor, int offsetX, int offsetY);
native void     DialogControlSetPositionRelative (int control, playergroup players, int anchor, int relative, int relativeAnchor, int offsetX, int offsetY);
native void     DialogControlSetVisible (int control, playergroup players, bool isVisible);
native void     DialogControlSetEnabled (int control, playergroup players, bool isEnabled);
native void     DialogControlSetFullDialog (int control, playergroup players, bool isFullDialog);
native void     DialogControlFadeTransparency  (int control, playergroup players, fixed fadeTime, fixed inTargetTransparency);

native int      DialogControlGetType (int control);
native int      DialogControlGetWidth (int control, int player);
native int      DialogControlGetHeight (int control, int player);
native int      DialogControlGetAnchor (int control, int player);
native int      DialogControlGetRelativeControl (int control, int player);
native int      DialogControlGetRelativeAnchor (int control, int player);
native int      DialogControlGetOffsetX (int control, int player);
native int      DialogControlGetOffsetY (int control, int player);
native bool     DialogControlIsVisible (int control, int player);
native bool     DialogControlIsEnabled (int control, int player);
native bool     DialogControlIsFullDialog (int control, int player);

native void     DialogControlSetPropertyAsText (int control, int property, playergroup players, text value);
native void     DialogControlSetPropertyAsString (int control, int property, playergroup players, string value);
native void     DialogControlSetPropertyAsInt (int control, int property, playergroup players, int value);
native void     DialogControlSetPropertyAsFixed (int control, int property, playergroup players, fixed value);
native void     DialogControlSetPropertyAsBool (int control, int property, playergroup players, bool value);
native void     DialogControlSetPropertyAsColor (int control, int property, playergroup players, color value);
native void     DialogControlSetPropertyAsControl (int control, int property, playergroup players, int value);

native text     DialogControlGetPropertyAsText (int control, int property, int player);
native string   DialogControlGetPropertyAsString (int control, int property, int player);
native int      DialogControlGetPropertyAsInt (int control, int property, int player);
native fixed    DialogControlGetPropertyAsFixed (int control, int property, int player);
native bool     DialogControlGetPropertyAsBool (int control, int property, int player);
native color    DialogControlGetPropertyAsColor (int control, int property, int player);
native int      DialogControlGetPropertyAsControl (int control, int property, int player);

native void     DialogControlAddItem (int control, playergroup players, text value);
native void     DialogControlRemoveItem (int control, playergroup players, int index);
native void     DialogControlRemoveAllItems (int control, playergroup players);
native void     DialogControlSelectItem (int control, playergroup players, int index);
native int      DialogControlGetItemCount (int control, int player);
native int      DialogControlGetSelectedItem (int control, int player);

native void     DialogControlInvokeAsText (int control, playergroup players, string method, text param1, text param2, text param3, text param4); // Blizzard maps only
native void     DialogControlInvokeAsString (int control, playergroup players, string method, string param1, string param2, string param3, string param4); // Blizzard maps only

// Dialog events
const int c_dialogControlAny = -1;

const int c_triggerControlEventTypeAny                       = -1;
const int c_triggerControlEventTypeClick                     = 0;
const int c_triggerControlEventTypeChecked                   = 1;
const int c_triggerControlEventTypeValueChanged              = 2;
const int c_triggerControlEventTypeSelectionChanged          = 3;
const int c_triggerControlEventTypeSelectionDoubleClicked    = 4;
const int c_triggerControlEventTypeTextChanged               = 5;

native void     TriggerAddEventDialogControl (trigger t, int player, int control, int eventType);

native int      EventDialogControl ();
native int      EventDialogControlEventType ();

//--------------------------------------------------------------------------------------------------
// Environment
//--------------------------------------------------------------------------------------------------
// Time Of Day
native string   GameTimeOfDayGet ();
native void     GameTimeOfDaySet (string x);
native fixed    GameTimeOfDayGetLength ();  // Length of a day in game time seconds
native void     GameTimeOfDaySetLength (fixed inSecs);
native void     GameTimeOfDayPause (bool inPause);
native bool     GameTimeOfDayIsPaused ();

// Creep
native int      CreepAdjacent (point inPos);
native bool     CreepIsPresent (point inPos);
native void     CreepModify (point inPos, fixed inRadius, bool inAdd, bool inPermanent);

const int c_creepSpeedGrowth    = 0;
const int c_creepSpeedDecay     = 1;
const int c_creepSpeedBlend     = 2;

native void     CreepSetSpeed (int inType, fixed inPercent);

// Pathing
// - Modifications made using PathingModify will only take effect after:
//   a) PathingUpdate is called
//   - OR -
//   b) The end of the game loop
//
// - PathingReset resets *all* trigger-based modifications
//
const int c_pathingNoPathing    = 0;
const int c_pathingNoBuilding   = 1;
const int c_pathingGround       = 2;

native void     PathingModify (region inArea, int inType, bool inAdd);
native void     PathingUpdate ();
native void     PathingReset ();

// Power
native int      PowerLevel (int inPlayer, point inPos);
native bool     PowerIsProvidedBy (int inPlayer, point inPos, unit inSource, int inMinLevel);

// Height
native int      CliffLevel (point inPos);
native fixed    WorldHeight (int inType, point inPos);  // inType uses the c_heightMap<*> values

// Miscellaneous
const int c_backgroundFixed     = 0; // Attached to camera position (never appears to move)
const int c_backgroundTerrain   = 1; // Attached to terrain (moves as camera scrolls)

native void     GameSetLighting (string inId, fixed inBlendTime);
native void     GameSetToDLighting (string inId);
native void     SelectMainShadowLight (string inId);
native void     GameSetBackground (int inType, string inModel, fixed inAnimSpeed);
native void     GameDestroyEffects (point pos, fixed radius, int maxCount, string effectType);

native void     TerrainShowRegion (region inArea, bool inShow);

const int c_wtcLinear       = 0;
const int c_wtcSine         = 1;
const int c_wtcExponential  = 2;
const int c_wtcSquareRoot   = 3;

// First parameter is Water Template + Water State in one string, delimited by |
native void     WaterSetState (string inWater, fixed inDuration, int inMorphType);

// Fog
native void     FogSetEnabled (bool f);
native void     FogSetDensity (fixed d);
native void     FogSetColor (color c);
native void     FogSetFallOff (fixed f);
native void     FogSetStartHeight (fixed h);

// General environment visibility
const int c_environmentAll                  = 0;    // All of the below
const int c_environmentTerrain              = 1;
const int c_environmentWater                = 2;
const int c_environmentDoodads              = 3;
const int c_environmentBackgroundFixed      = 4;
const int c_environmentBackgroundTerrain    = 5;

native void     EnvironmentShow (int inType, bool inShow);

//--------------------------------------------------------------------------------------------------
// Game
//--------------------------------------------------------------------------------------------------
native bool     ConsoleCommand (string inText, bool allowDefault, bool allowMacros);
native bool		GameIsDebugOptionSet (string inOptionName, int player);

native void     GameSaveCreate (text inName, text inDescription, string inImage, bool inAutomatic);     //  Blizzard maps only

const int c_gameSpeedSlower     = 0;
const int c_gameSpeedSlow       = 1;
const int c_gameSpeedNormal     = 2;
const int c_gameSpeedFast       = 3;
const int c_gameSpeedFaster     = 4;

const int c_gameCheatEventAny               = -1;
const int c_gameCheatEventCooldown          = 0;
const int c_gameCheatEventDefeat            = 1;
const int c_gameCheatEventFastBuild         = 2;
const int c_gameCheatEventFastHeal          = 3;
const int c_gameCheatEventFood              = 4;
const int c_gameCheatEventFree              = 5;
const int c_gameCheatEventGimme             = 6;
const int c_gameCheatEventGod               = 7;
const int c_gameCheatEventMinerals          = 8;
const int c_gameCheatEventNoDefeat          = 9;
const int c_gameCheatEventNoVictory         = 10;
const int c_gameCheatEventResourceCustom    = 11;
const int c_gameCheatEventShowmap           = 12;
const int c_gameCheatEventTechTree          = 13;
const int c_gameCheatEventTerrazine         = 14;
const int c_gameCheatEventTimeOfDay         = 15;
const int c_gameCheatEventUpgrade           = 16;
const int c_gameCheatEventVespene           = 17;
const int c_gameCheatEventVictory           = 18;
const int c_gameCheatEventProgress          = 19;
const int c_gameCheatEventScene             = 20;
const int c_gameCheatEventTV                = 21;
const int c_gameCheatEventCredits           = 22;
const int c_gameCheatEventResearch          = 23;

const int c_gameCheatCategoryPublic         = 0;
const int c_gameCheatCategoryDevelopment    = 1;

native text     GameMapName ();
native text     GameMapDescription ();

native fixed    GameGetSpeed ();
native void     GameSetSpeedValue (int speed);
native int      GameGetSpeedValue ();
native void     GameSetSpeedValueMinimum (int speed);
native int      GameGetSpeedValueMinimum ();
native void     GameSetSpeedLocked (bool isLocked);
native bool     GameIsSpeedLocked ();

native string   GameAttributeGameValue (string name);
native string   GameAttributePlayerValue (string name, int player);

native void     GameSetSeedLocked (bool locked);
native bool     GameIsSeedLocked ();

native void     GameSetAbsoluteTimeRemaining (fixed inTime);
native fixed    GameGetAbsoluteTimeRemaining ();
native void     GameSetAbsoluteTimeRemainingPaused (bool inPaused);
native bool     GameGetAbsoluteTimeRemainingPaused ();

native void     GamePauseAllCharges (bool inPaused);
native void     GamePauseAllCooldowns (bool inPaused);

native void     GameAddChargeRegen (string inCharge, fixed inVal);
native fixed    GameGetChargeRegen (string inCharge);
native void     GameAddChargeUsed (string inCharge, fixed inVal);
native fixed    GameGetChargeUsed (string inCharge);

native void     GameAddCooldown (string inCooldown, fixed inVal);
native fixed    GameGetCooldown (string inCooldown);

native bool     GameIsTestMap (bool inAuto);

native void     GameSetNextMap (string inMap);
native void     SetNextMissionDifficulty (playergroup inPlayerGroup, int inDifficultyLevel);
native bool     GameIsTransitionMap ();
native void     GameSetTransitionMap (string transitionMap);

native string   GameTerrainSet ();
native void     GameWaitForResourcesToComplete ();

const int c_gameOverVictory = 0;
const int c_gameOverDefeat  = 1;
const int c_gameOverTie     = 2;

native void     GameOver (int player, int type, bool showDialog, bool showScore);
native void     RestartGame (playergroup inPlayerGroup);

native bool     GameCheatsEnabled (int category);

// Game Events
native void     TriggerAddEventMapInit (trigger t);
native void     TriggerAddEventSaveGame (trigger t);
native void     TriggerAddEventSaveGameDone (trigger t);
native void     TriggerAddEventChatMessage (trigger t, int player, string inText, bool exact);
native void     TriggerAddEventCheatUsed (trigger t, int player, int inCheat);

native string   EventChatMessage (bool matchedOnly);
native int      EventCheatUsed ();

//--------------------------------------------------------------------------------------------------
// Looping
//
// Convenience functions to allow for loops without creating any local variables.
// Notes:
// - The loop data is stored locally to the executing thread
// - Nested loops (of the same type) are not supported, and will produce a run-time error
//
//--------------------------------------------------------------------------------------------------
// Integer
// - Start and end are inclusive
//
native void IntLoopBegin (int start, int end);
native void IntLoopStep ();
native bool IntLoopDone ();
native int  IntLoopCurrent ();
native void IntLoopEnd ();

// Player group
native void PlayerGroupLoopBegin (playergroup g);
native void PlayerGroupLoopStep ();
native bool PlayerGroupLoopDone ();
native int  PlayerGroupLoopCurrent ();
native void PlayerGroupLoopEnd ();

// Unit group
native void UnitGroupLoopBegin (unitgroup g);
native void UnitGroupLoopStep ();
native bool UnitGroupLoopDone ();
native unit UnitGroupLoopCurrent ();
native void UnitGroupLoopEnd ();

//--------------------------------------------------------------------------------------------------
// Markers
//--------------------------------------------------------------------------------------------------
native marker   Marker (string link);
native marker   MarkerCastingPlayer (string link, int player);
native marker   MarkerCastingUnit (string link, unit u);

native void     MarkerSetCastingPlayer (marker m, int player);
native int      MarkerGetCastingPlayer (marker m);

native void     MarkerSetCastingUnit (marker m, unit u);
native unit     MarkerGetCastingUnit (marker m);

native void     MarkerSetMatchFlag (marker m, int flag, bool state);
native bool     MarkerGetMatchFlag (marker m, int flag);

native void     MarkerSetMismatchFlag (marker m, int flag, bool state);
native bool     MarkerGetMismatchFlag (marker m, int flag);

//--------------------------------------------------------------------------------------------------
// Math
//--------------------------------------------------------------------------------------------------
// General math
native fixed SquareRoot (fixed x);
native fixed Pow (fixed x, fixed power);
native fixed ModF (fixed x, fixed m);
native fixed MinF (fixed x1, fixed x2);
native fixed MaxF (fixed x1, fixed x2);
native fixed AbsF (fixed x);

native int   ModI (int x, int m);
native int   MinI (int x1, int x2);
native int   MaxI (int x1, int x2);
native int   AbsI (int x);

// Trigonometry
// Note: All angles are in degrees
native fixed Sin (fixed degrees);
native fixed Cos (fixed degrees);
native fixed Tan (fixed degrees);
native fixed ASin (fixed x);
native fixed ACos (fixed x);
native fixed ATan (fixed x);
native fixed ATan2 (fixed y, fixed x);

// Random
// Note: Bounds are inclusive
//
native int RandomInt (int min, int max);
native fixed RandomFixed (fixed min, fixed max);
bool OneIn (int value) { return RandomInt(1, value) == 1; }

//--------------------------------------------------------------------------------------------------
// Melee
// 
// Game initialization and configuration associated with standard melee games
//--------------------------------------------------------------------------------------------------
native void     MeleeInitResourcesForPlayer (int player, string race);
native void     MeleeInitResources ();

native void     MeleeInitUnitsForPlayer (int player, string race, point position);
native void     MeleeInitUnits ();

native void     MeleeInitAI ();

const int c_meleeOptionReveal   = 0;
const int c_meleeOptionDefeat   = 1;
const int c_meleeOptionVictory  = 2;

native void     MeleeSetOption (int player, int option, bool value);
native bool     MeleeGetOption (int player, int option);
native void     MeleeInitOptions ();

//--------------------------------------------------------------------------------------------------
// Mercenary
//--------------------------------------------------------------------------------------------------
const int c_invalidMercenaryId				= 0;

const int c_mercenaryStateEnabled           = 0;
const int c_mercenaryStateDisabled          = 1;
const int c_mercenaryStatePurchased         = 2;
const int c_mercenaryStateHidden            = 3;
const int c_mercenaryStateNew               = 4;

native int      MercenaryCreate (playergroup inPlayerGroup, int inState);
native int      MercenaryLastCreated ();
native void     MercenaryDestroy (int inMercenaryId);

native void     MercenarySetPlayerGroup (int inMercenaryId, playergroup inPlayerGroup);
native void     MercenarySetState (int inMercenaryId, int inState);
native void     MercenarySetCost (int inMercenaryId, int inCost);
native void     MercenarySetTitleText (int inMercenaryId, text inText);
native void     MercenarySetDescriptionText (int inMercenaryId, text inText);
native void     MercenarySetCostText (int inMercenaryId, text inText);
native void     MercenarySetUnitText (int inMercenaryId, text inText);
native void     MercenarySetAvailabilityText (int inMercenaryId, text inText);
native void     MercenarySetSpecialText (int inMercenaryId, text inText);
native void     MercenarySetTooltipText (int inMercenaryId, text inText);
native void     MercenarySetModelLink (int inMercenaryId, string inModelLink);
native void     MercenarySetScenePath (int inMercenaryId, string inFilePath);
native void     MercenarySetImageFilePath (int inMercenaryId, string inFilePath);
native void     MercenarySetRecentlyPurchased (int inMercenaryId, bool inRecent);
native void     MercenaryPurchase (int inMercenaryId);

native bool     MercenaryIsRecentlyPurchased (int inMercenaryId);

native void     MercenarySetSelected (playergroup inPlayerGroup, int inMercenaryId);
native int      MercenaryGetSelected (int player);

// Mercenary events
native void     TriggerAddEventMercenaryPanelExit (trigger t, int player);
native void     TriggerAddEventMercenaryPanelPurchase (trigger t, int player);
native void     TriggerAddEventMercenaryPanelSelectionChanged (trigger t, int player, int inMercenaryId);
                
//--------------------------------------------------------------------------------------------------
// Minimap
//--------------------------------------------------------------------------------------------------
native void     MinimapPing (playergroup players, point position, fixed duration, color c);

//--------------------------------------------------------------------------------------------------
// Misc
//--------------------------------------------------------------------------------------------------
native void    PerfTestStart (text name);
native void    PerfTestStop ();
native void    PerfTestGetFPS ();
native void    UnitStatsStart (text name, text unitName, text unitFood);
native void    UnitStatsStop ();
native void    EngineReset ();

//--------------------------------------------------------------------------------------------------
// Movie
//--------------------------------------------------------------------------------------------------
native void     MoviePlayAfterGame (playergroup players, string assetLink);
native void     MovieStartRecording (string inName);     //  Blizzard maps only
native void     MovieStopRecording ();     //  Blizzard maps only
native void     MovieAddSubTitle (string title, int duration, int timeStamp);     //  Blizzard maps only
native void     MovieAddSubTitleText (text title, int duration, int timeStamp);     //  Blizzard maps only
native void     MovieAddTriggerFunction (string function, int timeStamp);     //  Blizzard maps only

native void     TriggerAddEventMovieStarted (trigger t, int player);
native void     TriggerAddEventMovieFinished (trigger t, int player);
native void     TriggerAddEventMovieFunction (trigger t, int player, string functionName);

//--------------------------------------------------------------------------------------------------
// Objectives
//--------------------------------------------------------------------------------------------------
const int c_invalidObjectiveId			= 0;

const int c_primaryObjectivesId			= 1;
const int c_secondaryObjectivesId		= 2;

const int c_objectiveStateUnknown       = -1;
const int c_objectiveStateHidden        = 0;
const int c_objectiveStateActive        = 1;
const int c_objectiveStateCompleted     = 2;
const int c_objectiveStateFailed        = 3;

native int	ObjectiveCreate3 (
				text inName,
                text inDescription,
                int inState,
                bool inVisible,
                bool inPrimary
            );

native int          ObjectiveLastCreated ();
native void         ObjectiveDestroy (int inObjective);
native void         ObjectiveDestroyAll (playergroup inPlayers);

native void         ObjectiveShow (int inObjective, playergroup inPlayers, bool inShow);
native bool         ObjectiveVisible (int inObjective, int inPlayer);

native void         ObjectiveSetName (int inObjective, text inName);
native text         ObjectiveGetName (int inObjective);

native void         ObjectiveSetDescription (int inObjective, text inText);
native text         ObjectiveGetDescription (int inObjective);

native void         ObjectiveSetState (int inObjective, int inState);
native int          ObjectiveGetState (int inObjective);

native void         ObjectiveSetPlayerGroup (int inObjective, playergroup inPlayers);
native playergroup  ObjectiveGetPlayerGroup (int inObjective);

native void         ObjectiveSetPrimary (int inObjective, bool inPrimary);
native bool         ObjectiveGetPrimary (int inObjective);

//--------------------------------------------------------------------------------------------------
// Orders
// - Use a "null" abilcmd for "smart" orders (automatically determine ability based on target)
//--------------------------------------------------------------------------------------------------
native abilcmd  AbilityCommand (string inAbil, int inCmdIndex);
native string   AbilityCommandGetAbility (abilcmd inAbilCmd);
native int      AbilityCommandGetCommand (abilcmd inAbilCmd);

// - Command "action" type, which can be used to determine if the command needs a target or not
//
const int c_cmdActionNone       = 0;
const int c_cmdActionInstant    = 1;
const int c_cmdActionTarget     = 2;

native int      AbilityCommandGetAction (abilcmd inAbilCmd);

native order    Order (abilcmd inAbilCmd);
native order    OrderTargetingPoint (abilcmd inAbilCmd, point inPoint);
native order    OrderTargetingRelativePoint (abilcmd inAbilCmd, point inPoint);
native order    OrderTargetingUnit (abilcmd inAbilCmd, unit inUnit);
native order    OrderTargetingUnitGroup (abilcmd inAbilCmd, unitgroup inUnitGroup);
native order    OrderTargetingItem (abilcmd inAbilCmd, unit inItem);
native order    OrderSetAutoCast (abilcmd inAbilCmd, bool inAutoCastOn);

native void     OrderSetAbilityCommand (order inOrder, abilcmd inAbilCmd);
native abilcmd  OrderGetAbilityCommand (order inOrder);

native void     OrderSetPlayer (order inOrder, int inPlayer);
native int      OrderGetPlayer (order inOrder);

const int c_orderTargetNone         = 0;
const int c_orderTargetPoint        = 1;
const int c_orderTargetUnit         = 2;
const int c_orderTargetItem         = 3;

native int      OrderGetTargetType (order inOrder);

native bool     OrderSetTargetPlacement (order inOrder, point inPoint, unit inPlacer, string inType);
native void     OrderSetTargetPoint (order inOrder, point inPoint);
native point    OrderGetTargetPoint (order inOrder);
native point    OrderGetTargetPosition (order inOrder); // doesn't care what the target type is

native void     OrderSetTargetUnit (order inOrder, unit inUnit);
native unit     OrderGetTargetUnit (order inOrder);
native void     OrderSetTargetPassenger (order inOrder, unit inUnit);

native void     OrderSetTargetItem (order inOrder, unit inItem);
native unit     OrderGetTargetItem (order inOrder);

native void     OrderSetFlag (order inOrder, int inFlag, bool inValue);
native bool     OrderGetFlag (order inOrder, int inFlag);

//--------------------------------------------------------------------------------------------------
// Ping
//--------------------------------------------------------------------------------------------------
const int c_invalidPingId = 0;

native int         PingCreate (
                        playergroup players,
                        string modelLink,
                        point position,
                        color intColor,
                        fixed duration
                    );
native int          PingLastCreated ();
native void         PingDestroy (int p);
native void         PingDestroyAll ();

native void         PingSetPlayerGroup (int p, playergroup playerMask);
native playergroup  PingGetPlayerGroup (int p);

native void         PingSetModel (int p, string modelLink);

native void         PingSetPosition (int p, point position);
native point        PingGetPosition (int p);

native void         PingSetScale (int p, fixed scale);
native fixed        PingGetScale (int p);

native void         PingSetRotation (int p, fixed rotation);
native fixed        PingGetRotation (int p);

native void         PingSetColor (int p, color intColor);
native color        PingGetColor (int p);

native void         PingSetDuration (int p, fixed duration);
native fixed        PingGetDuration (int p);

native void         PingSetUnit (int p, unit u);
native unit         PingGetUnit (int p);

native void         PingSetTooltip (int p, text tooltip);
native text         PingGetTooltip (int p);

native void         PingSetVisible (int p, bool isVisible);
native bool         PingIsVisible (int p);

//--------------------------------------------------------------------------------------------------
// Planet
//--------------------------------------------------------------------------------------------------
const int c_invalidPlanetId     = 0;

const int c_planetStateHidden		= 0;
const int c_planetStateActive		= 1;
const int c_planetStateEmphasized   = 2;
    
const int c_planetPanelContactButtonStateDisabled = 0;
const int c_planetPanelContactButtonStateBlinking = 1;
const int c_planetPanelContactButtonStatePlay = 2;    
const int c_planetPanelContactButtonStatePause = 3;   
    
native int          PlanetCreate (playergroup inPlayerGroup, int inState);
native int          PlanetLastCreated ();

native void         PlanetDestroy (int inPlanetId);
native void         PlanetDestroyAll (playergroup inPlayerGroup);

native void         PlanetSetSelected (playergroup inPlayerGroup, int inPlanetId);
native int          PlanetGetSelected (int player);
native void         PlanetClearSelected (playergroup inPlayerGroup);

native void         PlanetSetPlayerGroup (int inPlanetId, playergroup inPlayerGroup);
native void         PlanetSetState (int inPlanetId, int inState);
native void         PlanetSetPlanetName (int inPlanetId, text inText);
native void         PlanetSetDescriptionText (int inPlanetId, text inText);
native void         PlanetSetTooltipText (int inPlanetId, text inText);
native void         PlanetSetContactTooltipText (int inPlanetId, text inText);
native void         PlanetSetTechnologyTooltipText (int inPlanetId, text inText);
native void         PlanetSetMissionTitle (int inPlanetId, text inText);
native void         PlanetSetMissionName (int inPlanetId, text inText);
native void         PlanetSetPrimaryObjectiveTitle (int inPlanetId, text inText);
native void         PlanetSetPrimaryObjectiveText (int inPlanetId, text inText);
native void         PlanetSetSecondaryObjectiveTitle (int inPlanetId, text inText);
native void         PlanetSetSecondaryObjectiveText (int inPlanetId, text inText);
native void         PlanetSetRewardTitle (int inPlanetId, text inText);
native void         PlanetSetRewardText (int inPlanetId, text inText);
native void         PlanetSetResearchTitle (int inPlanetId, text inText);
native void         PlanetSetResearchText (int inPlanetId, text inText);
native void         PlanetSetBonusTitle (int inPlanetId, text inText);
native void         PlanetSetBonusText (int inPlanetId, text inText);
native void         PlanetSetPlanetText (int inPlanetId, text inText);
native void         PlanetSetTechnologyTitle (int inPlanetId, text inText);
native void         PlanetSetTechnologyName (int inPlanetId, text inText);
native void         PlanetSetTechnologyText (int inPlanetId, text inText);
native void         PlanetSetContactTitle (int inPlanetId, text inText);
native void         PlanetSetContactName (int inPlanetId, text inText);
native void         PlanetSetContactModelLink (int inPlanetId, string inContactModelLink);
native void         PlanetSetBackgroundModelLink (int inPlanetId, string inBackgroundModelLink);
native void         PlanetSetPlanetModelLink (int inPlanetId, string inPlanetModelLink);
native void         PlanetSetTechnologyIconFilePath (int inPlanetId, string inTechnologyIconFilePath);
native void         PlanetSetTechnologyUnitLink (int inPlanetId, string inUnitLink);

native void         PlanetPanelSetContactButtonState (playergroup players, int inState);
native int          PlanetPanelGetContactButtonState (int player);
native void         PlanetPanelSetBackButtonEnabled (playergroup players, bool inEnabled);
native void         PlanetPanelSetBackgroundImage (playergroup players, string inFilePath);

// Planet events
native void         TriggerAddEventPlanetMissionLaunched (trigger t, int player);
native void         TriggerAddEventPlanetMissionSelected (trigger t, int player, int planetId);
native void         TriggerAddEventPlanetPanelCanceled (trigger t, int player);
native void         TriggerAddEventPlanetPanelReplayPressed (trigger t, int player);
native void         TriggerAddEventPlanetPanelBirthComplete (trigger t, int player);
native void         TriggerAddEventPlanetPanelDeathComplete (trigger t, int player);

native int          EventPlanetPanelMissionSelected ();
native int          EventPlanetPanelDifficultySelected ();

//--------------------------------------------------------------------------------------------------
// Victory Panel
//--------------------------------------------------------------------------------------------------
native void         VictoryPanelSetVictoryText (text inText);
native void         VictoryPanelSetMissionTitle (text inText);
native void         VictoryPanelSetMissionText (text inText);
native void         VictoryPanelSetMissionTimeTitle (text inText);
native void         VictoryPanelSetMissionTimeText (text inText);
native void         VictoryPanelSetRewardTitle (text inText);
native void         VictoryPanelSetRewardText (text inText);
native void         VictoryPanelSetRewardCredits (int inCredits);
native void         VictoryPanelSetAchievementsTitle (text inText);
native void         VictoryPanelSetStatisticsTitle (text inText);
native void         VictoryPanelSetCustomStatisticText (text inText);
native void         VictoryPanelSetCustomStatisticValue (text inText);
native void         VictoryPanelSetPlanetModelLink (string inModelLink);
native void         VictoryPanelSetBackgroundFilePath (string inFilePath);
native void         VictoryPanelAddCustomStatisticLine (text inText, text inValueText);
native void         VictoryPanelClearCustomStatisticTable ();
native void         VictoryPanelAddTrackedStatistic (string inStatistic);
native void         VictoryPanelAddAchievement (string inAchievement);

native void         TriggerAddEventVictoryPanelExit (trigger t, int player);
native void         TriggerAddEventVictoryPanelPlayMissionAgain (trigger t, int player);

native int          EventVictoryPanelDifficultySelected ();

//--------------------------------------------------------------------------------------------------
// Help
//--------------------------------------------------------------------------------------------------
const int c_helpPanelPageTips = 0;
const int c_helpPanelPageTutorials = 1;

native void	        HelpPanelAddTip (playergroup players, text titleText, text descriptionText, text alertText, string iconPath);
native void	        HelpPanelAddHint (playergroup players, text titleText, text descriptionText, string iconPath);
native void	        HelpPanelAddTutorial (playergroup players, text titleText, text descriptionText, string iconPath, string moviePath, bool flashing);
native void         HelpPanelDisplayPage (playergroup players, int inPage);
native void         HelpPanelEnableTechTreeButton (playergroup inPlayerGroup, bool inEnable);
native void         HelpPanelEnableTechGlossaryButton (playergroup inPlayerGroup, bool inEnable);
native void         HelpPanelShowTechTreeRace (playergroup inPlayerGroup, string inRace, bool inShow);

native void         TipAlertPanelClear (playergroup inPlayerGroup);

//--------------------------------------------------------------------------------------------------
// Players
//--------------------------------------------------------------------------------------------------
const int c_playerAny = -1;
const int c_maxPlayers = 32;

// Player properties
const int c_playerPropMinerals              = 0;
const int c_playerPropVespene               = 1;
const int c_playerPropTerrazine             = 2;
const int c_playerPropCustom                = 3;
const int c_playerPropSuppliesUsed          = 4;
const int c_playerPropSuppliesMade          = 5;
const int c_playerPropSuppliesLimit         = 6;
const int c_playerPropCredits               = 7;
const int c_playerPropCreditsSpent          = 8;
const int c_playerPropResearchPoints        = 9;
const int c_playerPropResearchPointsSpent   = 10;
const int c_playerPropHandicap              = 11;
const int c_playerPropMineralsCollected     = 12;
const int c_playerPropVespeneCollected      = 13;
const int c_playerPropTerrazineCollected    = 14;
const int c_playerPropCustomCollected       = 15;

// Player property operations
const int c_playerPropOperSetTo         = 0;
const int c_playerPropOperAdd           = 1;
const int c_playerPropOperSubtract      = 2;

native void     PlayerModifyPropertyInt (int inPlayer, int inProp, int inOper, int inVal);
native void     PlayerModifyPropertyFixed (int inPlayer, int inProp, int inOper, fixed inVal);

native int      PlayerGetPropertyInt (int inPlayer, int inProp);
native fixed    PlayerGetPropertyFixed (int inPlayer, int inProp);

// Player status
const int c_playerStatusUnused          = 0;    // No player in this slot
const int c_playerStatusActive          = 1;    // Player is actively playing
const int c_playerStatusLeft            = 2;    // Player has left the game

native int      PlayerStatus (int inPlayer);
native int      PlayerType (int inPlayer); // Returns c_playerType<*> value
native text     PlayerName (int inPlayer);
native string   PlayerRace (int inPlayer);
native int      PlayerDifficulty (int inPlayer);
native void     PlayerSetDifficulty (int inPlayer, int inDifficulty);
native point    PlayerStartLocation (int inPlayer);

native void     PlayerSetColorIndex (int inPlayer, int inIndex, bool inChangeUnits);
native int      PlayerGetColorIndex (int inPlayer, bool inDefault);
native text     PlayerColorName (int inColor);

native void PlayerSetAlliance (int inSourcePlayer, int inAllianceId, int inTargetPlayer, bool ally);
native bool PlayerGetAlliance (int inSourcePlayer, int inAllianceId, int inTargetPlayer);

// Player states
const int c_playerStateShowScore			= 0;
const int c_playerStateXPGain				= 1;
const int c_playerStateAbortEnabled			= 2;
const int c_playerStateRestartEnabled		= 3;
const int c_playerStateContinueEnabled		= 4;
const int c_playerStateShowWorldTip			= 5;
const int c_playerStateFidgetingEnabled		= 6;
const int c_playerStateDisplayInLeaderPanel = 7;
const int c_playerStateDisplayInViewMenu    = 8;

native void PlayerSetState (int inPlayer, int inState, bool inVal);
native bool PlayerGetState (int inPlayer, int inState);

native void PlayerBeaconClearTarget (int inPlayer, int inBeacon);
native bool PlayerBeaconIsAutoCast (int inPlayer, int inBeacon);
native bool PlayerBeaconIsFromUser (int inPlayer, int inBeacon);
native bool PlayerBeaconIsSet (int inPlayer, int inBeacon);
native point PlayerBeaconGetTargetPoint (int inPlayer, int inBeacon);
native unit PlayerBeaconGetTargetUnit (int inPlayer, int inBeacon);
native void PlayerBeaconSetAutoCast (int inPlayer, int inBeacon, bool enable);
native void PlayerBeaconSetTargetPoint (int inPlayer, int inBeacon, point inPoint, bool alert);
native void PlayerBeaconSetTargetUnit (int inPlayer, int inBeacon, unit inUnit, bool alert);
native void PlayerBeaconAlert (int inPlayer, int inBeacon, string inAlert, text inMessage);

native void PlayerPauseAllCharges (int inPlayer, bool inPause);
native void PlayerPauseAllCooldowns (int inPlayer, bool inPause);

native void PlayerAddChargeRegen (int inPlayer, string inCharge, fixed inVal);
native fixed PlayerGetChargeRegen (int inPlayer, string inCharge);
native void PlayerAddChargeUsed (int inPlayer, string inCharge, fixed inVal);
native fixed PlayerGetChargeUsed (int inPlayer, string inCharge);

native void PlayerAddCooldown (int inPlayer, string inCooldown, fixed inVal);
native fixed PlayerGetCooldown (int inPlayer, string inCooldown);

native void PlayerCreateEffectPoint (int inPlayer, string inEffect, point inTarget);
native void PlayerCreateEffectUnit (int inPlayer, string inEffect, unit inTarget);
native int PlayerValidateEffectPoint (int inPlayer, string inEffect, point inTarget);
native int PlayerValidateEffectUnit (int inPlayer, string inEffect, unit inTarget);

// Player scores
native void PlayerScoreValueEnableAll (int player, bool enable);
native void PlayerScoreValueEnable (int player, string value, bool enable);
native fixed PlayerScoreValueGetAsFixed (int player, string value);
native int PlayerScoreValueGetAsInt (int player, string value);
native void PlayerScoreValueSetFromFixed (int player, string value, fixed amount);
native void PlayerScoreValueSetFromInt (int player, string value, int amount);

// Player events
const int c_gameResultUndecided     = 0;
const int c_gameResultVictory       = 1;
const int c_gameResultDefeat        = 2;
const int c_gameResultTie           = 3;

native void TriggerAddEventPlayerAllianceChange (trigger inTrigger, int player);
native void TriggerAddEventPlayerLeft (trigger inTrigger, int player, int inResult);
native void TriggerAddEventPlayerPropChange (trigger inTrigger, int player, int inProp);
native void TriggerAddEventPlayerAIWave (trigger inTrigger, int player);

native int  EventPlayer ();
native int  EventPlayerProperty ();

// Difficulty info
native text DifficultyName (int inDifficulty);
native text DifficultyNameCampaign (int inDifficulty);
native bool DifficultyEnabled (int inDifficulty);
native int  DifficultyAPM (int inDifficulty);   // AI Actions Per Minute

//--------------------------------------------------------------------------------------------------
// Player Groups
//--------------------------------------------------------------------------------------------------
native playergroup PlayerGroupEmpty ();
native playergroup PlayerGroupCopy (playergroup inGroup);
native playergroup PlayerGroupAll ();
native playergroup PlayerGroupActive ();
native playergroup PlayerGroupSingle (int inPlayer);

const int c_playerGroupAlly     = 0;    // Allied players of the given player
const int c_playerGroupEnemy    = 1;    // Enemy players of the given player
const int c_playerGroupAny      = 2;    // Any player.

native playergroup PlayerGroupAlliance (int inType, int inPlayer);

native void PlayerGroupClear (playergroup inGroup);
native void PlayerGroupAdd (playergroup inGroup, int inPlayer);
native void PlayerGroupRemove (playergroup inGroup, int inPlayer);

native int  PlayerGroupCount (playergroup inGroup);
native int  PlayerGroupPlayer (playergroup inGroup, int inIndex);
native bool PlayerGroupHasPlayer (playergroup inGroup, int inPlayer);

//--------------------------------------------------------------------------------------------------
// Points
//--------------------------------------------------------------------------------------------------
native point Point (fixed x, fixed y);
native point PointWithOffset (point p, fixed x, fixed y);
native point PointWithOffsetPolar (point p, fixed distance, fixed angle);
native point PointFromId (int id);

native fixed PointGetX (point p);
native fixed PointGetY (point p);
native void  PointSet (point p1, point p2);

native fixed PointGetFacing (point p);
native void  PointSetFacing (point p, fixed inFacing);

native fixed PointGetHeight (point p);
native void  PointSetHeight (point p, fixed inHeight);

native bool  PointsInRange (point p1, point p2, fixed range);

native fixed AngleBetweenPoints (point p1, point p2);
native fixed DistanceBetweenPoints (point p1, point p2);

native int   PointPathingCost (point p1, point p2);
native fixed PointPathingCliffLevel (point p);
native bool  PointPathingPassable (point p);
native bool  PointPathingIsConnected (point p1, point p2);
native point PointReflect (point source, point dest, fixed angle);

//--------------------------------------------------------------------------------------------------
// Portrait
//--------------------------------------------------------------------------------------------------
const int c_noPortraitChannel      = -1;
const int c_invalidPortraitId       = 0;

//These need to match the ERenderType enum in CFrame.h
const int c_portraitRenderTypeHDR = 0;
const int c_portraitRenderTypeLDR = 1;
    
native int          PortraitCreate (
                        int offsetX,
                        int offsetY,
                        int anchor,
                        int width,
                        int height,
                        string modelLink,
                        string cameraLink,
                        string animProps,
                        bool visible,
                        bool waitUntilLoaded
                    );
native int          PortraitLastCreated ();
native void         PortraitDestroy (int p);
native void         PortraitDestroyAll ();
native void         PortraitWaitForLoad (int p);

native int          PortraitGetGame ();
native int          PortraitGetPlanetPanel ();
native void         PortraitSetModel (int p, string modelLink, bool waitUntilLoaded);
native void         PortraitSetModelAnim (int p, string modelLink, string anim, int flags, bool waitUntilLoaded);
native void         PortraitSetAnim (int p, string anim);
native void         PortraitSetCamera (int p, string cameraName);
native void         PortraitSetSize (int p, int width, int height);
native void         PortraitSetPosition (int p, int anchor, int offsetX, int offsetY);
native void         PortraitSetFullscreen (int p, bool isFullscreen);
native void         PortraitSetOffscreen (int p, bool isOffscreen);
native void         PortraitSetVisible (int p, playergroup players, bool isVisible, bool forceVisible);
native void         PortraitSetBorderVisible (int p, bool isBorderVisible);
native void         PortraitSetBorderTexture (int p, string inBorderFilePath);
native void         PortraitSetBackgroundVisible (int p, bool isBackgroundVisible);
native void         PortraitSetChannel (int p, int channel);
native void         PortraitSetChannelPortrait (int p, int dest, int channel);
native void         PortraitUseTransition (int p, bool useTransition);
native void         PortraitSetRenderType (int p, int renderType);
native void         PortraitSetMuted (int p, bool isMuted);
native void         PortraitForceTransition (int p, bool isVisible, bool isInstant);
native void         PortraitSetPaused (int p, bool isPaused);
native void         PortraitSetTintColor (int p, color inColor);
native void         PortraitSetLight (int p, string lightLink);
native void         PortraitSetTransitionModel (int p, string modelLink);

native bool         PortraitVisible (int p, int player);

//--------------------------------------------------------------------------------------------------
// Preload
//--------------------------------------------------------------------------------------------------
native void PreloadAsset (string key, bool queue);
native void PreloadImage (string path, bool queue);
native void PreloadModel (string path, bool queue);
native void PreloadMovie (string path, bool queue);
native void PreloadObject (int catalog, string id, bool queue);
native void PreloadScene (string path, bool queue);
native void PreloadScript (string path, bool queue);
native void PreloadSound (string path, bool queue);

//--------------------------------------------------------------------------------------------------
// Purchase
//--------------------------------------------------------------------------------------------------
const int c_invalidPurchaseItemId			= 0;
const int c_invalidPurchaseCategoryId       = 0;
const int c_invalidPurchaseGroupId			= 0;

const int c_purchaseCategoryStateEnabled	= 0;
const int c_purchaseCategoryStateDisabled	= 1;
const int c_purchaseCategoryStateHidden		= 2;
const int c_purchaseCategoryStateNew		= 3;

const int c_purchaseGroupStateEnabled       = 0;
const int c_purchaseGroupStateDisabled      = 1;
const int c_purchaseGroupStateHidden        = 2;
const int c_purchaseGroupStateNew           = 3;

const int c_purchaseItemStateEnabled		= 0;
const int c_purchaseItemStateDisabled		= 1;
const int c_purchaseItemStatePurchased		= 2;
const int c_purchaseItemStateHidden			= 3;
//--------------------------------------------------------------------------------------------------
native int              PurchaseCategoryCreate (playergroup inPlayerGroup, int inSlot);
native int              PurchaseCategoryLastCreated ();

native void             PurchaseCategoryDestroy (int inPurchaseCategoryId);
native void             PurchaseCategoryDestroyAll (playergroup inPlayerGroup);

native void             PurchaseCategorySetPlayerGroup (int inPurchaseCategoryId, playergroup inPlayerGroup);
native void             PurchaseCategorySetNameText (int inPurchaseCategoryId, text inText);
native void             PurchaseCategorySetState (int inPurchaseCategoryId, int inState);
native void             PurchaseCategorySetSlot (int inPurchaseCategoryId, int inSlot);

native void             PurchaseSetSelectedPurchaseCategory (playergroup inPlayerGroup, int inPurchaseCategoryId);
native int              PurchaseGetSelectedPurchaseCategory (int inPlayer);
//--------------------------------------------------------------------------------------------------
native int              PurchaseGroupCreate (playergroup inPlayerGroup, int inPurchaseCategoryId, int inSlot);                            
native int              PurchaseGroupLastCreated ();

native void             PurchaseGroupDestroy (int inPurchaseGroupId);
native void             PurchaseGroupDestroyAll (playergroup inPlayerGroup);

native void             PurchaseGroupSetPlayerGroup (int inPurchaseGroupId, playergroup inPlayerGroup);
native void             PurchaseGroupSetNameText (int inPurchaseGroupId, text inText);
native void             PurchaseGroupSetTooltipText (int inPurchaseGroupId, text inText);
native void             PurchaseGroupSetIconFilePath (int inPurchaseGroupId, string inFilePath);
native void             PurchaseGroupSetState (int inPurchaseGroupId, int inState);
native void             PurchaseGroupSetSlot (int inPurchaseGroupId, int inSlot);
native void             PurchaseGroupSetUnitLink (int inPurchaseGroupId, string inUnitLink);

//--------------------------------------------------------------------------------------------------
native int              PurchaseItemCreate (playergroup inPlayerGroup, int inPurchaseGroupId, int inSlot);
native int              PurchaseItemLastCreated ();

native void             PurchaseItemDestroy (int inPurchaseItemId);
native void             PurchaseItemDestroyAll (playergroup inPlayerGroup);

native void             PurchaseItemSetPlayerGroup (int inPurchaseItemId, playergroup inPlayerGroup);
native void             PurchaseItemSetNameText (int inPurchaseItemId, text inText);
native void             PurchaseItemSetTooltipText (int inPurchaseItemId, text inText);
native void             PurchaseItemSetDescriptionText (int inPurchaseItemId, text inText);
native void             PurchaseItemSetIconFilePath (int inPurchaseItemId, string inFilePath);
native void             PurchaseItemSetMovieFilePath (int inPurchaseItemId, string inFilePath);
native void             PurchaseItemSetCost (int inPurchaseItemId, int inCost);
native void             PurchaseItemSetState (int inPurchaseItemId, int inState);
native void             PurchaseItemSetRecentlyPurchased (int inPurchaseItemId, bool inRecent);
native void             PurchaseItemSetSlot (int inPurchaseItemId, int inSlot);
native void             PurchaseItemPurchase (int inPurchaseItemId);

native bool             PurchaseItemIsRecentlyPurchased (int inPurchaseItemId);

native void             PurchaseSetSelectedPurchaseItem (playergroup inPlayerGroup, int inPurchaseItemId);
native int              PurchaseGetSelectedPurchaseItem (int inPlayer);
//--------------------------------------------------------------------------------------------------
// Purchase events
native void             TriggerAddEventPurchaseMade (trigger t, int player, int inPurchaseItemId);
native void             TriggerAddEventPurchaseExit (trigger t, int player);
native void             TriggerAddEventSelectedPurchaseItemChanged (trigger t, int player, int inPurchaseItemId);
native void             TriggerAddEventSelectedPurchaseCategoryChanged (trigger t, int player, int inPurchaseCategoryId);

native int              EventPurchaseMade ();

//--------------------------------------------------------------------------------------------------
// Regions
// 
// Regions are comprised of any number of basic shapes (rectangles, circles, etc).  Each shape
// can be specified as positive or negative.  A point is considered within the region if it is
// within a least one positive shape but not within any negative shapes.
//
// Example:
// An L-shaped region could be created with either
// 
// (a) Two positive rectangles
//      _
//     | | <-- (+)
//     | |
//     |_|___
//     |_____| <-- (+)
//
// (b) One positive and one negative rectangle
//        _____
//      _|___  |
//     | |   | |
//     | |   | | <-- (-)
//     | |___|_|
//     |_____|   <-- (+)
//
// The "bounds" of the region are defined as the smallest rectangle which contains all positive
// shapes.  The "center" is the average of the center of all positive shapes, weighted by area.
//
// The "offset" of the region is relative to the shape coordinates.  The center and bounds take
// the offset into account.
//
//--------------------------------------------------------------------------------------------------
native region RegionEmpty ();
native region RegionEntireMap ();
native region RegionPlayableMap ();
native void RegionPlayableMapSet (region r);

native region RegionRect (fixed minx, fixed miny, fixed maxx, fixed maxy);
native region RegionCircle (point center, fixed radius);
native region RegionFromId (int id);

native void RegionAddRect (region r, bool positive, fixed minx, fixed miny, fixed maxx, fixed maxy);
native void RegionAddCircle (region r, bool positive, point center, fixed radius);
native void RegionAddRegion (region r, region regToAdd);

native void  RegionSetOffset (region r, point offset);
native point RegionGetOffset (region r);

native bool RegionContainsPoint (region r, point p);

// RegionRandomPoint attempts to find a random point somewhere within the region.  For regions
// containing only a single positive shape, this is guaranteed to work, but for more complex
// sets of shapes it may give up after a maximum number of tries and return (0, 0).
//
native point RegionRandomPoint (region r);

native point RegionGetBoundsMin (region r);
native point RegionGetBoundsMax (region r);
native point RegionGetCenter (region r);

// Setting the center will adjust the offset such that
// the region becomes centered on the given point.
//
native void RegionSetCenter (region r, point p);

// RegionAttachToUnit will attach the region to the given unit such that the region center
// is always at the unit's position plus the given offset.  Use a null unit to detach the region
// from whatever unit it may already be attached to.
//
native void RegionAttachToUnit (region r, unit u, point offset);
native unit RegionGetAttachUnit (region r);

//--------------------------------------------------------------------------------------------------
// Research
//--------------------------------------------------------------------------------------------------
const int c_invalidResearchCategoryId			= 0;
const int c_invalidResearchTierId				= 0;
const int c_invalidResearchItemId				= 0;

const int c_researchItemStateEnabled            = 0;
const int c_researchItemStateDisabled           = 1;
const int c_researchItemStatePurchased          = 2;
//--------------------------------------------------------------------------------------------------
native int          ResearchCategoryCreate (playergroup inPlayerGroup, int inSlot);
native int          ResearchCategoryLastCreated ();

native void         ResearchCategoryDestroy (int inResearchCategoryId);
native void         ResearchCategoryDestroyAll (playergroup inPlayerGroup);

native void         ResearchCategorySetPlayerGroup (int inResearchCategoryId, playergroup inPlayerGroup);
native void         ResearchCategorySetSlot (int inResearchCategoryId, int inSlot);
native void         ResearchCategorySetNameText (int inResearchCategoryId, text inText);
native void         ResearchCategorySetCurrentLevel (int inResearchCategoryId, int inLevel);
native void         ResearchCategorySetLastLevel (int inResearchCategoryId, int inLevel);
//--------------------------------------------------------------------------------------------------
native int          ResearchTierCreate (playergroup inPlayerGroup, int inResearchCategoryId, int inSlot);
native int          ResearchTierLastCreated ();

native void         ResearchTierDestroy (int inResearchTierId);
native void         ResearchTierDestroyAll (playergroup inPlayerGroup);

native void         ResearchTierSetPlayerGroup (int inResearchTierId, playergroup inPlayerGroup);
native void         ResearchTierSetSlot (int inResearchTierId, int inSlot);
native void         ResearchTierSetRequiredLevel (int inResearchTierId, int inLevel);
native void         ResearchTierSetMaxPurchasesAllowed (int inResearchTierId, int inMax);
//--------------------------------------------------------------------------------------------------
native int          ResearchItemCreate (playergroup inPlayerGroup, int inResearchTierId, int inState);
native int          ResearchItemLastCreated ();

native void         ResearchItemDestroy (int inResearchItemId);
native void         ResearchItemDestroyAll (playergroup inPlayerGroup);

native void         ResearchItemSetPlayerGroup (int inResearchItemId, playergroup inPlayerGroup);
native void         ResearchItemSetSlot (int inResearchItemId, int inSlot);
native void         ResearchItemSetState (int inResearchItemId, int inState);
native void         ResearchItemSetNameText (int inResearchItemId, text inText);
native void         ResearchItemSetDescriptionText (int inResearchItemId, text inText);
native void         ResearchItemSetTooltipText (int inResearchItemId, text inText);
native void         ResearchItemSetConfirmationText (int inResearchItemId, text inText);
native void         ResearchItemSetIconFilePath (int inResearchItemId, string inFilePath);
native void         ResearchItemSetMovieFilePath (int inResearchItemId, string inFilePath);
native void         ResearchItemSetRecentlyPurchased (int inResearchItemId, bool inRecent);

native bool         ResearchItemIsRecentlyPurchased (int inResearchItemId);
native void			ResearchItemPurchase (int inResearchItemId);

native void         ResearchItemSetSelected (playergroup inPlayerGroup, int inResearchItemId);
native int          ResearchItemGetSelected (int inPlayer);

// Research events
native void         TriggerAddEventResearchPanelExit (trigger t, int player);
native void         TriggerAddEventResearchPanelPurchase (trigger t, int player);
native void         TriggerAddEventResearchPanelSelectionChanged (trigger t, int player, int inResearchItemId);

//--------------------------------------------------------------------------------------------------
// Sound
//
// - A specific sound index within the sound list may be specified.
//   Using c_soundIndexAny will choose a sound either sequentially or randomly,
//   based on the sound data.
//
// - Use a "null" playergroup to play the sound for all players.
//
// - 3d sounds are only played for players who currently have vision of the sound position.
//
// - Volumes are expressed as a percent (0-100) of maximum volume.
//--------------------------------------------------------------------------------------------------
const int c_soundIndexAny = -1;

// Sound Info
native soundlink SoundLink (string soundId, int soundIndex);
native string SoundLinkId (soundlink soundId);
native int SoundLinkAsset (soundlink soundId);

// Sound
native void SoundPlay (
    soundlink link,
    playergroup players,
    fixed volume,
    fixed offset
);
native void SoundPlayAtPoint (
    soundlink link,
    playergroup players,
    point inPoint,
    fixed height,
    fixed volume,
    fixed offset
);
native void SoundPlayOnUnit (
    soundlink link,
    playergroup players,
    unit inUnit,
    fixed height,
    fixed volume,
    fixed offset
);

// - SoundPlayScene attempts to synchronize unit animations with the sound duration
native void SoundPlayScene (
    soundlink link,
    playergroup players,
    unitgroup units,
    string animProps
);
native void SoundPlaySceneFile (
    soundlink link,
    playergroup players,
    string sceneFile,
    string camera
);

native sound    SoundLastPlayed ();

native void     SoundStop (sound s, bool fade);
native void     SoundStopAllModelSounds ();
native void     SoundStopAllTriggerSounds (bool fade);

native void     SoundSetVolume (sound s, fixed volume);
native void     SoundSetPosition (sound s, point position, fixed height);

const int c_soundOffsetStart    = 0;
const int c_soundOffsetEnd      = 1;

native void     SoundSetOffset (sound s, fixed offset, int offsetType);
native void     SoundWait (sound s, fixed offset, int offsetType);
native void     SoundAttachUnit (sound s, unit u, fixed height);

// Sound Lengths
// - Note: Since sound files are localized and potentially different for each player,
//         a network query must be sent to all players, and all results must be
//         received before a synchronous result can be accessed.
//
//         SoundLengthQuery     - Initiate a network query for the given sound
//
//         SoundLengthQueryWait - Pause the current thread until all outstanding sound length
//                                query results have been synchronized
//
//         SoundLengthSync      - Retrieve the synchronized sound length result for the given
//                                sound
//
native void     SoundLengthQuery (soundlink info);
native void     SoundLengthQueryWait ();
native fixed    SoundLengthSync (soundlink info);

// Sound channels
native void     SoundChannelSetVolume (playergroup players, int channel, fixed volume, fixed duration);
native void     SoundChannelMute (playergroup players, int channel, bool mute);
native void     SoundChannelPause (playergroup players, int channel, bool pause);
native void     SoundChannelStop (playergroup players, int channel);

// Other properties
native void     SoundSetReverb (string inReverbLink, fixed inDuration, bool inAmbient, bool inGlobal);
native void     SoundSetFactors (fixed distance, fixed doppler, fixed rolloff);

native text     SoundSubtitleText (soundlink link);

//--------------------------------------------------------------------------------------------------
// Soundtracks
//--------------------------------------------------------------------------------------------------
const int c_soundtrackCueAny = -1;
const int c_soundtrackIndexAny = -1;

native void     SoundtrackDefault (playergroup players, int category, string soundtrack, int cue, int index);
native void     SoundtrackPlay (playergroup players, int category, string soundtrack, int cue, int index, bool makeDefault);
native void     SoundtrackPause (playergroup players, int category, bool pause, bool fade);
native void     SoundtrackSetContinuous (playergroup players, int category, bool continuous);
native void     SoundtrackSetDelay (playergroup players, int category, fixed delay);
native void     SoundtrackStop (playergroup players, int category, bool fade);
native void     SoundtrackWait (string soundtrack);

//--------------------------------------------------------------------------------------------------
// Story Mode
//--------------------------------------------------------------------------------------------------
native void     StoryMode (playergroup players, bool storyMode);     //  Blizzard maps only
native void     StorySetChange ();     //  Blizzard maps only

native void     CampaignMode (playergroup players, bool campaignMode);     //  Blizzard maps only

//--------------------------------------------------------------------------------------------------
// Strings
//--------------------------------------------------------------------------------------------------
native int      StringLength (string s);
native string   StringCase (string s, bool upper);
native text     TextCase (text t, bool upper);
native string   StringSub (string s, int start, int end);

const bool c_stringCase = true;
const bool c_stringNoCase = false;

native bool     StringEqual (string s1, string s2, bool caseSens);

// StringFind returns the position of the first occurrence of s2 within s1,
// or c_stringNotFound if there isn't one.
//
const int c_stringNotFound  = -1;

native int      StringFind (string s1, string s2, bool caseSens);

// StringContains
const int c_stringBegin     = 0;    // True if s1 begins with s2
const int c_stringEnd       = 1;    // True if s1 ends with s2
const int c_stringAnywhere  = 2;    // True if s1 contains s2 anywhere

native bool     StringContains (string s1, string s2, int location, bool caseSens);

// StringWord splits the string into words separated by whitespace,
// and returns the word corresponding to the given index.
//
// Ex: StringWord("klaatu barada nikto", 2) will return "barada"
//
native string   StringWord (string s, int index);

// StringReplace replaces the indexed character range in the string with the replacement string
// and returns the result.
//
native string   StringReplace (string s, string replace, int start, int end);

// StringReplaceWord replaces occurrences of the given word in the string with the replacement
// string and returns the result.
//
const int c_stringReplaceAll    = -1;   // Use as maxCount for all occurrences

native string   StringReplaceWord (string s, string word, string replace, int maxCount, bool caseSens);
native text     TextReplaceWord (text t, text word, text replace, int maxCount, bool caseSens);

// StringExternal looks up the given string identifer in the externalized string table
native text     StringExternal (string s);

// StringToText converts the given string to text directly (not externalized)
native text     StringToText (string s);

// TextWithColor applies a formatting tag to the input text for the given color
native text     TextWithColor (text t, color c);

// TextTimeFormat converts a time value, in seconds, to text using a format string
// - The time format string should use the following tokens:
//
//      <hour/>         = hour count, rounded down
//      <hour2/>        = hour count, rounded down, always two digits
//      <hourtotal/>    = total hour count, rounded down
//      <hourtotaln/>   = total hour count, rounded to nearest
//      <hourtotalu/>   = total hour count, rounded up
//      <min/>          = minute count, rounded down
//      <min2/>         = minute count, rounded down, always two digits
//      <mintotal/>     = total minute count, rounded down
//      <mintotaln/>    = total minute count, rounded to nearest
//      <mintotalu/>    = total minute count, rounded up
//      <sec/>          = second count
//      <sec2/>         = second count, always two digits
//      <sectotal/>     = total second count
//      <short/>        = one of "<hour/>h", "<min/>m", or "<sec/>s"
//
//   Examples (these all represent the same value):
//      "<hour/>:<min2/>:<sec2/>"   ->  1:08:38     (this is the default format)
//      "<mintotaln/> minutes"      ->  69 minutes
//      "<mintotal/>:<sec2/>"       ->  68:38
//      "<short/>"                  ->  1h
//
native text     TextTimeFormat (text inFormat, int inSecs);

//--------------------------------------------------------------------------------------------------
// Tech Tree
//--------------------------------------------------------------------------------------------------
const int c_techCountQueuedOnly         = 0;
const int c_techCountQueuedOrBetter     = 1;    // Queued + In Progress + Complete
const int c_techCountInProgressOnly     = 2;
const int c_techCountInProgressOrBetter = 3;    // In Progress + Complete
const int c_techCountCompleteOnly       = 4;
const int c_techCountIncompleteOnly     = 5;    // Queued + In Progress 

native void     TechTreeAbilityAllow (int player, abilcmd inAbilCmd, bool allow);
native int      TechTreeAbilityCount (int player, string abilType, int countType);
native bool     TechTreeAbilityIsAllowed (int player, abilcmd inAbilCmd);

native void     TechTreeBehaviorAllow (int player, string behaviorType, bool allow);
native int      TechTreeBehaviorCount (int player, string behaviorType, int countType);
native bool     TechTreeBehaviorIsAllowed (int player, string behaviorType);
native abilcmd  TechTreeBehaviorProducedAbilCmd (string behaviorType, int index);
native int      TechTreeBehaviorProducedAbilCmdCount (string behaviorType);

native void     TechTreeRequirementsEnable (int player, bool enable);
native bool     TechTreeRequirementsEnabled (int player);
native void     TechTreeRestrictionsEnable (int player, bool enable);
native bool     TechTreeRestrictionsEnabled (int player);

native void     TechTreeUnitAllow (int player, string unitType, bool allow);
native int      TechTreeUnitCount (int player, string unitType, int countType);
native int      TechTreeUnitAliasCount (int player, string unitType, int countType);
native int      TechTreeUnitCountEx (int player, string unitType, string equivType, int countType);
native bool     TechTreeUnitIsAllowed (int player, string unitType);
native void     TechTreeUnitHelp (int player, string unitType, bool display);
native void     TechTreeUnitHelpDefault (int player, bool display);
native abilcmd  TechTreeUnitProducedAbilCmd (string unitType, int index);
native int      TechTreeUnitProducedAbilCmdCount (string unitType);
native string   TechTreeUnitProducesUnit (string unitType, int index);
native int      TechTreeUnitProducesUnitCount (string unitType);
native string   TechTreeUnitProducesUpgrade (string unitType, int index);
native int      TechTreeUnitProducesUpgradeCount (string unitType);

native void     TechTreeUpgradeAddLevel (int player, string upgradeType, int levels);
native void     TechTreeUpgradeAllow (int player, string upgradeType, bool allow);
native int      TechTreeUpgradeCount (int player, string upgradeType, int countType);
native bool     TechTreeUpgradeIsAllowed (int player, string upgradeType);
native abilcmd  TechTreeUpgradeProducedAbilCmd (string upgradeType, int index);
native int      TechTreeUpgradeProducedAbilCmdCount (string upgradeType);

//--------------------------------------------------------------------------------------------------
// Text Tags
//--------------------------------------------------------------------------------------------------
const int c_textTagNone = 0;

// Edge
const int c_textTagEdgeTop      = 0;
const int c_textTagEdgeLeft     = 1;
const int c_textTagEdgeBottom   = 2;
const int c_textTagEdgeRight    = 3;

native int      TextTagCreate (
                    text inText,
                    int inFontSize,
                    point inPoint,
                    fixed inHeightOffset,
                    bool inShow,
                    bool useFogofWar,
                    playergroup inPlayers
                );
native int      TextTagLastCreated ();
native void     TextTagDestroy (int inTag);

native void     TextTagSetText (int inTag, text inText);
native void     TextTagSetTextShadow (int inTag, bool inVal);
native void     TextTagSetFontSize (int inTag, int inFontSize);
native void     TextTagSetPosition (int inTag, point inPoint, fixed inHeightOffset);
native void     TextTagAttachToUnit (int inTag, unit inUnit, fixed inHeightOffset);
native void     TextTagAttachToUnitPoint (int inTag, unit inUnit, string attachmentPoint, int offsetX, int offsetY);
native void     TextTagSetVelocity (int inTag, fixed inSpeed, fixed inAngle);
native void     TextTagSetAlignment (int inTag, int inHoriz, int inVert);
native void     TextTagSetTextAlignment (int inTag, int inHoriz, int inVert);
native void     TextTagSetMaxSize (int inTag, fixed inWidth, fixed inHeight);

native void     TextTagShowBackground (int inTag, bool inShow);
native void     TextTagSetBackgroundImage (int inTag, string inPath, bool inTiled);
native void     TextTagSetBackgroundBorderSize (int inTag, fixed inX, fixed inY);
native void     TextTagSetBackgroundOffset (int inTag, fixed inX, fixed inY);
native void     TextTagSetEdgeImage (int inTag, int inEdge, string inPath, int inXOffset, int inYOffset);

native void     TextTagShow (int inTag, playergroup inPlayers, bool inShow);
native bool     TextTagVisible (int inTag, int inPlayer);
native void     TextTagPause (int inTag, bool inPause);
native void     TextTagFogofWar (int inTag, bool inPause);

const int c_textTagColorText            = -1;
const int c_textTagColorTextStart       =  0;
const int c_textTagColorTextEnd         =  1;
const int c_textTagColorBackground      = -2;
const int c_textTagColorBackgroundStart =  2;
const int c_textTagColorBackgroundEnd   =  3;
const int c_textTagColorEdge            = -3;
const int c_textTagColorEdgeStart       =  4;
const int c_textTagColorEdgeEnd         =  5;

native void     TextTagSetColor (int inTag, int inType, color inColor);

const int c_textTagFadeAll          = -1;
const int c_textTagFadeText         =  0;
const int c_textTagFadeBackground   =  1;
const int c_textTagFadeEdge         =  2;

native void     TextTagSetFadedTransparency (int inTag, int inType, fixed inTransparency);

const int c_textTagTimeDuration     = 0;
const int c_textTagTimeFadeOut      = 1;
const int c_textTagTimeFadeDuration = 2; // If zero, will fade over full duration
const int c_textTagTimeCurrent      = 3;

const fixed c_textTagTimePermanent  = 0; // Use with c_textTagTimeDuration for permanent text

native void     TextTagSetTime (int inTag, int inType, fixed inVal);

//--------------------------------------------------------------------------------------------------
// Timing
//
// -- Time types --
//
// Timing functions can work with three different types of time:
//
//   Game Time - Takes into account the current game speed, and will pass more slowly at slower
//               speeds, and vice versa.
//
//   Real Time - Passes at the same rate regardless of game speed, and approximates time passing
//               in the real world for the user.  However, "real" time is still synchronous, and
//               will therefore be affected by lag due to network or system issues.
//
//   AI Time   - Passes at the same rate as game time, but may be paused/unpaused independently
//               of game time via triggers.  This is most commonly done to pause the AI while
//               an in-game cinematic sequence is run.
//
//--------------------------------------------------------------------------------------------------
const int c_timeGame    = 0;
const int c_timeReal    = 1;
const int c_timeAI      = 2;

native void     Wait (fixed inSecs, int inTimeType);

// AI Time
native void     AITimePause (bool inPause);
native bool     AITimeIsPaused ();

// Timers
const fixed c_timerDurationInfinite = -1.0;

native timer    TimerCreate ();

native void     TimerStart (timer t, fixed duration, bool periodic, int timeType);
native void     TimerRestart (timer t);
native timer    TimerLastStarted ();

native void     TimerPause (timer t, bool pause);
native bool     TimerIsPaused (timer t);

native fixed    TimerGetElapsed (timer t);
native fixed    TimerGetRemaining (timer t);
native fixed    TimerGetDuration (timer t);

// Timer events
native void TriggerAddEventTimer (trigger inTrigger, timer inTimer);
native void TriggerAddEventTimeElapsed (trigger inTrigger, fixed inTime, int inTimeType);
native void TriggerAddEventTimePeriodic (trigger inTrigger, fixed inTime, int inTimeType);

native timer    EventTimer ();

// Timer windows
//   inShowElapsed shows elapsed vs. remaining time (defaults off)
//
const int c_timerWindowNone = 0;

native int      TimerWindowCreate (timer inTimer, text inTitle, bool inShow, bool inShowElapsed);
native int      TimerWindowLastCreated ();
native void     TimerWindowDestroy (int inWindow);

native void     TimerWindowShow (int inWindow, playergroup inPlayers, bool inShow);
native bool     TimerWindowVisible (int inWindow, int inPlayer);
native void     TimerWindowSetTimer (int inWindow, timer inTimer);
native void     TimerWindowSetTitle (int inWindow, text inTitle);

// - Style
const int c_timerWindowStyleHorizontalTitleTime = 0;
const int c_timerWindowStyleHorizontalTimeTitle = 1;
const int c_timerWindowStyleVerticalTitleTime   = 2;
const int c_timerWindowStyleVerticalTimeTitle   = 3;

native void     TimerWindowSetStyle (int inWindow, int inStyle, bool inShowElapsed);
native void     TimerWindowSetGapWidth (int inWindow, int inWidth);

// - Time Format - See the TextTimeFormat function for details on the format string
native void     TimerWindowSetFormat (int inWindow, text inFormat);

const int c_timerWindowColorTitle       = 0;
const int c_timerWindowColorTime        = 1;
const int c_timerWindowColorBackground  = 2;

native void     TimerWindowSetColor (int inWindow, int inType, color inColor, fixed transparency);

//--------------------------------------------------------------------------------------------------
// Transmission
//--------------------------------------------------------------------------------------------------
const int c_invalidTransmissionId = 0;

const fixed c_transmissionTransitionDuration = 0.5;

const int c_transmissionDurationDefault = 0;
const int c_transmissionDurationAdd     = 1;
const int c_transmissionDurationSub     = 2;
const int c_transmissionDurationSet     = 3;

const int c_transmissionOptionHideAlertPanel    = 1;

native transmissionsource   TransmissionSource ();
native transmissionsource   TransmissionSourceFromUnit (unit u, bool flash, bool overridePortrait, string anim);
native transmissionsource   TransmissionSourceFromUnitType (string unitType, bool overridePortrait);
native transmissionsource   TransmissionSourceFromModel (string modelLink);
native transmissionsource   TransmissionSourceFromMovie (string assetLink, bool subtitles);

native int                  TransmissionSend (
                                playergroup players,
                                transmissionsource source, 
                                int targetPortrait,
                                string targetAnim,
                                soundlink soundLink,
                                text speaker,
                                text subtitle,
                                fixed duration,
                                int durationType,
                                bool waitUntilDone
                            );
native int                  TransmissionLastSent ();
native void                 TransmissionClear (int t);
native void                 TransmissionClearAll ();
native void                 TransmissionSetOption (int inOptionIndex, bool inValue);
native void                 TransmissionWait (int t, fixed offset);

//--------------------------------------------------------------------------------------------------
// Triggers
//
// Each trigger has one script function, registered in TriggerCreate,
// which is expected to look like:
//
//  bool TriggerFunc (bool testConditions, bool runActions) {
//      if (testConditions) {
//          if (<conditions fail>) {
//              return false;
//          }
//      }
//
//      if (!runActions) {
//          return true;
//      }
//   
//      <do actions>
//      return true;
//  }
//
//--------------------------------------------------------------------------------------------------
native trigger  TriggerCreate (string inFunction);
native void     TriggerDestroy (trigger t);

native void     TriggerEnable (trigger t, bool enable);
native bool     TriggerIsEnabled (trigger t);

native void     TriggerResetCounts (trigger t);
native int      TriggerGetEvalCount (trigger t);
native int      TriggerGetExecCount (trigger t);

native bool     TriggerEvaluate (trigger t);
native void     TriggerExecute (trigger t, bool testConds, bool waitUntilDone);
native trigger  TriggerGetCurrent (); // Returns the trigger currently executing, if any
native void     TriggerStop (trigger t); // Kills all executing instances of the input trigger
native void     TriggerWaitForTrigger (trigger t, bool waitUntilDone); // Wait until the given trigger executes

native void     TriggerQueueEnter ();
native void     TriggerQueueExit ();
native bool     TriggerQueueIsEmpty ();
native void     TriggerQueuePause (bool pause);

// Options for handling the active thread when clearing the trigger queue
const int c_triggerQueueRetain  = 0; // Leave in the queue
const int c_triggerQueueRemove  = 1; // Remove from the queue, but leave it running
const int c_triggerQueueKill    = 2; // Remove from the queue and kill it immediately

native void     TriggerQueueClear (int activeOption);

native void     TriggerSkippableBegin (
                    playergroup allowedToSkip,
                    int requiredCount,
                    trigger onSkip,
                    bool testConds,
                    bool waitUntilDone
                );
native void     TriggerSkippableEnd ();

// Trigger Debugging
native void     TriggerDebugWindowOpen (bool open);
native void     TriggerDebugOutput (int type, text inText, bool includeGameUI);
native void     TriggerDebugSetTypeName (int type, text inText);
native void     TriggerDebugSetTypeColor (int type, color c);
native void     TriggerDebugSetTypeFile (int type, string file);

//--------------------------------------------------------------------------------------------------
// Units
//--------------------------------------------------------------------------------------------------

// Spend locations for simulating spend calls
const int c_spendLocationAll        = -1;
const int c_spendLocationAbility    = 0;
const int c_spendLocationBehavior   = 1;
const int c_spendLocationUnit       = 2;
const int c_spendLocationPlayer     = 3;
const int c_spendLocationGlobal     = 4;

// Unit creation styles
const int c_unitCreateConstruct         = (1 << 0);
const int c_unitCreateIgnorePlacement   = (1 << 1);

native unitgroup UnitCreate (
    int inCount,
    string inUnitType,
    int inCreateStyle,
    int inPlayer,
    point inPos,
    fixed inFacing
);

native unit UnitLastCreated ();
native unitgroup UnitLastCreatedGroup ();
native unit UnitFromId (int id);
native void UnitLoadModel (unit inUnit);
native void UnitUnloadModel (unit inUnit);
native void UnitRemove (unit inUnit);
native void UnitKill (unit inUnit);
native void UnitRevive (unit inUnit);
native bool UnitIsAlive (unit inUnit);
native bool UnitIsValid (unit inUnit);
native void UnitWaitUntilIdle (unit inUnit, bool inIdle);

native string UnitGetType (unit inUnit);

native int   UnitGetOwner (unit inUnit);
native void  UnitSetOwner (unit inUnit, int inPlayer, bool inChangeColor);

native void  UnitSetTeamColorIndex (unit inUnit, int inIndex);
native void  UnitResetTeamColorIndex (unit inUnit);

native point UnitGetPosition (unit inUnit);
native void  UnitSetPosition (unit inUnit, point inPos, bool blend);
native fixed UnitGetHeight (unit inUnit); // Absolute height in world space
native void UnitSetHeight (unit inUnit, fixed inHeight, fixed inDuration);

native fixed UnitGetFacing (unit inUnit);
native void  UnitSetFacing (unit inUnit, fixed inFacing, fixed inDuration);

native point UnitGetAttachmentPoint (unit inUnit, string attachment);

native void  UnitResetSpeed (unit inUnit);

native void UnitSetScale (unit inUnit, fixed x, fixed y, fixed z);

native void UnitPauseAll (bool inPause);

native void UnitSetCursor (unit inUnit, string cursorLink);
native void UnitSetInfoText (unit inUnit, text info, text tip, text subTip);
native void UnitClearInfoText (unit inUnit);

native void UnitForceStatusBar (unit inUnit, bool inShow);

// Unit states
const int c_unitStateBuried             = 0;  // Read-only
const int c_unitStateCloaked            = 1;  // Read-only
const int c_unitStateDetector           = 2;  // Read-only
const int c_unitStateRadar              = 3;  // Read-only
const int c_unitStateVisionSuppressed   = 4;  // Read-only
const int c_unitStateAttackSuppressed   = 5;  // Read-only
const int c_unitStateInStasis           = 6;  // Read-only
const int c_unitStateHallucination      = 7;  // Read-only
const int c_unitStateInvulnerable       = 8;
const int c_unitStatePaused             = 9;
const int c_unitStateHidden             = 10;
const int c_unitStateHighlightable      = 11;
const int c_unitStateIgnoreTerrainZ     = 12;
const int c_unitStateUnderConstruction  = 13; // Read-only
const int c_unitStateInsideTransport    = 14; // Read-only
const int c_unitStateIdle               = 15; // Read-only
const int c_unitStateFidget             = 16;
const int c_unitStateSelectable         = 17;
const int c_unitStateTargetable         = 18;
const int c_unitStateStatusBar          = 19;
const int c_unitStateTooltipable        = 20;
const int c_unitStateCursorable         = 21;
const int c_unitStateIsDead             = 22; // Read-only
const int c_unitStateIsTransport        = 23; // Read-only
const int c_unitStateMoveSuppressed     = 24;
const int c_unitStateTurnSuppressed     = 25;
const int c_unitStateHighlighted        = 26;
const int c_unitStateUsingSupply        = 27;
const int c_unitStateRevivable          = 28; // Read-only

native void UnitSetState (unit inUnit, int inState, bool inVal);
native bool UnitTestState (unit inUnit, int inState);

// Unit properties
const int c_unitPropLife            =  0;
const int c_unitPropLifePercent     =  1;
const int c_unitPropLifeMax         =  2;
const int c_unitPropLifeRegen       =  3;
const int c_unitPropEnergy          =  4;
const int c_unitPropEnergyPercent   =  5;
const int c_unitPropEnergyMax       =  6;
const int c_unitPropEnergyRegen     =  7;
const int c_unitPropShields         =  8;
const int c_unitPropShieldsPercent  =  9;
const int c_unitPropShieldsMax      = 10;
const int c_unitPropShieldsRegen    = 11;
const int c_unitPropSuppliesUsed    = 12; // Read-only
const int c_unitPropSuppliesMade    = 13; // Read-only
const int c_unitPropKills           = 14;
const int c_unitPropVitality        = 15; // Read-only
const int c_unitPropVitalityPercent = 16; // Read-only
const int c_unitPropVitalityMax     = 17; // Read-only
const int c_unitPropAcceleration    = 18; // Read-only
const int c_unitPropHeight          = 19;
const int c_unitPropMovementSpeed   = 20;
const int c_unitPropTurnRate        = 21; // Read-only
const int c_unitPropResources       = 22;
const int c_unitPropRadius          = 23; // Read-only

const bool c_unitPropCurrent = true;
const bool c_unitPropNormal  = false;

native void     UnitSetPropertyInt (unit inUnit, int inProp, int inVal);
native void     UnitSetPropertyFixed (unit inUnit, int inProp, fixed inVal);

native int      UnitGetPropertyInt (unit inUnit, int inProp, bool inCurrent);
native fixed    UnitGetPropertyFixed (unit inUnit, int inProp, bool inCurrent);

native void     UnitSetCustomValue (unit inUnit, int inIndex, fixed inVal);
native fixed    UnitGetCustomValue (unit inUnit, int inIndex);

native void     UnitAddChargeRegen (unit inUnit, string inCharge, fixed inVal);
native fixed    UnitGetChargeRegen (unit inUnit, string inCharge);
native void     UnitAddChargeUsed (unit inUnit, string inCharge, fixed inVal);
native fixed    UnitGetChargeUsed (unit inUnit, string inCharge);

native void     UnitAddCooldown (unit inUnit, string inCooldown, fixed inVal);
native fixed    UnitGetCooldown (unit inUnit, string inCooldown);

native void     UnitCreateEffectPoint (unit inUnit, string inEffect, point inTarget);
native void     UnitCreateEffectUnit (unit inUnit, string inEffect, unit inTarget);
native int      UnitValidateEffectPoint (unit inUnit, string inEffect, point inTarget);
native int      UnitValidateEffectUnit (unit inUnit, string inEffect, unit inTarget);

// Unit AI options
const int c_unitAIOptionUsable      = 0;

native void     UnitSetAIOption (unit inUnit, int inOption, bool inVal);
native bool     UnitGetAIOption (unit inUnit, int inOption);

// Unit abilities

// Ability charge types
const int c_unitAbilChargeCountMax   = 0;
const int c_unitAbilChargeCountUse   = 1;
const int c_unitAbilChargeCountLeft  = 2;
const int c_unitAbilChargeRegenMax   = 3;
const int c_unitAbilChargeRegenLeft  = 4;

native void     UnitAbilitySpend (unit inUnit, abilcmd inAbilCmd, int inLocation);
native void     UnitAbilityReset (unit inUnit, abilcmd inAbilCmd, int inLocation);
native fixed    UnitAbilityChargeInfo (unit inUnit, abilcmd inAbilCmd, int inType);
native int      UnitAbilityCount (unit inUnit);
native bool     UnitAbilityExists (unit inUnit, string inAbil);
native void     UnitAbilityEnable (unit inUnit, string inAbil, bool inEnable);
native void     UnitAbilityShow (unit inUnit, string inAbil, bool inShow);
native string   UnitAbilityGet (unit inUnit, int inIndex);
native bool     UnitAbilityCheck (unit inUnit, string inAbil, bool inEnabled);

native void     UnitAbilityChangeLevel (unit inUnit, string inAbil, int inLevel);
native int      UnitAbilityGetLevel (unit inUnit, string inAbil);
native int      UnitAbilityMaxLevel (unit inUnit, string inAbil);

native void     UnitAbilityAddChargeRegen (unit inUnit, string inAbil, string inCharge, fixed inVal);
native fixed    UnitAbilityGetChargeRegen (unit inUnit, string inAbil, string inCharge);
native void     UnitAbilityAddChargeUsed (unit inUnit, string inAbil, string inCharge, fixed inVal);
native fixed    UnitAbilityGetChargeUsed (unit inUnit, string inAbil, string inCharge);

native void     UnitAbilityAddCooldown (unit inUnit, string inAbil, string inCooldown, fixed inVal);
native fixed    UnitAbilityGetCooldown (unit inUnit, string inAbil, string inCooldown);

// Ability command states
const int c_cmdStateHidden          = (1 << 0);
const int c_cmdStateExecuting       = (1 << 1);
const int c_cmdStateCanAutoCast     = (1 << 2);
const int c_cmdStateIsAutoCast      = (1 << 3);
const int c_cmdStateMaxCharges      = (1 << 4);
const int c_cmdStateHasCharges      = (1 << 5);
const int c_cmdStateDisabled        = (1 << 6);
const int c_cmdStateCooldown        = (1 << 7);
const int c_cmdStateNoLife          = (1 << 8);
const int c_cmdStateNoShields       = (1 << 9);
const int c_cmdStateNoEnergy        = (1 << 10);
const int c_cmdStateNoMinerals      = (1 << 11);
const int c_cmdStateNoVespene       = (1 << 12);
const int c_cmdStateNoTerrazine     = (1 << 13);
const int c_cmdStateNoCustom        = (1 << 14);
const int c_cmdStateNoFood          = (1 << 15);
const int c_cmdStateCantSpend       = (1 << 16);

native bool     UnitCheckAbilCmdState (unit inUnit, abilcmd inAbilCmd, int inState);

const int c_unitCargoUnitCount      = 0;    // Number of units contained as cargo
const int c_unitCargoSpaceTotal     = 1;    // Total cargo space
const int c_unitCargoSpaceUsed      = 2;    // Cargo space in use
const int c_unitCargoSpaceFree      = 3;    // Cargo space available (total - used)
const int c_unitCargoSizeAsCargo    = 4;    // Space used by this unit as cargo
const int c_unitCargoSizeMax        = 5;    // Maximum cargo size per unit this unit can contain
const int c_unitCargoPosition       = 6;    // Unit's index in the transport list

native void         UnitCargoCreate (unit inUnit, string inId, int inCount);
native unit         UnitCargoLastCreated ();
native unitgroup    UnitCargoLastCreatedGroup ();
native unit         UnitCargo (unit inUnit, int inIndex);
native unitgroup    UnitCargoGroup (unit inUnit);
native int          UnitCargoValue (unit inUnit, int inValue);
native unit         UnitTransport (unit inUnit);

native unit     UnitAgent (unit inUnit, int inPlayer);

native void     UnitMagazineArm (unit inUnit, abilcmd inAbilCmd, int inCount);
native int      UnitMagazineCount (unit inUnit, string inAbil);

const int c_unitQueueTimeElapsed    = 0;
const int c_unitQueueTimeRemaining  = 1;
const int c_unitQueueTimeTotal      = 2;

const int c_unitQueuePropertyAvailable  = 0;
const int c_unitQueuePropertyTotal      = 1;
const int c_unitQueuePropertyUsed       = 2;
const int c_unitQueuePropertyCount      = 3;

native int      UnitQueueItemCount (unit inUnit, int inSlot);
native string   UnitQueueItemGet (unit inUnit, int inItem, int inSlot);
native fixed    UnitQueueItemTime (unit inUnit, int inTimeType, int inItem);
native bool     UnitQueueItemTypeCheck (unit inUnit, int inItem, int inType);
native int      UnitQueueGetProperty (unit inUnit, int inProp);

native bool     UnitMoverExists (unit inUnit, string inMover);
native bool     UnitTestPlane (unit inUnit, int inPlane);

// Unit progress
const int c_unitProgressTypeConstruct       = 0;
const int c_unitProgressTypeTrain           = 1;
const int c_unitProgressTypeResearch        = 2;
const int c_unitProgressTypeArmMagazine     = 3;
const int c_unitProgressTypeSpecialize      = 4;
const int c_unitProgressTypeRevive          = 5;
const int c_unitProgressTypeLearn           = 6;

const int c_unitProgressStageStart          = 0;
const int c_unitProgressStageCancel         = 1;
const int c_unitProgressStageComplete       = 2;
const int c_unitProgressStagePause          = 3;
const int c_unitProgressStageResume         = 4;

const int c_unitProgressStateEmpty          = 0;
const int c_unitProgressStateActive         = 1;
const int c_unitProgressStatePaused         = 2;

native fixed    UnitGetProgressComplete (unit inUnit, int inSlot);
native void     UnitSetProgressComplete (unit inUnit, int inSlot, int inPercent);
native void     UnitSetProgressStage (unit inUnit, int inSlot, int inStage);
native bool     UnitCheckProgressState (unit inUnit, int inSlot, int inState);

// Unit behaviors

// Behavior categories
const int c_unitBehaviorFlagPermanent           = 0;
const int c_unitBehaviorFlagRestorable          = 1;
const int c_unitBehaviorFlagTemporary           = 2;
// Behavior buff flags
const int c_unitBehaviorFlagChanneled           = 3;
const int c_unitBehaviorFlagChanneling          = 4;
const int c_unitBehaviorFlagCountdown           = 5;
const int c_unitBehaviorFlagExtend              = 6;
const int c_unitBehaviorFlagDisableBuilding     = 7;
const int c_unitBehaviorFlagRemoveDamageResponseExhausted = 8;
// Behavior info flags
const int c_unitBehaviorFlagHidden              = 9;
// Behavior count
const int c_unitBehaviorCountAll                = -1;

native void     UnitBehaviorAdd (unit inUnit, string inBehavior, unit inCaster, int inCount);
native void     UnitBehaviorAddPlayer (unit inUnit, string inBehavior, int inPlayer, int inCount);
native int      UnitBehaviorCountAll (unit inUnit);
native int      UnitBehaviorCount (unit inUnit, string inBehavior);
native fixed    UnitBehaviorDuration (unit inUnit, string inBehavior);
native void     UnitBehaviorSetDuration (unit inUnit, string inBehavior, fixed inDuration);
native bool     UnitBehaviorEnabled (unit inUnit, string inBehavior);
native string   UnitBehaviorGet (unit inUnit, int inIndex);
native bool     UnitHasBehavior (unit inUnit, string inBehavior);
native void     UnitBehaviorRemove (unit inUnit, string inBehavior, int inCount);
native void     UnitBehaviorRemovePlayer (unit inUnit, string inBehavior, int inPlayer, int inCount);
native void     UnitBehaviorTransfer (unit inSource, unit inDest, string inBehavior, int inCount);
native bool     UnitBehaviorHasFlag (string inBehavior, int inCategory);
native void     UnitBehaviorRemoveCategory (unit inUnit, int inCategory);

native void     UnitBehaviorAddChargeRegen (unit inUnit, string inBehavior, string inCharge, fixed inVal);
native fixed    UnitBehaviorGetChargeRegen (unit inUnit, string inBehavior, string inCharge);
native void     UnitBehaviorAddChargeUsed (unit inUnit, string inBehavior, string inCharge, fixed inVal);
native fixed    UnitBehaviorGetChargeUsed (unit inUnit, string inBehavior, string inCharge);

native void     UnitBehaviorAddCooldown (unit inUnit, string inBehavior, string inCooldown, fixed inVal);
native fixed    UnitBehaviorGetCooldown (unit inUnit, string inBehavior, string inCooldown);

native void     UnitXPGainEnable (unit inUnit, string inBehavior, bool inEnable);

// Unit markers
native marker   UnitMarker (unit inUnit, int inIndex);
native void     UnitMarkerAdd (unit inUnit, marker inMarker);
native int      UnitMarkerCount (unit inUnit, marker inMarker);
native void     UnitMarkerRemove (unit inUnit, marker inMarker);

// Unit orders
const int c_orderQueueReplace       = 0;
const int c_orderQueueAddToEnd      = 1;
const int c_orderQueueAddToFront    = 2;

native order    UnitOrder (unit inUnit, int inIndex);
native int      UnitOrderCount (unit inUnit);
native bool     UnitOrderHasAbil (unit inUnit, string abilLink);
native bool     UnitOrderIsValid (unit inUnit, order inOrder);

native bool     UnitIsHarvesting (unit inUnit, int inResource);

native bool     UnitIssueOrder (unit inUnit, order inOrder, int inQueueType);

// Unit rallying
native int      UnitRallyPoint (unit inUnit, unit inUser);
native int      UnitRallyPointCount (unit inUnit);
native int      UnitRallyPointTargetCount (unit inUnit, int inPoint);
native point    UnitRallyPointTargetPoint (unit inUnit, int inPoint, int inTarget);
native unit     UnitRallyPointTargetUnit (unit inUnit, int inPoint, int inTarget);

// Unit tech
native int UnitTechTreeBehaviorCount (unit inUnit, string behaviorType, int countType);
native int UnitTechTreeUnitCount (unit inUnit, string unitType, int countType);
native int UnitTechTreeUpgradeCount (unit inUnit, string upgradeType, int countType);

// Unit inventory
const int c_unitInventoryCountCarried    = 0;
const int c_unitInventoryCountEmpty      = 1;
const int c_unitInventoryCountTotal      = 2;

native int       UnitInventoryCount (unit inUnit, int inCountType);
native unit      UnitInventoryItem (unit inUnit, int inIndex);
native unitgroup UnitInventoryGroup (unit inUnit);
native unit      UnitInventoryCreate (unit inUnit, string itemType);
native unit      UnitInventoryLastCreated ();

// Unit weapons
native void         UnitWeaponAdd (unit inUnit, string inWeapon, string inTurret);
native int          UnitWeaponCount (unit inUnit);
native bool         UnitWeaponCheck (unit inUnit, int inIndex, int inTarget);
native string       UnitWeaponGet (unit inUnit, int inIndex);
native bool         UnitWeaponIsEnabled (unit inUnit, int inIndex);
native fixed        UnitWeaponPeriod (unit inUnit, int inIndex);
native void         UnitWeaponRemove (unit inUnit, string inWeapon);
native bool         UnitWeaponsPlaneTest (unit inUnit, int inPlane);

// Unit experience
native fixed    UnitXPTotal (unit inUnit);
native int      UnitLevel (unit inUnit);

// Unit Costs
const int c_unitCostMinerals            = 0;
const int c_unitCostVespene             = 1;
const int c_unitCostTerrazine           = 2;
const int c_unitCostCustomResource      = 3;
const int c_unitCostSumMineralsVespene  = 4;

native string UnitTypeFromString (string inString);
native text UnitTypeGetName (string inUnitType);
native fixed UnitTypeGetProperty (string inUnitType, int inProp);
native int UnitTypeGetCost (string inUnitType, int inCostType);
native bool UnitTypeTestFlag (string inUnitType, int inFlag);
native bool UnitTypeTestAttribute (string inUnitType, int inAttribute);
native bool UnitTypeIsAffectedByUpgrade (string inUnitType, string inUpgrade);

native void UnitTypeAnimationLoad (string inUnitType, string animPath);
native void UnitTypeAnimationUnload (string inUnitType, string animPath);

// Unit events
// Note: Use a null unit for "any unit" events

// Damage fatal option
const int c_unitDamageEither    = 0;
const int c_unitDamageFatal     = 1;
const int c_unitDamageNonFatal  = 2;

// Damage type
const int c_unitDamageTypeAny       = -1;
const int c_unitDamageTypeSpell     = 0;
const int c_unitDamageTypeMelee     = 1;
const int c_unitDamageTypeRanged    = 2;
const int c_unitDamageTypeSplash    = 3;

native void     TriggerAddEventUnitCreated (trigger t, unitref u, string creatorAbil, string creatorBehavior);
native void     TriggerAddEventUnitRemoved (trigger t, unitref u);
native void     TriggerAddEventUnitDied (trigger t, unitref u);
native void     TriggerAddEventUnitGainExperience (trigger t, unitref u);
native void     TriggerAddEventUnitGainLevel (trigger t, unitref u);
native void     TriggerAddEventUnitAcquiredTarget (trigger t, unitref u);
native void     TriggerAddEventUnitStartedAttack (trigger t, unitref u);
native void     TriggerAddEventUnitAttacked (trigger t, unitref u);
native void     TriggerAddEventUnitAttributeChange (trigger t, unitref u);
native void     TriggerAddEventUnitDamaged (trigger inTrigger, unitref inUnit, int inDamageType, int inDamageFatal, string inEffect);
native void     TriggerAddEventUnitBecomesIdle (trigger t, unitref u, bool idle);

native unit     EventUnit ();
native unit     EventUnitTarget ();

// Responses
// - c_unitEventCreated
native unit     EventUnitCreatedUnit ();
native string   EventUnitCreatedAbil ();
native string   EventUnitCreatedBehavior ();

// - c_unitEventDamaged
// - c_unitEventDied
native fixed    EventUnitDamageAmount ();
native unit     EventUnitDamageSourceUnit ();
native int      EventUnitDamageSourcePlayer ();
native point    EventUnitDamageSourcePoint ();
native bool     EventUnitDamageDeathCheck (int inType);
native string   EventUnitDamageEffect ();

// - c_unitEventGainExperience
// - c_unitEventGainLevel
native string   EventUnitBehavior ();
native fixed    EventUnitXPDelta ();
native int      EventUnitAttributePoints ();

// Property change events
native void     TriggerAddEventUnitProperty (trigger t, unitref u, int prop);

// State events
//   region/range events    - true = entered,       false = exited
//   cargo events           - true = loaded,        false = unloaded
//   selection events       - true = selected,      false = deselected
//   highlight events       - true = highlighted,   false = unhighlighted
//
native void     TriggerAddEventUnitRegion (trigger t, unitref u, region r, bool state);
native void     TriggerAddEventUnitRange (trigger t, unitref u, unit fromUnit, fixed range, bool state);
native void     TriggerAddEventUnitRangePoint (trigger t, unitref u, point p, fixed distance, bool state);
native void     TriggerAddEventUnitCargo (trigger t, unitref u, bool state);

native region   EventUnitRegion ();
native unit     EventUnitCargo ();

// Player events
// Note: EventPlayer (defined in the Players section) is valid for these events
//
native void     TriggerAddEventUnitSelected (trigger t, unitref u, int player, bool state);
native void     TriggerAddEventUnitClick (trigger t, unitref u, int player);
native void     TriggerAddEventUnitHighlight (trigger t, unitref u, int player, bool state);

// Order events
native void     TriggerAddEventUnitOrder (trigger t, unitref u, abilcmd a);
native order    EventUnitOrder ();

// Ability events
const int c_unitAbilStageComplete           = -6;
const int c_unitAbilStagePreempt            = -5;
const int c_unitAbilStageCancel             = -4;
const int c_unitAbilStageExecute            = -3;
const int c_unitAbilStageQueue              = -2;
const int c_unitAbilStageAll                = -1;

native void     TriggerAddEventUnitAbility (trigger t, unitref u, abilcmd a, int stage, bool includeSharedAbils);

native abilcmd  EventUnitAbility ();
native int      EventUnitAbilityStage ();
native point    EventUnitTargetPoint ();
native unit     EventUnitTargetUnit ();

// Progress events
native void     TriggerAddEventUnitConstructProgress (trigger t, unitref u, int stage);
native void     TriggerAddEventUnitTrainProgress (trigger t, unitref u, int stage);
native void     TriggerAddEventUnitResearchProgress (trigger t, unitref u, int stage);
native void     TriggerAddEventUnitArmMagazineProgress (trigger t, unitref u, int stage);
native void     TriggerAddEventUnitSpecializeProgress (trigger t, unitref u, int stage);

native string   EventUnitProgressObjectType (); // The type of object being trained/researched/etc
native unit     EventUnitProgressUnit ();       // The unit being trained, if any

// Powerup
native void     TriggerAddEventUnitPowerup (trigger t, unitref u);
native unit     EventUnitPowerupUnit ();

// Revive
native void     TriggerAddEventUnitRevive (trigger t, unitref u);

//--------------------------------------------------------------------------------------------------
// Unit Filters
//--------------------------------------------------------------------------------------------------
// Construct a unitfilter based on bit flags corresponding to c_targetFilter<*> constants
// Note: If the target flag is >= than 32, it should go in the second integer.  For example:
//
//       UnitFilter (
//          (1 << c_targetFilterGround),                // Require ground
//          0,
//          0,
//          (1 << (c_targetFilterInvulnerable - 32))    // Exclude invulnerable
//       );
//
native unitfilter UnitFilter (int inRequired1, int inRequired2, int inExcluded1, int inExcluded2);
native unitfilter UnitFilterStr (string filters);

// Set/Get individual filter states by index
//
const int c_unitFilterAllowed   = 0;    // Neither required nor excluded
const int c_unitFilterRequired  = 1;
const int c_unitFilterExcluded  = 2;

native void UnitFilterSetState (unitfilter inFilter, int inType, int inState);
native int  UnitFilterGetState (unitfilter inFilter, int inType);
native bool UnitFilterMatch (unit inUnit, int inPlayer, unitfilter inFilter);

//--------------------------------------------------------------------------------------------------
// Unit Groups
//--------------------------------------------------------------------------------------------------
const int c_unitAllianceAny                = 0; // Any unit
const int c_unitAllianceAlly               = 1; // Units owned by allied players
const int c_unitAllianceEnemy              = 2; // Units owned by enemy players
const int c_unitAllianceAllyExcludeSelf    = 3; // Units owned by allied players not owned by player
const int c_unitAllianceAnyExcludeSelf     = 4; // Any unit not owned by player

const int c_noMaxCount = 0;

native unitgroup UnitGroupEmpty ();
native unitgroup UnitGroupCopy (unitgroup inGroup);
native unitgroup UnitGroupFromId (int id);
native unitgroup UnitGroup (string type, int player, region r, unitfilter filter, int maxCount);
native unitgroup UnitGroupAlliance (int player, int alliance, region r, unitfilter filter, int maxCount);
native unitgroup UnitGroupFilter (string type, int player, unitgroup g, unitfilter filter, int maxCount);
native unitgroup UnitGroupFilterAlliance (unitgroup g, int player, int alliance, int maxCount);
native unitgroup UnitGroupFilterPlane (unitgroup g, int plane, int maxCount);
native unitgroup UnitGroupFilterPlayer (unitgroup g, int player, int maxCount);
native unitgroup UnitGroupFilterRegion (unitgroup g, region r, int maxCount);
native unitgroup UnitGroupFilterThreat (unitgroup g, unit u, string alternateType, int maxCount);
native unitgroup UnitGroupIdle (int player, bool workerOnly);

native void UnitGroupClear (unitgroup inGroup);
native void UnitGroupAdd (unitgroup inGroup, unit inUnit);
native void UnitGroupRemove (unitgroup inGroup, unit inUnit);

native bool UnitGroupIssueOrder (unitgroup inGroup, order inOrder, int inQueueType);
native void UnitGroupWaitUntilIdle (unitgroup inGroup, int inCount, bool inIdle);

const int c_unitCountAll    = 0;
const int c_unitCountAlive  = 1;
const int c_unitCountDead   = 2;

native int  UnitGroupCount (unitgroup inGroup, int inType);
native unit UnitGroupUnit (unitgroup inGroup, int inIndex); // index is one-based
native unit UnitGroupRandomUnit (unitgroup inGroup, int inType);
native bool UnitGroupHasUnit (unitgroup inGroup, unit inUnit);
native bool UnitGroupTestPlane (unitgroup inGroup, int inPlane);
native unit UnitGroupNearestUnit (unitgroup inGroup, point inPoint);

//--------------------------------------------------------------------------------------------------
// Unit Reference
// - A unitref may refer to a unit explicitly or through a unit variable
//--------------------------------------------------------------------------------------------------
native unitref UnitRefFromUnit (unit u);
native unitref UnitRefFromVariable (string v);

native unit UnitRefToUnit (unitref r);

//--------------------------------------------------------------------------------------------------
// Unit Selection
//
// Notes:
// - UnitSelect and UnitGroupSelect set the local selection state,
//   which must be then transmitted across the network.
//
//   However, UnitIsSelected and UnitGroupSelected query the synchronous selection state,
//   which means that if you set the selection, then immediately query it, the results will
//   not match.
//
// - Unit selection state cannot be set during map initialization events.
//
//--------------------------------------------------------------------------------------------------
native void         UnitSelect (unit inUnit, int inPlayer, bool inSelect);
native void         UnitGroupSelect (unitgroup inGroup, int inPlayer, bool inSelect);
native void         UnitClearSelection (int inPlayer);

native bool         UnitIsSelected (unit inUnit, int inPlayer);
native unitgroup    UnitGroupSelected (int inPlayer);

native void         UnitFlashSelection (unit inUnit, fixed inPeriod);

// Control groups
native void         UnitControlGroupAddUnit (int inPlayer, int inGroup, unit inUnit);
native void         UnitControlGroupAddUnits (int inPlayer, int inGroup, unitgroup inUnits);
native void         UnitControlGroupRemoveUnit (int inPlayer, int inGroup, unit inUnit);
native void         UnitControlGroupRemoveUnits (int inPlayer, int inGroup, unitgroup inUnits);
native void         UnitControlGroupClear (int inPlayer, int inGroup);

//--------------------------------------------------------------------------------------------------
// User Interface
//--------------------------------------------------------------------------------------------------
const fixed c_transitionDurationImmediate   = 0.0;
const fixed c_transitionDurationDefault     = -1.0;

const int   c_messageAreaAll                = 0;
const int   c_messageAreaChat               = 1;
const int   c_messageAreaObjective          = 2;
const int   c_messageAreaDirective          = 3;
const int   c_messageAreaError              = 4;
const int   c_messageAreaSubtitle           = 5;
const int   c_messageAreaCinematic          = 6;
const int   c_messageAreaDebug              = 7;
const int   c_messageAreaWarning            = 8;
const int   c_messageAreaCheat              = 9;

const int   c_uiModeFullscreen              = 0;
const int   c_uiModeLetterboxed             = 1;
const int   c_uiModeConsole                 = 2;

const int   c_mouseButtonNone               = 0;
const int   c_mouseButtonLeft               = 1;
const int   c_mouseButtonMiddle             = 2;
const int   c_mouseButtonRight              = 3;
const int   c_mouseButtonXButton1           = 4;
const int   c_mouseButtonXButton2           = 5;

const int   c_scaleNormal                   = 0;
const int   c_scaleAspect                   = 1;
const int   c_scaleStretch                  = 2;

const int c_keyNone                  = -1;
const int c_keyShift                 = 0;
const int c_keyControl               = 1;
const int c_keyAlt                   = 2;
const int c_key0                     = 3;
const int c_key1                     = 4;
const int c_key2                     = 5;
const int c_key3                     = 6;
const int c_key4                     = 7;
const int c_key5                     = 8;
const int c_key6                     = 9;
const int c_key7                     = 10;
const int c_key8                     = 11;
const int c_key9                     = 12;
const int c_keyA                     = 13;
const int c_keyB                     = 14;
const int c_keyC                     = 15;
const int c_keyD                     = 16;
const int c_keyE                     = 17;
const int c_keyF                     = 18;
const int c_keyG                     = 19;
const int c_keyH                     = 20;
const int c_keyI                     = 21;
const int c_keyJ                     = 22;
const int c_keyK                     = 23;
const int c_keyL                     = 24;
const int c_keyM                     = 25;
const int c_keyN                     = 26;
const int c_keyO                     = 27;
const int c_keyP                     = 28;
const int c_keyQ                     = 29;
const int c_keyR                     = 30;
const int c_keyS                     = 31;
const int c_keyT                     = 32;
const int c_keyU                     = 33;
const int c_keyV                     = 34;
const int c_keyW                     = 35;
const int c_keyX                     = 36;
const int c_keyY                     = 37;
const int c_keyZ                     = 38;
const int c_keySpace                 = 39;
const int c_keyGrave                 = 40;
const int c_keyNumPad0               = 41;
const int c_keyNumPad1               = 42;
const int c_keyNumPad2               = 43;
const int c_keyNumPad3               = 44;
const int c_keyNumPad4               = 45;
const int c_keyNumPad5               = 46;
const int c_keyNumPad6               = 47;
const int c_keyNumPad7               = 48;
const int c_keyNumPad8               = 49;
const int c_keyNumPad9               = 50;
const int c_keyNumPadPlus            = 51;
const int c_keyNumPadMinus           = 52;
const int c_keyNumPadMultiply        = 53;
const int c_keyNumPadDivide          = 54;
const int c_keyNumPadDecimal         = 55;
const int c_keyEquals                = 56;
const int c_keyMinus                 = 57;
const int c_keyBracketOpen           = 58;
const int c_keyBracketClose          = 59;
const int c_keyBackSlash             = 60;
const int c_keySemiColon             = 61;
const int c_keyApostrophe            = 62;
const int c_keyComma                 = 63;
const int c_keyPeriod                = 64;
const int c_keySlash                 = 65;
const int c_keyEscape                = 66;
const int c_keyEnter                 = 67;
const int c_keyBackSpace             = 68;
const int c_keyTab                   = 69;
const int c_keyLeft                  = 70;
const int c_keyUp                    = 71;
const int c_keyRight                 = 72;
const int c_keyDown                  = 73;
const int c_keyInsert                = 74;
const int c_keyDelete                = 75;
const int c_keyHome                  = 76;
const int c_keyEnd                   = 77;
const int c_keyPageUp                = 78;
const int c_keyPageDown              = 79;
const int c_keyCapsLock              = 80;
const int c_keyNumLock               = 81;
const int c_keyScrollLock            = 82;
const int c_keyPause                 = 83;
const int c_keyPrintScreen           = 84;
const int c_keyNextTrack             = 85;
const int c_keyPrevTrack             = 86;
const int c_keyF1                    = 87;
const int c_keyF2                    = 88;
const int c_keyF3                    = 89;
const int c_keyF4                    = 90;
const int c_keyF5                    = 91;
const int c_keyF6                    = 92;
const int c_keyF7                    = 93;
const int c_keyF8                    = 94;
const int c_keyF9                    = 95;
const int c_keyF10                   = 96;
const int c_keyF11                   = 97;
const int c_keyF12                   = 98;

const int c_keyModifierStateIgnore  = 0;
const int c_keyModifierStateRequire = 1;
const int c_keyModifierStateExclude = 2;

// Types of custom dialogs
const int c_customDialogTypeMessage = 0;
const int c_customDialogTypeQuery	= 1;

// Results of custom dialogs
const int c_customDialogResultAny = 0;
const int c_customDialogResultYes = 1;
const int c_customDialogResultNo  = 2;
    
// Frames that can be synchronously shown / hidden
const int c_syncFrameTypeFirst                = 0;

const int c_syncFrameTypeMenuBar              = 0;
const int c_syncFrameTypeCashPanel            = 1;
const int c_syncFrameTypeTipAlertPanel        = 2;
const int c_syncFrameTypeObjectivePanel       = 3;    
const int c_syncFrameTypeCharacterSheetButton = 4;
const int c_syncFrameTypeSupply               = 5;
const int c_syncFrameTypeResourcePanel        = 6;
const int c_syncFrameTypeRoomPanel            = 7;
const int c_syncFrameTypePlanetPanel          = 8;
const int c_syncFrameTypeMercenaryPanel       = 9;
const int c_syncFrameTypeResearchPanel        = 10;
const int c_syncFrameTypePurchasePanel        = 11;
const int c_syncFrameTypeVictoryPanel         = 12;
const int c_syncFrameTypeBattleReportPanel    = 13;
const int c_syncFrameTypeAlertPanel           = 14;
const int c_syncFrameTypeHeroPanel            = 15;
const int c_syncFrameTypeErrorDisplayPanel    = 16;
const int c_syncFrameTypeCreditsPanel		  = 17;
const int c_syncFrameTypeTechTreePanel        = 18;
const int c_syncFrameTypeTechGlossaryPanel    = 19;
const int c_syncFrameTypeBattleUI             = 20;
const int c_syncFrameTypeMinimapPanel         = 21;
const int c_syncFrameTypeCommandPanel         = 22;

const int c_syncFrameTypeLast                 = 22;

// Game Menu Dialog Items
const int c_gameMenuDialogItemAny                     = -1;
    
// Buttons that can be renamed
const int c_gameMenuDialogAbortButton                 = 0;   
const int c_gameMenuDialogGenericButton1              = 1;
const int c_gameMenuDialogGenericButton2              = 2;
const int c_gameMenuDialogGenericButton3              = 3;
const int c_gameMenuDialogGenericButton4              = 4;
const int c_gameMenuDialogGenericButton5              = 5;
const int c_gameMenuDialogGenericButton6              = 6;
const int c_gameMenuDialogGenericButton7              = 7;
const int c_gameMenuDialogGenericButton8              = 8;
const int c_gameMenuDialogGenericButton9              = 9;
const int c_gameMenuDialogGenericButton10             = 10;   

// Buttons that cannot be renamed
const int c_gameMenuDialogOptionsButton               = 11;    
const int c_gameMenuDialogLoadButton                  = 12;
const int c_gameMenuDialogSaveButton                  = 13;
const int c_gameMenuDialogPauseButton                 = 14;
const int c_gameMenuDialogRestartButton               = 15;        
const int c_gameMenuDialogReturnToGameplayButton      = 16;    
const int c_gameMenuDialogRestartDifficultyPulldown   = 17;            
const int c_gameMenuDialogQuitButton                  = 18;   

// UI command allowables
const int c_uiCommandAllowButtons       = 0;
const int c_uiCommandAllowHotkeys       = 1;
const int c_uiCommandAllowSmartClick    = 2;
const int c_uiCommandAllowModifiers     = 3;
const int c_uiCommandAllowInfoPanel     = 4;
const int c_uiCommandAllowMinimap       = 5;
const int c_uiCommandAllowPings         = 6;
    
native void         UISetMode (playergroup players, int mode, fixed duration);
native void         UISetWorldVisible (playergroup players, bool isVisible);
native void         UISetCursorVisible (playergroup players, bool isCursorVisible);
native void         UISetCursorAutoHide (playergroup players, bool autoHide, fixed delay);

native void         UIDisplayMessage (playergroup players, int messageArea, text messageText);
native void         UIClearMessages (playergroup players, int messageArea);

native void         UIShowCinematicText (playergroup inPlayers, text inMessageText, fixed inTimeBetweenCharacters, fixed inMaxTime, soundlink inSoundLink);
native void         UIHideCinematicText (playergroup inPlayers);

native void         UIShowTextCrawl (playergroup inPlayers, text inTitle, text inText, fixed inMaxTime, soundlink inBirthSoundLink, soundlink inTypeSoundLink);
native void         UIHideTextCrawl (playergroup inPlayers);

native void         UIUnitColorStyleOverride (playergroup inPlayers, int style);
native void         UIUnitColorStyleClearOverride (playergroup inPlayers);

native void         UIFlyerHelperOverride (playergroup inPlayers, int display);
native void         UIFlyerHelperClearOverride (playergroup inPlayers);

native void         UISetNextLoadingScreen (string imagePath, text title, text subtitle, text body, text  help, bool waitForInput);
native void         UISetNextLoadingScreenImageScale (int imageScale);
native void         UISetNextLoadingScreenTextPosition (int anchor, int offsetX, int offsetY, int width, int height);

native void         UISetRestartLoadingScreen (text  help);

// Alerts (message display and recall via spacebar to a given point or unit)
// - icon may be null for the default icon
//
native void         UIAlert (string alert, int player, text message, string icon);
native void         UIAlertPoint (string alert, int player, text message, string icon, point p);
native void         UIAlertUnit (string alert, int player, text message, string icon, unit u);
native void         UIAlertClear (int player);

native void			UISetFrameVisible (playergroup inPlayers, int inFrameType, bool inVisible);
native bool			UIFrameVisible (int inPlayer, int inFrameType);

native void			UISetGameMenuItemVisible (playergroup inPlayers, int inMenuItemType, bool inVisible);
native bool			UIGameMenuItemVisible (int inPlayer, int inMenuItemType);
native void			UISetGameMenuItemText (playergroup inPlayers, int inMenuItemType, text inText);

native void         UIClearCustomMenuItemList (playergroup inPlayers);
native void			UISetCustomMenuItemVisible (playergroup inPlayers, int inMenuItemType, bool inVisible);
native bool			UICustomMenuItemVisible (int inPlayer, int inMenuItemType);
native void			UISetCustomMenuItemText (playergroup inPlayers, int inMenuItemType, text inText);
native void			UIShowCustomMenu (playergroup inPlayers, text inTitleText);

native void			UIShowCustomDialog (playergroup inPlayers, int inType, text inTitle, text inText, bool pause);

native void         UISetResourceTradeCountdownTime (int time);

native void         UISetButtonHighlighted (playergroup inPlayers, abilcmd inAbilCmd, bool inHighlight);

native void         UISetMiniMapBackGroundColor (color inColor);
native void         UISetMiniMapCameraFoVVisible (bool visible);

native void         UISetCommandAllowed (playergroup players, int option, bool allow);
native void         UISetCommandDisallowedMessage (playergroup players, text message);

native void         UISetChallengeMode (playergroup players, bool challengeMode);     //  Blizzard maps only
native void         UISetChallengeScoreText (playergroup players, string challengeId, text scoreText);     //  Blizzard maps only
native void         UISetChallengeHighScore (playergroup players, string challengeName, int highScore);     //  Blizzard maps only
native void         UISetChallengeCompleted (playergroup players, string challengeName, bool completed);     //  Blizzard maps only

// User Interface events
native void         TriggerAddEventAbortMission (trigger t, int player);
native void         TriggerAddEventCustomDialogDismissed (trigger t, int player, int result);
native void         TriggerAddEventGameMenuItemSelected (trigger t, int player, int gameMenuIndex);
native void         TriggerAddEventMouseClicked (trigger t, int player, int mouseButton, bool down);
native void         TriggerAddEventKeyPressed (trigger t, int player, int key, bool down, int s, int c, int a);
native void         TriggerAddEventButtonPressed (trigger t, int player, string button);
native void         TriggerAddEventGameCreditsFinished (trigger t, int player);

native int          EventCustomDialogResult ();
native int          EventGameMenuItemSelected ();
native int          EventMouseClickedButton ();
native int          EventMouseClickedPosXUI ();
native int          EventMouseClickedPosYUI ();
native fixed        EventMouseClickedPosXWorld ();
native fixed        EventMouseClickedPosYWorld ();
native fixed        EventMouseClickedPosZWorld ();

native int          EventKeyPressed ();
native bool         EventKeyShift ();
native bool         EventKeyControl ();
native bool         EventKeyAlt ();

native string       EventButtonPressed ();

//--------------------------------------------------------------------------------------------------
// Visibility
//--------------------------------------------------------------------------------------------------
const int c_visTypeMask     = 0;
const int c_visTypeFog      = 1;

native void     VisEnable (int visType, bool enable);
native bool     VisIsEnabled (int visType);

native void     VisExploreArea (int player, region area, bool explored, bool checkCliffLevel);
native void     VisRevealArea (int player, region area, fixed duration, bool checkCliffLevel); // Zero duration means permanent

native revealer VisRevealerCreate (int player, region area);
native revealer VisRevealerLastCreated ();
native void     VisRevealerDestroy (revealer r);
native void     VisRevealerEnable (revealer r, bool enable);
native void     VisRevealerUpdate (revealer r); // Update revealer after region has changed


include "TriggerLibs/AI"
include "TriggerLibs/CampaignAI"
include "TriggerLibs/MeleeAI"
include "TriggerLibs/TacticalAI"

// $AS - Trigger Editor(Bug 33070): In order for line numbers to be correct you need a newline at the end of this file


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Race.galaxy generated from Race.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCRace
const int c_classIdCRace = 0;
const string c_classIdCRaceName = "CRace";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Requirement.galaxy generated from Requirement.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCRequirement
const int c_classIdCRequirement = 0;
const string c_classIdCRequirementName = "CRequirement";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  RequirementNode.galaxy generated from RequirementNode.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCRequirementNode
const int c_classIdCRequirementNode = 0;
const int c_classIdCRequirementGT = 1;
const int c_classIdCRequirementLT = 2;
const int c_classIdCRequirementGTE = 3;
const int c_classIdCRequirementLTE = 4;
const int c_classIdCRequirementEq = 5;
const int c_classIdCRequirementNE = 6;
const int c_classIdCRequirementAnd = 7;
const int c_classIdCRequirementOr = 8;
const int c_classIdCRequirementXor = 9;
const int c_classIdCRequirementNot = 10;
const int c_classIdCRequirementSum = 11;
const int c_classIdCRequirementConst = 12;
const int c_classIdCRequirementAllowAbil = 13;
const int c_classIdCRequirementAllowBehavior = 14;
const int c_classIdCRequirementAllowUnit = 15;
const int c_classIdCRequirementAllowUpgrade = 16;
const int c_classIdCRequirementCountAbil = 17;
const int c_classIdCRequirementCountBehavior = 18;
const int c_classIdCRequirementCountEffect = 19;
const int c_classIdCRequirementCountUnit = 20;
const int c_classIdCRequirementCountUpgrade = 21;
const string c_classIdCRequirementNodeName = "CRequirementNode";
const string c_classIdCRequirementGTName = "CRequirementGT";
const string c_classIdCRequirementLTName = "CRequirementLT";
const string c_classIdCRequirementGTEName = "CRequirementGTE";
const string c_classIdCRequirementLTEName = "CRequirementLTE";
const string c_classIdCRequirementEqName = "CRequirementEq";
const string c_classIdCRequirementNEName = "CRequirementNE";
const string c_classIdCRequirementAndName = "CRequirementAnd";
const string c_classIdCRequirementOrName = "CRequirementOr";
const string c_classIdCRequirementXorName = "CRequirementXor";
const string c_classIdCRequirementNotName = "CRequirementNot";
const string c_classIdCRequirementSumName = "CRequirementSum";
const string c_classIdCRequirementConstName = "CRequirementConst";
const string c_classIdCRequirementAllowAbilName = "CRequirementAllowAbil";
const string c_classIdCRequirementAllowBehaviorName = "CRequirementAllowBehavior";
const string c_classIdCRequirementAllowUnitName = "CRequirementAllowUnit";
const string c_classIdCRequirementAllowUpgradeName = "CRequirementAllowUpgrade";
const string c_classIdCRequirementCountAbilName = "CRequirementCountAbil";
const string c_classIdCRequirementCountBehaviorName = "CRequirementCountBehavior";
const string c_classIdCRequirementCountEffectName = "CRequirementCountEffect";
const string c_classIdCRequirementCountUnitName = "CRequirementCountUnit";
const string c_classIdCRequirementCountUpgradeName = "CRequirementCountUpgrade";


//==================================================================================================
//
// Placeholder AI script file
//
//  Since natives.galaxy in Core includes AI files in Liberty, placeholder files are necessary
//  such that Core-only mods can compile properly.
//
//==================================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Reverb.galaxy generated from Reverb.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Reward.galaxy generated from Reward.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCReward
const int c_classIdCReward = 0;
const int c_classIdCRewardDecal = 1;
const int c_classIdCRewardIcon = 2;
const int c_classIdCRewardModel = 3;
const int c_classIdCRewardPortrait = 4;
const string c_classIdCRewardName = "CReward";
const string c_classIdCRewardDecalName = "CRewardDecal";
const string c_classIdCRewardIconName = "CRewardIcon";
const string c_classIdCRewardModelName = "CRewardModel";
const string c_classIdCRewardPortraitName = "CRewardPortrait";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  ScoreResult.galaxy generated from ScoreResult.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  ScoreValue.galaxy generated from ScoreValue.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Sound.galaxy generated from Sound.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCSound
const int c_classIdCSound = 0;
const string c_classIdCSoundName = "CSound";

//  ESoundCategory
const int c_soundCategoryME = 0;
const int c_soundCategoryMovie = 1;
const int c_soundCategoryTV = 2;
const int c_soundCategoryDialogue = 3;
const int c_soundCategoryMission = 4;
const int c_soundCategoryMusic = 5;
const int c_soundCategoryAmbient = 6;
const int c_soundCategorySAmbient = 7;
const int c_soundCategoryAlert = 8;
const int c_soundCategoryDeath = 9;
const int c_soundCategoryReady = 10;
const int c_soundCategorySpell = 11;
const int c_soundCategoryCombat = 12;
const int c_soundCategoryVoice = 13;
const int c_soundCategoryMessage = 14;
const int c_soundCategoryUI = 15;
const int c_soundCategoryFlames = 16;
const int c_soundCategoryBuild = 17;
const int c_soundCategoryGather = 18;
const int c_soundCategoryDoodad = 19;
const int c_soundCategorySEmitters = 20;
const int c_soundCategorySPieces = 21;
const int c_soundCategoryFoley = 22;
const int c_soundCategoryMovement = 23;
const int c_soundCategoryOther = 24;
const string c_soundCategoryMEName = "ME";
const string c_soundCategoryMovieName = "Movie";
const string c_soundCategoryTVName = "TV";
const string c_soundCategoryDialogueName = "Dialogue";
const string c_soundCategoryMissionName = "Mission";
const string c_soundCategoryMusicName = "Music";
const string c_soundCategoryAmbientName = "Ambient";
const string c_soundCategorySAmbientName = "SAmbient";
const string c_soundCategoryAlertName = "Alert";
const string c_soundCategoryDeathName = "Death";
const string c_soundCategoryReadyName = "Ready";
const string c_soundCategorySpellName = "Spell";
const string c_soundCategoryCombatName = "Combat";
const string c_soundCategoryVoiceName = "Voice";
const string c_soundCategoryMessageName = "Message";
const string c_soundCategoryUIName = "UI";
const string c_soundCategoryFlamesName = "Flames";
const string c_soundCategoryBuildName = "Build";
const string c_soundCategoryGatherName = "Gather";
const string c_soundCategoryDoodadName = "Doodad";
const string c_soundCategorySEmittersName = "SEmitters";
const string c_soundCategorySPiecesName = "SPieces";
const string c_soundCategoryFoleyName = "Foley";
const string c_soundCategoryMovementName = "Movement";
const string c_soundCategoryOtherName = "Other";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Soundtrack.galaxy generated from Soundtrack.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCSoundtrack
const int c_classIdCSoundtrack = 0;
const string c_classIdCSoundtrackName = "CSoundtrack";

//  ESoundtrackCategory
const int c_soundtrackCategoryAmbience = 0;
const int c_soundtrackCategoryMusic = 1;
const string c_soundtrackCategoryAmbienceName = "Ambience";
const string c_soundtrackCategoryMusicName = "Music";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Tactical.galaxy generated from Tactical.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTactical
const int c_classIdCTactical = 0;
const int c_classIdCTacticalOrder = 1;
const int c_classIdCTacticalSet = 2;
const string c_classIdCTacticalName = "CTactical";
const string c_classIdCTacticalOrderName = "CTacticalOrder";
const string c_classIdCTacticalSetName = "CTacticalSet";


//==================================================================================================
//
// Placeholder AI script file
//
//  Since natives.galaxy in Core includes AI files in Liberty, placeholder files are necessary
//  such that Core-only mods can compile properly.
//
//==================================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  TargetFind.galaxy generated from TargetFind.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTargetFind
const int c_classIdCTargetFind = 0;
const int c_classIdCTargetFindBestPoint = 1;
const int c_classIdCTargetFindWorkerRallyPoint = 2;
const int c_classIdCTargetFindRallyPoint = 3;
const int c_classIdCTargetFindEnumArea = 4;
const int c_classIdCTargetFindEffect = 5;
const int c_classIdCTargetFindLastAttacker = 6;
const int c_classIdCTargetFindOffset = 7;
const int c_classIdCTargetFindOrder = 8;
const int c_classIdCTargetFindSet = 9;
const string c_classIdCTargetFindName = "CTargetFind";
const string c_classIdCTargetFindBestPointName = "CTargetFindBestPoint";
const string c_classIdCTargetFindWorkerRallyPointName = "CTargetFindWorkerRallyPoint";
const string c_classIdCTargetFindRallyPointName = "CTargetFindRallyPoint";
const string c_classIdCTargetFindEnumAreaName = "CTargetFindEnumArea";
const string c_classIdCTargetFindEffectName = "CTargetFindEffect";
const string c_classIdCTargetFindLastAttackerName = "CTargetFindLastAttacker";
const string c_classIdCTargetFindOffsetName = "CTargetFindOffset";
const string c_classIdCTargetFindOrderName = "CTargetFindOrder";
const string c_classIdCTargetFindSetName = "CTargetFindSet";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  TargetSort.galaxy generated from TargetSort.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTargetSort
const int c_classIdCTargetSort = 0;
const int c_classIdCTargetSortAlliance = 1;
const int c_classIdCTargetSortAngle = 2;
const int c_classIdCTargetSortBehaviorCount = 3;
const int c_classIdCTargetSortBehaviorDuration = 4;
const int c_classIdCTargetSortChargeCount = 5;
const int c_classIdCTargetSortChargeRegen = 6;
const int c_classIdCTargetSortCooldown = 7;
const int c_classIdCTargetSortDistance = 8;
const int c_classIdCTargetSortField = 9;
const int c_classIdCTargetSortMarker = 10;
const int c_classIdCTargetSortPowerSourceLevel = 11;
const int c_classIdCTargetSortPowerUserLevel = 12;
const int c_classIdCTargetSortPriority = 13;
const int c_classIdCTargetSortRandom = 14;
const int c_classIdCTargetSortVeterancy = 15;
const int c_classIdCTargetSortVital = 16;
const int c_classIdCTargetSortVitalFraction = 17;
const string c_classIdCTargetSortName = "CTargetSort";
const string c_classIdCTargetSortAllianceName = "CTargetSortAlliance";
const string c_classIdCTargetSortAngleName = "CTargetSortAngle";
const string c_classIdCTargetSortBehaviorCountName = "CTargetSortBehaviorCount";
const string c_classIdCTargetSortBehaviorDurationName = "CTargetSortBehaviorDuration";
const string c_classIdCTargetSortChargeCountName = "CTargetSortChargeCount";
const string c_classIdCTargetSortChargeRegenName = "CTargetSortChargeRegen";
const string c_classIdCTargetSortCooldownName = "CTargetSortCooldown";
const string c_classIdCTargetSortDistanceName = "CTargetSortDistance";
const string c_classIdCTargetSortFieldName = "CTargetSortField";
const string c_classIdCTargetSortMarkerName = "CTargetSortMarker";
const string c_classIdCTargetSortPowerSourceLevelName = "CTargetSortPowerSourceLevel";
const string c_classIdCTargetSortPowerUserLevelName = "CTargetSortPowerUserLevel";
const string c_classIdCTargetSortPriorityName = "CTargetSortPriority";
const string c_classIdCTargetSortRandomName = "CTargetSortRandom";
const string c_classIdCTargetSortVeterancyName = "CTargetSortVeterancy";
const string c_classIdCTargetSortVitalName = "CTargetSortVital";
const string c_classIdCTargetSortVitalFractionName = "CTargetSortVitalFraction";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Terrain.galaxy generated from Terrain.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTerrain
const int c_classIdCTerrain = 0;
const string c_classIdCTerrainName = "CTerrain";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  TerrainObject.galaxy generated from TerrainObject.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  TerrainTex.galaxy generated from TerrainTex.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTerrainTex
const int c_classIdCTerrainTex = 0;
const string c_classIdCTerrainTexName = "CTerrainTex";


//==================================================================================================
// Performs tests on all natives functions
//==================================================================================================
include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
const int c_outputError     = 1;
const int c_outputInfo      = 2;
const int c_outputAnim      = 3;

//--------------------------------------------------------------------------------------------------
void OutputInit () {
    TriggerDebugSetTypeName(c_outputError, StringToText("Error"));
    TriggerDebugSetTypeColor(c_outputError, Color(75, 0, 0));
    
    TriggerDebugSetTypeName(c_outputInfo, StringToText("Info"));
    TriggerDebugSetTypeColor(c_outputInfo, Color(0, 0, 0));
    
    TriggerDebugSetTypeName(c_outputAnim, StringToText("Anim"));
    TriggerDebugSetTypeColor(c_outputAnim, Color(0, 0, 50));
}

//--------------------------------------------------------------------------------------------------
void OutputText (int type, text inText) {
    TriggerDebugOutput(type, inText, false);
}

//--------------------------------------------------------------------------------------------------
void Output (int type, string inText) {
    OutputText(type, StringToText(inText));
}

//--------------------------------------------------------------------------------------------------
void CheckNativeError (bool check, string name) {
    if (!check) {
        Output(c_outputError, "Found an error with native function: " + name);
    }
}

//--------------------------------------------------------------------------------------------------
//bool ApproxEqualEx (fixed x1, fixed x2, fixed eps) {
//    fixed diff;
//    diff = x1 - x2;
//    return (diff < eps && diff > -eps);
//}
//
//bool ApproxEqual (fixed x1, fixed x2) {
//    return ApproxEqualEx(x1, x2, 0.001);
//}

//--------------------------------------------------------------------------------------------------
const fixed c_totalTestDuration = 10.0;

////--------------------------------------------------------------------------------------------------
//// Variable testing
////--------------------------------------------------------------------------------------------------
//bool        g_bool          = true;
//byte        g_byte          = 9;
//char        g_char          = 'x';
//fixed       g_fixed         = 3.14;
//handle      g_handle        = null;
//int         g_int           = 3;
//order       g_order         = null;
//playergroup g_playergroup   = null;
//point       g_point         = null;
//region      g_region        = null;
//string      g_string        = "text";
//timer       g_timer         = null;
//trigger     g_trigger       = null;
//unit        g_unit          = null;
//unitfilter  g_unitfilter    = null;
//unitgroup   g_unitgroup     = null;
//
//bool ChangeVars (bool c, bool a) {
//    g_bool          = false;
//    g_byte          = 222;
//    g_char          = 'y';
//    g_fixed         = 7.89;
//    g_handle        = Point(0, 0);
//    g_int           = 81;
//    g_order         = Order(AbilityCommand("move", 1));
//    g_playergroup   = PlayerGroupEmpty();
//    PlayerGroupAdd(g_playergroup, 12);
//    PlayerGroupAdd(g_playergroup, 7);
//    g_point         = Point(1.2, 3.4);
//    g_region        = RegionCircle(Point(1, 2), 3);
//    g_string        = "new string";
//    g_timer         = TimerCreate();
//    TimerStart(g_timer, 12, true, false);
//    g_trigger       = TriggerCreate("Dummy");
//    g_unit          = null;
//    g_unitfilter    = UnitFilter((1 << c_targetFilterEnemy), (1 << c_targetFilterWorker));
//    g_unitgroup     = UnitGroup(null, 1, null, null, 0);
//    return true;
//}
//
//void TestVariables () {
//    trigger t;
//    t = TriggerCreate("ChangeVars");
//    TriggerAddEventChatMessage(t, 1, "testvar", true);
//}
//
////--------------------------------------------------------------------------------------------------
//// Events which are expected to fire
////
//bool g_testEventPlayerProperty      = false;
//bool g_testEventTimerPeriodic       = false;
//bool g_testEventTimerOneShot        = false;
//bool g_testEventUnitDamaged         = false;
//bool g_testEventUnitDied            = false;
//bool g_testEventUnitDecayed         = false;
//bool g_testEventUnitDetected        = false;
//bool g_testEventUnitAttacked        = false;
//bool g_testEventUnitConstruct       = false;
//bool g_testEventUnitTrain           = false;
//bool g_testEventUnitResearch        = false;
//bool g_testEventUnitIssuedOrder     = false;
//bool g_testEventUnitPropertyChanged = false;
//bool g_testEventUnitSelected        = false;
//bool g_testEventUnitRegion          = false;
//bool g_testEventUnitCargo           = false;
//bool g_testTriggerQueue             = false;
//
//bool CheckTestEvents_Trigger (bool c, bool a) {
//    CheckNativeError(g_testEventPlayerProperty,         "Player property event did not fire"        );
//    CheckNativeError(g_testEventTimerPeriodic,          "Periodic timer event did not fire"         );
//    CheckNativeError(g_testEventTimerOneShot,           "One-shot timer event did not fire"         );
//    CheckNativeError(g_testEventUnitDamaged,            "c_unitEventDamaged did not fire"           );
//    CheckNativeError(g_testEventUnitDied,               "c_unitEventDied did not fire"              );
//    //CheckNativeError(g_testEventUnitDecayed,            "c_unitEventDecayed did not fire"           );
//    //CheckNativeError(g_testEventUnitDetected,           "c_unitEventDetected did not fire"          );
//    //CheckNativeError(g_testEventUnitAttacked,           "c_unitEventAttacked did not fire"          );
//    CheckNativeError(g_testEventUnitConstruct,          "c_unitProgressTypeConstruct event did not fire"  );
//    CheckNativeError(g_testEventUnitTrain,              "c_unitProgressTypeTrain event did not fire"      );
//    //CheckNativeError(g_testEventUnitResearch,           "c_unitEventProgressResearch did not fire"  );
//    CheckNativeError(g_testEventUnitIssuedOrder,        "c_unitEventIssuedOrder did not fire"       );
//    CheckNativeError(g_testEventUnitPropertyChanged,    "c_unitEventPropertyChanged did not fire"   );
//    CheckNativeError(g_testEventUnitSelected,           "Unit selection event did not fire"         );
//    CheckNativeError(g_testEventUnitRegion,             "Unit region event did not fire"            );
//    CheckNativeError(g_testEventUnitCargo,              "Unit cargo event did not fire"             );
//    CheckNativeError(g_testTriggerQueue,                "Trigger Queue did not complete"            );
//    
//    Output(c_outputInfo, "TestNatives complete.");
//    return true;
//}
//
//void CheckTestEvents () {
//    trigger t = TriggerCreate("CheckTestEvents_Trigger");
//    TriggerAddEventTimeElapsed(t, c_totalTestDuration, c_timeReal);
//}
//
////--------------------------------------------------------------------------------------------------
//void TestConversions () {
//    int i;
//    fixed f;
//    string s;
//    color c1;
//    color c2;
//    
//    // IntToFixed
//    i = 333;
//    f = IntToFixed(i);
//    CheckNativeError(f == 333.0, "IntToFixed");
//    
//    // IntToString
//    s = IntToString(i);
//    CheckNativeError(StringEqual(s, "333", true), "IntToString");
//    
//    // FixedToInt
//    f = 444.0;
//    i = FixedToInt(f);
//    CheckNativeError(i == 444, "FixedToInt");
//    
//    // FixedToString
//    s = FixedToString(f, c_fixedPrecisionAny);
//    CheckNativeError(StringEqual(s, "444", true), "FixedToString");
//    
//    s = FixedToString(f, 2);
//    CheckNativeError(StringEqual(s, "444.00", true), "FixedToString");
//    
//    // StringToInt
//    s = "42";
//    i = StringToInt(s);
//    CheckNativeError(i == 42, "StringToInt");
//    
//    // StringToFixed
//    s = "42.8";
//    f = StringToFixed(s);
//    CheckNativeError(f == 42.8, "StringToFixed");
//    
//    // Color
//    c1 = Color(50, 75, 100);
//    
//    // ColorWithAlpha
//    c2 = ColorWithAlpha(50, 75, 100, 25);
//    
//    // ColorGetComponent
//    CheckNativeError(ApproxEqualEx(ColorGetComponent(c1, c_colorComponentRed), 50, 1), "ColorGetComponent(c_colorComponentRed)");
//    CheckNativeError(ApproxEqualEx(ColorGetComponent(c2, c_colorComponentGreen), 75, 1), "ColorGetComponent(c_colorComponentGreen)");
//    CheckNativeError(ApproxEqualEx(ColorGetComponent(c1, c_colorComponentBlue), ColorGetComponent(c2, c_colorComponentBlue), 1), "ColorGetComponent(c_colorComponentBlue)");
//    CheckNativeError(ApproxEqualEx(ColorGetComponent(c2, c_colorComponentAlpha), 25, 1), "ColorGetComponent(c_colorComponentAlpha)");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestStrings () {
//    string s;
//    string t;
//    int i;
//    
//    // StringLength
//    s = "Grunt";
//    i = StringLength(s);
//    CheckNativeError(i == 5, "StringLength");
//        
//    // StringCase
//    t = StringCase(s, true);
//    CheckNativeError(StringEqual(t, "GRUNT", true), "StringCase");
//        
//    t = StringCase(s, false);
//    CheckNativeError(StringEqual(t, "grunt", true), "StringCase");
//        
//    // StringSub
//    t = StringSub(s, 2, 4);
//    CheckNativeError(StringEqual(t, "run", true), "StringSub");
//    
//    // StringEqual
//    CheckNativeError(StringEqual("marine", "MaRiNe", false), "StringEqual");
//
//    // StringFind
//    s = "ultralisk";
//    CheckNativeError(StringFind(s, "tra", true) == 3, "StringFind");
//    
//    // StringContains
//    CheckNativeError(StringContains(s, "ultra", c_stringBegin, true), "StringContains");
//    CheckNativeError(StringContains(s, "lisk", c_stringEnd, true), "StringContains");
//    CheckNativeError(StringContains(s, "rali", c_stringAnywhere, true), "StringContains");
//
//    // StringWord
//    s = "klaatu barada nikto";
//    CheckNativeError(StringWord(s, 2) == "barada", "StringWord");
//
//    // StringReplace
//    t = StringReplace(s, "necktie", 15, 19);
//    CheckNativeError(t == "klaatu barada necktie", "StringReplace");
//
//    // StringReplaceWord
//    t = StringReplaceWord(s, "barada", "barracuda", c_stringReplaceAll, true);
//    CheckNativeError(t == "klaatu barracuda nikto", "StringReplaceWord");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestMath () {
//    int i;
//    fixed x;
//    
//    // SquareRoot
//    x = SquareRoot(81.0);
//    CheckNativeError(x == 9.0, "SquareRoot");
//    
//    // Pow
//    x = Pow(3.0, 4.0);
//    CheckNativeError(x == 81.0, "Pow");
//    
//    // ModF
//    x = ModF(81.0, 7.0);
//    CheckNativeError(x == 4.0, "Mod");
//    
//    // Sin
//    x = Sin(90.0);
//    CheckNativeError(ApproxEqual(x, 1.0), "Sin");
//    
//    // Cos
//    x = Cos(180.0);
//    CheckNativeError(ApproxEqual(x, -1.0), "Cos");
//    
//    // Tan
//    x = Tan(45.0);
//    CheckNativeError(ApproxEqual(x, 1.0), "Tan");
//    
//    // ASin
//    x = ASin(1.0);
//    CheckNativeError(ApproxEqual(x, 90.0), "ASin");
//    
//    // ACos
//    x = ACos(-1.0);
//    CheckNativeError(ApproxEqual(x, 180.0), "ACos");
//    
//    // ATan
//    x = ATan(1.0);
//    CheckNativeError(ApproxEqual(x, 45.0), "ATan");
//    
//    // ATan2
//    x = ATan2(1.0, 1.0);
//    CheckNativeError(ApproxEqual(x, 45.0), "ATan2");
//    
//    // RandomInt
//    i = RandomInt(45, 55);
//    CheckNativeError(i >= 45 && i <= 55, "RandomInt");
//    
//    // RandomFixed
//    x = RandomFixed(3.4, 5.7);
//    CheckNativeError(x >= 3.4 && x <= 5.7, "RandomFixed");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestPoints () {
//    point p;
//    point p2;
//    point p3;
//    fixed f;
//    
//    p = Point(1.2, 3.4);
//    
//    // PointGetX
//    f = PointGetX(p);
//    CheckNativeError(f == 1.2, "PointGetX");
//    
//    // PointGetY
//    f = PointGetY(p);
//    CheckNativeError(f == 3.4, "PointGetY");
//    
//    // PointWithOffset
//    p2 = PointWithOffset(p, 10.0, 20.0);
//    CheckNativeError(PointGetX(p2) == 11.2, "PointWithOffset");
//    CheckNativeError(PointGetY(p2) == 23.4, "PointWithOffset");
//    
//    // PointWithOffsetPolar
//    p2 = PointWithOffsetPolar(p, 10.0, 90.0);
//    CheckNativeError(ApproxEqual(PointGetX(p2),  1.2), "PointWithOffsetPolar");
//    CheckNativeError(ApproxEqual(PointGetY(p2), 13.4), "PointWithOffsetPolar");
//
//    // PointSet
//    PointSet(p2, p);
//    CheckNativeError(ApproxEqual(PointGetX(p2), 1.2), "PointSet");
//    CheckNativeError(ApproxEqual(PointGetY(p2), 3.4), "PointSet");
//    
//    // AngleBetweenPoints
//    f = AngleBetweenPoints(Point(75.0, 0.0), Point(150.0, 75.0));
//    CheckNativeError(f == 45.0, "AngleBetweenPoints");
//    
//    // DistanceBetweenPoints
//    f = DistanceBetweenPoints(Point(3.0, 3.0), Point(6.0, -1.0));
//    CheckNativeError(f == 5.0, "DistanceBetweenPoints");
//
//    // Native point addition
//    p2 = Point(5.6, 7.8);
//    p3 = p + p2;
//    CheckNativeError(ApproxEqual(PointGetX(p3),  6.8), "Native point addition");
//    CheckNativeError(ApproxEqual(PointGetY(p3), 11.2), "Native point addition");
//
//    // Native point subtraction
//    p3 = p2 - p;
//    CheckNativeError(ApproxEqual(PointGetX(p3),  4.4), "Native point subtraction");
//    CheckNativeError(ApproxEqual(PointGetY(p3),  4.4), "Native point subtraction");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestRegions () {
//    region r;
//    region rl;
//    region rh;
//    point p;
//    
//    // L-shaped region from two rects
//    //
//    rl = RegionRect(0, 1, 1, 4);
//    RegionAddRect(rl, true, 0, 0, 3, 1);
//    
//    // Square region with a hole in the center
//    rh = RegionEmpty();
//    RegionAddRect(rh, true, -2, -2, 2, 2);
//    RegionAddCircle(rh, false, Point(0, 0), 1);
//    
//    // RegionSetOffset/RegionGetOffset
//    RegionSetOffset(rh, Point(5, 6));
//    p = RegionGetOffset(rh);
//    CheckNativeError(PointGetX(p) == 5.0, "RegionGetOffset");
//    CheckNativeError(PointGetY(p) == 6.0, "RegionGetOffset");
//    
//    // RegionContainsPoint
//    CheckNativeError( RegionContainsPoint(rl, Point(1.5, 0.5)), "RegionContainsPoint");
//    CheckNativeError(!RegionContainsPoint(rl, Point(1.5, 1.5)), "RegionContainsPoint");
//    
//    CheckNativeError( RegionContainsPoint(rh, Point(4.1, 5.1)), "RegionContainsPoint");
//    CheckNativeError(!RegionContainsPoint(rh, Point(5.5, 6.0)), "RegionContainsPoint");
//    
//    // RegionGetBoundsMin
//    p = RegionGetBoundsMin(rh);
//    CheckNativeError(PointGetX(p) == 3.0, "RegionGetBoundsMin");
//    CheckNativeError(PointGetY(p) == 4.0, "RegionGetBoundsMin");
//    
//    // RegionGetBoundsMax
//    p = RegionGetBoundsMax(rl);
//    CheckNativeError(PointGetX(p) == 3.0, "RegionGetBoundsMax");
//    CheckNativeError(PointGetY(p) == 4.0, "RegionGetBoundsMax");
//    
//    // RegionGetCenter
//    p = RegionGetCenter(rh);
//    CheckNativeError(PointGetX(p) == 5.0, "RegionGetCenter");
//    CheckNativeError(PointGetY(p) == 6.0, "RegionGetCenter");
//    
//    p = RegionGetCenter(rl);
//    CheckNativeError(PointGetX(p) == 1.0, "RegionGetCenter");
//    CheckNativeError(PointGetY(p) == 1.5, "RegionGetCenter");
//    
//    // RegionEntireMap
//    r = RegionEntireMap();
//    p = RegionGetBoundsMax(r);
//    CheckNativeError(PointGetX(p) == 128.0, "RegionEntireMap");
//    CheckNativeError(PointGetY(p) == 128.0, "RegionEntireMap");
//}
//
////--------------------------------------------------------------------------------------------------
//bool TimerPeriodic (bool c, bool a) {
//    g_testEventTimerPeriodic = true;
//    return true;
//}
//
//bool TimerElapsed (bool c, bool a) {
//    g_testEventTimerOneShot = true;
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestTimers () {
//    timer t;
//    fixed f;
//    fixed dur;
//    trigger trig;
//    
//    // Timer
//    dur = 6.0;
//    t = TimerCreate();
//    TimerStart(t, dur, true, true);
//    
//    f = TimerGetElapsed(t);
//    CheckNativeError(f == 0.0, "TimerGetElapsed");
//    
//    f = TimerGetRemaining(t);
//    CheckNativeError(f == dur, "TimerGetRemaining");
//    
//    f = TimerGetDuration(t);
//    CheckNativeError(f == dur, "TimerGetDuration");
//    
//    trig = TriggerCreate("TimerPeriodic");
//    TriggerAddEventTimer(trig, t);
//    
//    // Time elapsed event
//    trig = TriggerCreate("TimerElapsed");
//    TriggerAddEventTimeElapsed(trig, 9, c_timeReal);
//}
//
////--------------------------------------------------------------------------------------------------
//bool PlayerPropChange (bool c, bool a) {
//    g_testEventPlayerProperty = true;
//    CheckNativeError(EventPlayer() == 1, "EventPlayer");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestPlayers () {
//    int i;
//    fixed f;
//    trigger t;
//    
//    // TriggerPlayerPropChange
//    t = TriggerCreate("PlayerPropChange");
//    TriggerPlayerPropChange(t, 1, c_playerPropGas);
//    
//    // PlayerModifyPropertyInt
//    PlayerModifyPropertyInt(1, c_playerPropGas, c_playerPropOperSetTo, 314);
//    
//    // PlayerGetPropertyInt
//    i = PlayerGetPropertyInt(1, c_playerPropGas);
//    CheckNativeError(i == 314, "PlayerGetPropertyInt");
//    
//    // PlayerGetPropertyFixed
//    f = PlayerGetPropertyFixed(1, c_playerPropGas);
//    CheckNativeError(f == 314.0, "PlayerGetPropertyFixed");
//    
//    // PlayerRace
//    // (we don't know specifically which race the player will be,
//    //  so just check for any of the recognized races)
//    //
//    CheckNativeError(
//        (PlayerRace(1) == "Prot") ||
//        (PlayerRace(1) == "Terr") ||
//        (PlayerRace(1) == "Zerg"),
//        "PlayerRace"
//    );
//    
//    // PlayerGetColorIndex
//    CheckNativeError(PlayerGetColorIndex(1, true) == 1, "PlayerGetColorIndex");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestPlayerGroups () {
//    playergroup g;
//    playergroup g2;
//    int i;
//    
//    // Note that player groups are always sorted
//    g = PlayerGroupEmpty();
//    PlayerGroupAdd(g, 7);
//    PlayerGroupAdd(g, 4);
//    PlayerGroupAdd(g, 9);
//    
//    // PlayerGroupCount
//    i = PlayerGroupCount(g);
//    CheckNativeError(i == 3, "PlayerGroupCount");
//    
//    // PlayerGroupPlayer
//    i = PlayerGroupPlayer(g, 2);
//    CheckNativeError(i == 7, "PlayerGroupPlayer");
//    
//    // PlayerGroupCopy
//    g2 = PlayerGroupCopy(g);
//    CheckNativeError(PlayerGroupPlayer(g2, 3) == 9, "PlayerGroupCopy");
//    
//    // PlayerGroupHasPlayer
//    CheckNativeError(PlayerGroupHasPlayer(g2, 4), "PlayerGroupHasPlayer");
//    
//    // PlayerGroupClear
//    PlayerGroupClear(g2);
//    CheckNativeError(PlayerGroupCount(g2) == 0, "PlayerGroupClear");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestOrders () {
//    order stop;
//    order move;
//    order patrol;
//    order attack;
//    unit u;
//    unit testUnit;
//    point p;
//    abilcmd a;
//    
//    testUnit = UnitGroupUnit(UnitGroup("CoCe", 1, null, null, 0), 1);
//    
//    // Create orders
//    stop = Order(AbilityCommand("stop", 0));
//    move = OrderTargetingPoint(AbilityCommand("move", 0), Point(111, 222));
//    patrol = OrderTargetingPoint(AbilityCommand("move", 1), Point(333, 444));
//    attack = OrderTargetingUnit(AbilityCommand("atck", 0), testUnit);
//    
//    // OrderGetAbilityCommand
//    a = OrderGetAbilityCommand(stop);
//    CheckNativeError(StringEqual(AbilityCommandGetAbility(a), "stop", true), "OrderGetAbilityCommand (abil)");
//    
//    // OrderGetCommand
//    a = OrderGetAbilityCommand(patrol);
//    CheckNativeError(AbilityCommandGetCommand(a) == 1, "OrderGetAbilityCommand (cmd)");
//    
//    // OrderGetTargetPoint
//    p = OrderGetTargetPoint(move);
//    CheckNativeError(p == Point(111, 222), "OrderGetTargetPoint");
//    
//    // OrderGetTargetUnit
//    u = OrderGetTargetUnit(attack);
//    CheckNativeError(u == testUnit, "OrderGetTargetUnit");
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitEventDeath (bool c, bool a) {
//    g_testEventUnitDied = true;
//    
//    CheckNativeError(EventUnitType() == c_unitEventDied, "EventUnitType (c_unitEventDied)");
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "Fire", true), "EventUnit (c_unitEventDied)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitDamage (bool c, bool a) {
//    g_testEventUnitDamaged = true;
//    
//    CheckNativeError(EventUnitType() == c_unitEventDamaged, "EventUnitType (c_unitEventDamaged)");
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "Fire", true), "EventUnit (c_unitEventDamaged)");
//    CheckNativeError(EventUnitDamageAmount() == 5, "EventUnitDamageAmount");
//    CheckNativeError(EventUnitDamageSourcePlayer() == 1, "EventUnitDamageSourcePlayer");
//    CheckNativeError(StringEqual(UnitGetType(EventUnitDamageSourceUnit()), "Mari", true), "EventUnitDamageSourceUnit");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitConstruct (bool c, bool a) {
//    g_testEventUnitConstruct = true;
//    
//    CheckNativeError(EventUnitProgressType() == c_unitProgressTypeConstruct, "EventUnitProgressType (c_unitProgressTypeConstruct)");
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "SCV_", true), "EventUnit (c_unitProgressTypeConstruct)");
//    CheckNativeError(StringEqual(EventUnitProgressObjectType(), "Barr", true), "EventUnitProgressObjectType (c_unitProgressTypeConstruct)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitTrain (bool c, bool a) {
//    g_testEventUnitTrain = true;
//    
//    CheckNativeError(EventUnitProgressType() == c_unitProgressTypeTrain, "EventUnitType (c_unitProgressTypeTrain)");
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "CoCe", true), "EventUnit (c_unitProgressTypeTrain)");
//    CheckNativeError(StringEqual(EventUnitProgressObjectType(), "SCV_", true), "EventUnitProgressObjectType (c_unitProgressTypeTrain)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitOrder (bool c, bool a) {
//    g_testEventUnitIssuedOrder = true;
//    
//    CheckNativeError(StringEqual(AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())), "move", true), "EventUnitOrder");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitPropChange (bool c, bool a) {
//    g_testEventUnitPropertyChanged = true;
//    
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "Fire", true), "EventUnit (property event)");
//    CheckNativeError(EventUnitProperty() == c_unitPropLife, "EventUnitProperty");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitRegion (bool c, bool a) {
//    g_testEventUnitRegion = true;
//    
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "Fire", true), "EventUnit (region event)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//bool OnUnitCargo (bool c, bool a) {
//    g_testEventUnitCargo = true;
//    
//    CheckNativeError(StringEqual(UnitGetType(EventUnit()), "Bunk", true), "EventUnit (cargo event)");
//    CheckNativeError(EventUnitState(), "EventUnitState (cargo event)");
//    CheckNativeError(StringEqual(UnitGetType(EventUnitCargo()), "Ghos", true), "EventUnitCargo (cargo event)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//unit g_unitSelect = null;
//bool UnitSelectTrigger (bool c, bool a) {
//    UnitSelect(g_unitSelect, 1, true);
//    return true;
//}
//
//bool UnitIsSelectedTrigger (bool c, bool a) {
//    CheckNativeError(UnitIsSelected(g_unitSelect, 1), "UnitSelect/UnitIsSelected");
//    return true;
//}
//
//bool UnitClearSelectionTrigger (bool c, bool a) {
//    UnitClearSelection(1);
//    return true;
//}
//
//bool OnUnitSelected (bool c, bool a) {
//    g_testEventUnitSelected = true;
//    CheckNativeError(EventPlayer() == 1, "EventPlayer (selection event)");
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestUnits () {
//    bool b;
//    string s;
//    int i;
//    fixed f;
//    point p;
//    unit u;
//    unit bat;
//    unit marine;
//    unit bunk;
//    trigger t;
//    
//    // UnitCreate
//    UnitCreate(5, "Mari", c_unitCreateAlive, 1, Point(64, 64), 135.0);
//    marine = UnitLastCreated();
//    
//    // UnitKill
//    UnitCreate(1, "Batt", c_unitCreateAlive, 1, Point(66, 64), 0);
//    UnitKill(UnitLastCreated());
//    
//    // UnitIsAlive
//    CheckNativeError(UnitIsAlive(marine), "UnitIsAlive");
//    
//    // UnitGetType
//    s = UnitGetType(marine);
//    CheckNativeError(StringEqual(s, "Mari", true), "UnitGetType");
//    
//    // UnitTypeGetName
//    OutputText(c_outputInfo, StringToText("UnitGetName(marine) = ") + UnitTypeGetName(s));
//    
//    // UnitGetOwner
//    i = UnitGetOwner(marine);
//    CheckNativeError(i == 1, "UnitGetOwner");
//    
//    // UnitSetOwner
//    UnitCreate(1, "Fire", c_unitCreateAlive, 1, Point(64, 61), 0);
//    bat = UnitLastCreated();
//    UnitSetOwner(bat, 2, true);
//    
//    // c_unitEventDamaged
//    t = TriggerCreate("OnUnitDamage");
//    TriggerAddEventUnit(t, bat, c_unitEventDamaged);
//    
//    // c_unitEventDied
//    t = TriggerCreate("OnUnitEventDeath");
//    TriggerAddEventUnit(t, bat, c_unitEventDied);
//    
//    // TriggerAddEventUnitProperty
//    t = TriggerCreate("OnUnitPropChange");
//    TriggerAddEventUnitProperty(t, bat, c_unitPropLife);
//    
//    // UnitGetPosition
//    p = UnitGetPosition(bat);
//    CheckNativeError(PointGetX(p) == 64.0, "UnitGetPosition");
//    CheckNativeError(PointGetY(p) == 61.0, "UnitGetPosition");
//    
//    // UnitSetPosition
//    UnitSetPosition(marine, Point(61, 61));
//    p = UnitGetPosition(marine);
//    CheckNativeError(PointGetX(p) == 61.0, "UnitGetPosition");
//    CheckNativeError(PointGetY(p) == 61.0, "UnitGetPosition");
//    
//    // UnitGetFacing
//    f = UnitGetFacing(marine);
//    CheckNativeError(f == 135.0, "UnitGetFacing");
//    
//    // UnitSetFacing
//    UnitSetFacing(marine, 45.0, 0.0);
//    f = UnitGetFacing(marine);
//    CheckNativeError(f == 45.0, "UnitSetFacing");
//    
//    // UnitSetPropertyInt
//    UnitSetPropertyInt(marine, c_unitPropLife, 1);
//    i = UnitGetPropertyInt(marine, c_unitPropLife, c_unitPropCurrent);
//    CheckNativeError(i == 1, "UnitSetPropertyInt");
//    
//    // UnitAbilityExists
//    UnitCreate(1, "Zeal", c_unitCreateAlive, 1, Point(60, 70), 0);
//    u = UnitLastCreated();
//    b = UnitAbilityExists(u, "move");
//    CheckNativeError(b, "UnitAbilityExists");
//    
//    // UnitAbilityEnable
//    UnitAbilityEnable(u, "move", false);
//    b = UnitAbilityCheck(u, "move", true);
//    CheckNativeError(!b, "UnitAbilityEnable");
//    
//    // UnitMoverExists
//    CheckNativeError(UnitMoverExists(u, "Ground"), "UnitMoverExists");
//    CheckNativeError(!UnitMoverExists(u, "Fly"), "UnitMoverExists");
//    
//    // UnitTestPlane
//    CheckNativeError(UnitTestPlane(u, c_planeGround), "UnitTestPlane");
//    CheckNativeError(!UnitTestPlane(u, c_planeAir), "UnitTestPlane");
//    
//    // TriggerAddEventUnitOrder
//    t = TriggerCreate("OnUnitOrder");
//    TriggerAddEventUnitOrder(t, null, AbilityCommand("move", 1));
//    
//    // UnitIssueOrder
//    UnitCreate(1, "Fire", c_unitCreateAlive, 1, Point(55, 58), 0);
//    u = UnitLastCreated();
//    UnitIssueOrder(u, OrderTargetingPoint(AbilityCommand("move", 1), Point(75, 58)), c_orderQueueAddToEnd);
//    
//    // UnitSetTeamColorIndex
//    UnitSetTeamColorIndex(u, 3);
//    UnitResetTeamColorIndex(u);
//    
//    // UnitSelect
//    // - Can't be done during map init
//    g_unitSelect = u;
//    t = TriggerCreate("UnitSelectTrigger");
//    TriggerAddEventTimeElapsed(t, 1, c_timeReal);
//    
//    // UnitIsSelected
//    t = TriggerCreate("UnitIsSelectedTrigger");
//    TriggerAddEventTimeElapsed(t, 2, c_timeReal);
//    
//    // UnitClearSelection
//    t = TriggerCreate("UnitClearSelectionTrigger");
//    TriggerAddEventTimeElapsed(t, 8, c_timeReal);
//    
//    // TriggerAddEventUnitSelected
//    t = TriggerCreate("OnUnitSelected");
//    TriggerAddEventUnitSelected(t, g_unitSelect, 1, true);
//    
//    // TriggerAddEventUnitRegion
//    t = TriggerCreate("OnUnitRegion");
//    TriggerAddEventUnitRegion(t, u, RegionRect(60, 55, 70, 61), true);
//    
//    // TriggerAddEventUnitProgress, c_unitProgressTypeConstruct
//    t = TriggerCreate("OnUnitConstruct");
//    TriggerAddEventUnitProgress(t, null, c_unitProgressTypeConstruct, c_unitProgressStageStart);
//    
//    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 500);
//    UnitCreate(1, "SCV_", c_unitCreateAlive, 1, Point(40, 62), 0);
//    u = UnitLastCreated();
//    UnitIssueOrder(u, OrderTargetingPoint(AbilityCommand("tbld", 4), Point(40, 62)), c_orderQueueAddToEnd);
//    
//    // TriggerAddEventUnitProgress, c_unitProgressTypeTrain
//    t = TriggerCreate("OnUnitTrain");
//    TriggerAddEventUnitProgress(t, null, c_unitProgressTypeTrain, c_unitProgressStageStart);
//    
//    UnitCreate(2, "SuDe", c_unitCreateAlive, 1, Point(40, 40), 0);
//    u = UnitGroupUnit(UnitGroup("CoCe", 1, null, null, 0), 1);
//    UnitIssueOrder(u, Order(AbilityCommand("cctr", 0)), c_orderQueueAddToEnd);
//    
//    // TriggerAddEventUnitCargo
//    UnitCreate(1, "Bunk", c_unitCreateAlive, 1, Point(32, 96), 0);
//    bunk = UnitLastCreated();
//    
//    UnitCreate(1, "Ghos", c_unitCreateAlive, 1, Point(36, 96), 0);
//    u = UnitLastCreated();
//    UnitIssueOrder(bunk, OrderTargetingUnit(AbilityCommand("bunk", 0), u), c_orderQueueAddToEnd);
//    
//    t = TriggerCreate("OnUnitCargo");
//    TriggerAddEventUnitCargo(t, bunk, true);
//    
//    // UnitMagazineArm
//    UnitCreate(1, "LaunchFacility", c_unitCreateAlive, 1, Point(32, 102), 0);
//    u = UnitLastCreated();
//    
//    UnitMagazineArm(u, "ArmSiloWithNuke", 0, 2);
//    CheckNativeError(UnitMagazineCount(u, "ArmSiloWithNuke") == 2, "UnitMagazineArm");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestUnitFilters () {
//    unitfilter f;
//    int state;
//    
//    // UnitFilter
//    f = UnitFilter((1 << c_targetFilterMinerals), 0);
//    
//    state = UnitFilterGetState(f, c_targetFilterMinerals);
//    CheckNativeError(state == c_unitFilterRequired, "UnitFilter (required)");
//    
//    state = UnitFilterGetState(f, c_targetFilterInvulnerable);
//    CheckNativeError(state == c_unitFilterAllowed, "UnitFilter (allowed)");
//    
//    // UnitFilterSetState
//    UnitFilterSetState(f, c_targetFilterInvulnerable, c_unitFilterExcluded);
//    state = UnitFilterGetState(f, c_targetFilterInvulnerable);
//    CheckNativeError(state == c_unitFilterExcluded, "UnitFilterSetState (excluded)");
//}
//
////--------------------------------------------------------------------------------------------------
//void TestUnitGroups () {
//    unitgroup g;
//    unitgroup g2;
//    int i;
//    unit u;
//    
//    g = UnitGroup("SCV_", 1, null, null, 0);
//    
//    // UnitGroupCount
//    i = UnitGroupCount(g, c_unitCountAll);
//    CheckNativeError(i == 7, "UnitGroupCount");
//    
//    // UnitGroupCount (alive)
//    i = UnitGroupCount(g, c_unitCountAlive);
//    CheckNativeError(i == 7, "UnitGroupCount (alive)");
//    
//    // UnitGroupUnit
//    CheckNativeError(StringEqual(UnitGetType(UnitGroupUnit(g, 1)), "SCV_", true), "UnitGroupUnit");
//
//    // UnitGroupRandomUnit
//    CheckNativeError(StringEqual(UnitGetType(UnitGroupRandomUnit(g, c_unitCountAlive)), "SCV_", true), "UnitGroupRandomUnit");
//    CheckNativeError(UnitGroupRandomUnit(g, c_unitCountDead) == null, "UnitGroupRandomUnit");
//
//    // UnitGroupFilter
//    g2 = UnitGroupFilter("SCV_", 1, g, null, 4);
//    CheckNativeError(UnitGroupCount(g2, c_unitCountAll) == 4, "UnitGroupFilter");
//    
//    // UnitGroupCopy
//    g2 = UnitGroupCopy(g);
//    CheckNativeError(UnitGroupCount(g2, c_unitCountAll) == UnitGroupCount(g, c_unitCountAll), "UnitGroupCopy");
//    
//    // UnitGroupHasUnit
//    u = UnitGroupUnit(g, 2);
//    CheckNativeError(UnitGroupHasUnit(g2, u), "UnitGroupHasUnit");
//    
//    // UnitGroupClear
//    UnitGroupClear(g2);
//    CheckNativeError(UnitGroupCount(g2, c_unitCountAll) == 0, "UnitGroupClear");
//}
//
////--------------------------------------------------------------------------------------------------
//bool TestDisplayText (bool a, bool c) {
//    DisplayText(PlayerGroupSingle(1), 2, StringToText("Test message from player 2"));
//    return true;
//}
//
//bool TestClearText (bool a, bool c) {
//    int i = 0;
//    while (i < 10) {
//        DisplayText(PlayerGroupSingle(1), c_playerAny, StringToText("Spam Message #" + IntToString(i + 1)));
//        i = i + 1;
//    }
//    
//    i = 5;
//    while (i > 0) {
//        DisplayText(PlayerGroupSingle(1), c_playerAny, StringToText("Clearing in " + IntToString(i) + " seconds"));
//        i = i - 1;
//        Wait(1, false);
//    }
//    
//    ClearText(PlayerGroupSingle(1));
//    return true;
//}
//
//bool TestGameOver (bool a, bool c) {
//    GameOver(1, c_gameOverVictory, true, true);
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestGame () {
//    trigger t;
//
//    // DisplayText
//    t = TriggerCreate("TestDisplayText");
//    TriggerAddEventTimeElapsed(t, 0.01, c_timeReal);
//    
//    // ClearText
//    t = TriggerCreate("TestClearText");
//    TriggerAddEventChatMessage(t, 1, "spam", true);
//    
//    // GameOver
//    t = TriggerCreate("TestGameOver");
//    TriggerAddEventChatMessage(t, 1, "testgameover", true);
//}
//
////--------------------------------------------------------------------------------------------------
//bool TestMinimapPing (bool a, bool c) {
//    MinimapPing(
//        PlayerGroupSingle(1),
//        Point(RandomFixed(0, 128), RandomFixed(0, 128)),
//        2,
//        Color(RandomFixed(0, 100), RandomFixed(0, 100), RandomFixed(0, 100))
//    );
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestMinimap() {
//    trigger t;
//    
//    // MinimapPing
//    t = TriggerCreate("TestMinimapPing");
//    TriggerAddEventChatMessage(t, 1, "testping", true);
//}

//--------------------------------------------------------------------------------------------------
bool TestActorTrigger (bool a, bool c) {
    unit marine;
    unit mercHaven;
    actorscope as;
    actorscope as2;
    actorscope as3;
    actorscope as4;
    actorscope as5;
    actorscope as6;
    actorscope as7;
    actor act;
    actor act2;
    actor act3;
    text ot;

//    ot = ActorScopeGetText(as);
//    if (ot == null) {
//        OutputText(c_outputError, StringToText("null"));
//    }
//    else {
//        OutputText(c_outputError, ot);
//    }

//    ot = ActorGetText(act);
//    if (ot == null) {
//        OutputText(c_outputError, StringToText("null"));
//    }
//    else {
//        OutputText(c_outputError, ot);
//    }

//    act = ActorFromScope(as, "Splax");
//    act = ActorFromScope(as, "_Unit");
//    ActorSend(act, "SetTintColor 0,255,0");
//    ActorCreate(as, "ModelHosted", "Hydralisk", "");

//    UnitCreate(1, "BlackMarket", c_unitCreateAlive, 1, Point(60, 60), 0);
//    mercHaven = UnitLastCreated();
//    as = ActorScopeFromUnit(mercHaven);

//    act = ActorFromScope(as, "_Unit");
//    as2 = ActorScopeFromActor(act);
//    ActorSend(act, "SetTintColor 0,255,0");

//    act = ActorCreate(null, "Model", "Hydralisk", "");
//    ActorSend(act, "SetBearingsH 64,64,0");
//    as2 = ActorScopeFromActor(act);
//    ActorScopeOrphan(as2);

// Tests ::LastCreated.
//    UnitCreate(1, "BlackMarket", c_unitCreateAlive, 1, Point(60, 60), 0);
//    mercHaven = UnitLastCreated();
//    as = ActorScopeFromUnit(mercHaven);
//    act = ActorFromScope(as, "MercHavenChick");
//    act = ActorFromActor(act, "::Host");
//    act = ActorFromActor(act, "::Host");
//    ActorSend(act, "SetTintColor 0,255,0");
//    act = ActorCreate(as, "Model", "Hydralisk", "");
//    ActorSend(act, "SetBearingsH 64,64 0");
//    act = ActorFrom("::LastCreated");
//    ActorSend(act, "SetBearingsH 64,64 2");

//    act = ActorCreate(null, "Model", "Hydralisk", "");
//    as = ActorScopeFrom("::LastCreated");
//    ActorSend(act, "SetBearingsH 64,64 0");
//    ActorScopeSend(as, "SetTintColor 0,255,0");

//    UnitCreate(1, "BlackMarket", c_unitCreateAlive, 1, Point(60, 60), 0);
//    mercHaven = UnitLastCreated();
//    as = ActorScopeFromUnit(mercHaven);
//    ot = ActorScopeGetText(as);
//    OutputText(c_outputError, ot);
//    act = ActorFromScope(as, "MercHavenChick");
//    act = ActorFromActor(act, "::Host");
//    ActorSendTo(act, "::Host", "SetTintColor 0,255,0");
//    act = ActorCreate(as, "Model", "Hydralisk", "");
//    ActorSend(act, "SetBearingsH 64,64 0");
//    act = ActorFrom("::LastCreated");
//    ot = ActorGetText(act);
//    OutputText(c_outputError, ot);
//    ActorSend(act, "SetBearingsH 64,64 2");
//    act = ActorFromScope(as, "Monster");
//    ot = ActorGetText(act);
//    OutputText(c_outputError, ot);

//    act = ActorCreate(null, "Model", "Hydralisk", "");
//    as = ActorScopeFrom("::LastCreated");
//    ActorSend(act, "SetBearingsH 64,64 0");
//    ActorScopeSend(as, "SetTintColor 0,255,255");

//    act = ActorCreate(null, "List", "", "", "");
//    as = ActorScopeFrom("::LastCreated");

//    act2 = ActorCreate(as, "Model", "Pylon", "", "");
//    ActorRefSet(act, "::ContentsAdd", act2);

//    act2 = ActorCreate(as, "Model", "Baneling", "", "");
//    ActorRefSet(act, "::ContentsAdd", act2);

//    act2 = ActorCreate(as, "Model", "Colossus", "", "");
//    ActorSend(act, "ListAdd ::LastCreated");

//    ActorSendTo(act, "::Contents", "SetBearingsH 75,50 0");
//    ActorSendTo(act, "::Contents", "SetTintColor 0,255,0");

    act = ActorCreate(null, "Model", "Hydralisk", "", "");
    ActorSend(act, "SetBearingsH 64,64 2");
    ActorRefSet(null, "::global.Launch", act);

    act2 = ActorCreate(null, "Model", "Hydralisk", "", "");
    ActorSend(act2, "SetBearingsH 68,64 2");
    ActorRefSet(null, "::global.Impact", act2);

    act3 = ActorCreate(null, "Beam", "ColossusAttackBeam", "::global.Launch", "::global.Impact");

    act = ActorRefGet(null, "::global.Impact");
    ot = ActorGetText(act);
    OutputText(c_outputError, ot);

    act2 = ActorRefGet(null, "::global.Launch");
    ot = ActorGetText(act2);
    OutputText(c_outputError, ot);

    act3 = ActorRefGet(act3, "::HostLaunch");
    ot = ActorGetText(act3);
    OutputText(c_outputError, ot);

    return true;
}

//--------------------------------------------------------------------------------------------------
void TestActors () {
    trigger t;
    t = TriggerCreate("TestActorTrigger");
    TriggerAddEventTimeElapsed(t, 2.0, c_timeReal);
}

////--------------------------------------------------------------------------------------------------
//bool TestAnimsTrigger (bool a, bool c) {
//    unit marine;
//    string out;
//
//    UnitCreate(1, "Mari", c_unitCreateAlive, 1, Point(57, 115), 0);
//    marine = UnitLastCreated();
//
//    // Basic set.
//    Output(c_outputAnim, "Play 'Walk'.");
//    AnimPlay(marine, "Walk", 0, c_animBlendTimeDefault);
//    Wait(0.667, false);
//    
//    // Multi-prop set.
//    Output(c_outputAnim, "Play 'Stand Right'.");
//    AnimPlay(marine, "Stand Right", 0, c_animBlendTimeDefault);
//    Wait(0.333, false);
//
//    // Basic play.
//    Output(c_outputAnim, "Play 'Attack'.");
//    AnimPlay(marine, "Attack", 0, c_animBlendTimeDefault);
//    Wait(1.000, false);
//
//    // Multi-prop play.
//    Output(c_outputAnim, "Play 'Silentkill'.");
//    AnimPlay(marine, "Death Silentkill", 0, c_animBlendTimeDefault);
//    Wait(2.000, false);
//    
//    // Playing with flags.
//
//// $PCG; Rarities are currently commented out in the toolchain.
//    Output(c_outputAnim, "Play most frequent 'Walk' forever (but cut out at 5 loops).");
//    AnimPlay(marine, "Walk", c_animFlagPlayForever, c_animBlendTimeDefault);
//    Wait(0.667 * 5, false);
//
//    // Using props.
//    Output(c_outputAnim, "Playing 'Walk' using flags to override 'Left' prop.");
//    AnimEnableProps(marine, "Left", true);
//    AnimPlay(marine, "Walk", c_animFlagIgnoreProps, c_animBlendTimeDefault);
//    AnimEnableProps(marine, "Left", false);
//    Wait(0.333, false);
//    
//    // Checking prop stats and clearing props.
//    Output(c_outputAnim, "Adding prop 'Left'.");
//    AnimEnableProps(marine, "Left", true);
//
//    Output(c_outputAnim, "Clearing prop 'Left'.");
//    AnimClearProps(marine);
//
//    // Time scale test.
//    Output(c_outputAnim, "Play 'Walk' and set time scale to 5.3.");
//    AnimPlay(marine, "Walk", 0, c_animBlendTimeDefault);
//    AnimSetTimeScale(marine, 0, 5.3);
//
//    // Time routines.
//    Output(c_outputAnim, "Play 'Attack' and set duration to 4.5.");
//    AnimPlay(marine, "Attack", 0, c_animBlendTimeDefault);
//    AnimSetDuration(marine, 0, 4.5);
//
//    Output(c_outputAnim, "Play 'Attack' and set time to 0.25.");
//    AnimPlay(marine, "Attack", 0, c_animBlendTimeDefault);
//    AnimSetTime(marine, 0.25, false);
//    Wait(0.1, false);
//
//    Output(c_outputAnim, "Play 'Walk' and set time scale to 2.0");
//    AnimPlay(marine, "Walk", 0, c_animBlendTimeDefault);
//    AnimSetDuration(marine, 0, 2.0);
//    AnimSetTime(marine, 1.0, true);
//    Wait(0.1, false);
//
//    Output(c_outputAnim, "Play 'Attack' and pause at 0.3");
//    AnimPlay(marine, "Attack", 0, c_animBlendTimeDefault);
//    AnimSetPauseTime(marine, 0.3);
//
//    Output(c_outputAnim, "Clear pause time.");
//    AnimClearPauseTime(marine);
//
//    return true;
//}
//
////--------------------------------------------------------------------------------------------------
//void TestAnims () {
//    trigger t;
//    t = TriggerCreate("TestAnimsTrigger");
//    TriggerAddEventTimeElapsed(t, 2.0, c_timeReal);
//}
//
////--------------------------------------------------------------------------------------------------
//region g_revealRegion = null;
//revealer g_revealer = null;
//int g_revealCounter = 0;
//
//bool TestVisTrigger (bool a, bool c) {
//    //if (g_revealer == null) {
//    //    return false;
//    //}
//        
//    // VisRevealerEnable
//    VisRevealerEnable(g_revealer, g_revealCounter < 4 || g_revealCounter > 6);
//    
//    // VisRevealerUpdate
//    RegionSetOffset(g_revealRegion, Point(g_revealCounter, g_revealCounter));
//    VisRevealerUpdate(g_revealer);
//    
//    // VisRevealerDestroy
//    if (g_revealCounter > 20) {
//        VisRevealerDestroy(g_revealer);
//        g_revealer = null;
//    }
//    
//    g_revealCounter = g_revealCounter + 1;
//    return true;
//}
//
//bool TestExploreArea (bool a, bool c) {
//    VisExploreArea(1, RegionRect(4, 108, 20, 124), true);
//    VisExploreArea(1, RegionCircle(Point(12, 116), 4), false);
//    return true;
//}
//
//void TestVisibility () {
//    revealer r;
//    trigger t;
//    
//    // VisExploreArea (can't be done during map init)
//    t = TriggerCreate("TestExploreArea");
//    TriggerAddEventTimeElapsed(t, 1, c_timeReal);
//    
//    // VisRevealArea
//    VisRevealArea(1, RegionRect(4, 4, 12, 12), 10);
//    
//    // VisRevealerCreate
//    g_revealRegion = RegionCircle(Point(64, 12), 8);
//    g_revealer = VisRevealerCreate(1, g_revealRegion);
//    
//    // VisRevealerLastCreated
//    r = VisRevealerLastCreated();
//    CheckNativeError(r == g_revealer, "VisRevealerLastCreated");
//    
//    t = TriggerCreate("TestVisTrigger");
//    TriggerAddEventTimePeriodic(t, 1, c_timeGame);
//}
//
////--------------------------------------------------------------------------------------------------
//bool TestSoundTrigger (bool c, bool a) {
//    sound s;
//    
//    // SoundPlay
//    SoundPlay(SoundInfo("CalldownLaunch", c_soundIndexAny, null, 100));
//    
//    // SoundCreate
//    s = SoundCreate(
//        SoundInfo3d(
//            "ScoreVictoryMusicZerg",
//            c_soundIndexAny,
//            PlayerGroupSingle(1),
//            20,
//            Point(16, 16),
//            0
//        )
//    );
//    
//    // SoundLastCreated
//    CheckNativeError(SoundLastCreated() == s, "SoundLastCreated");
//    
//    // SoundStart
//    SoundStart(s, c_soundIndexAny);
//    
//    // SoundSetVolume
//    // SoundSetPosition
//    Wait(2, false);
//    SoundSetVolume(s, 40);
//    SoundSetPosition(s, Point(16, 112), 0);
//    
//    Wait(2, false);
//    SoundSetVolume(s, 60);
//    SoundSetPosition(s, Point(112, 112), 0);
//    
//    Wait(2, false);
//    SoundSetVolume(s, 80);
//    SoundSetPosition(s, Point(112, 16), 0);
//    
//    Wait(2, false);
//    SoundSetVolume(s, 100);
//    SoundSetPosition(s, Point(16, 16), 0);
//    
//    // SoundStop
//    Wait(2, false);
//    SoundStop(s, false);
//    
//    // SoundDestroy
//    SoundDestroy(s);
//    return true;
//}
//
//void TestSound () {
//    trigger t;
//    t = TriggerCreate("TestSoundTrigger");
//    TriggerAddEventChatMessage(t, 1, "testsound", true);
//}
//
////--------------------------------------------------------------------------------------------------
//bool TestMusicTrigger (bool c, bool a) {
//    // SoundMusicPlay
//    SoundMusicPlay(c_musicTypeNormal, "ScoreVictoryMusicTerr", c_soundIndexAny, true);
//    
//    // SoundMusicSetVolume
//    Wait(2, false);
//    SoundMusicSetVolume(c_musicTypeNormal, 50);
//    
//    Wait(2, false);
//    SoundMusicSetVolume(c_musicTypeNormal, 100);
//    
//    // SoundMusicStop
//    Wait(2, false);
//    SoundMusicStop(c_musicTypeNormal, true);
//    return true;
//}
//
//void TestMusic () {
//    trigger t;
//    t = TriggerCreate("TestMusicTrigger");
//    TriggerAddEventChatMessage(t, 1, "testmusic", true);
//}
//
////--------------------------------------------------------------------------------------------------
//bool TestCameraTrigger (bool c, bool a) {
//    camerainfo cam;
//    fixed val;
//    point p;
//    
//    // CameraInfoDefault
//    cam = CameraInfoDefault();
//    val = CameraInfoGetValue(cam, c_cameraValueFarClip);
//    CheckNativeError(ApproxEqual(val, 160), "CameraInfoDefault");
//    
//    // CameraInfoSetValue
//    CameraInfoSetValue(cam, c_cameraValueDistance, 75);
//    val = CameraInfoGetValue(cam, c_cameraValueDistance);
//    CheckNativeError(ApproxEqual(val, 75), "CameraInfoSetValue");
//    
//    // CameraInfoSetTarget
//    CameraInfoSetTarget(cam, Point(64, 110));
//    p = CameraInfoGetTarget(cam);
//    CheckNativeError(p == Point(64, 110), "CameraInfoSetTarget");
//    
//    // CameraApplyInfo
//    CameraApplyInfo(1, cam, 6, true);
//    Wait(6, false);
//    
//    // CameraPan
//    CameraPan(1, Point(96, 110), 3, false);
//    Wait(3, false);
//    
//    // CameraSetValue
//    CameraSetValue(1, c_cameraValueRoll, 180, 4);
//    Wait(4, false);
//    
//    // Reset to default camera
//    Wait(2, false);
//    CameraApplyInfo(1, CameraInfoDefault(), 0, false);
//    return true;
//}
//
//bool TestCameraLock (bool c, bool a) {
//    CameraLock(1, true);
//    return true;
//}
//
//bool TestCameraUnlock (bool c, bool a) {
//    CameraLock(1, false);
//    return true;
//}
//
//bool TestCameraSave (bool c, bool a) {
//    CameraSave(1);
//    return true;
//}
//
//bool TestCameraRestore (bool c, bool a) {
//    CameraRestore(1, 1);
//    return true;
//}
//
//void TestCamera () {
//    trigger t;
//    t = TriggerCreate("TestCameraTrigger");
//    TriggerAddEventChatMessage(t, 1, "camtest", true);
//    
//    t = TriggerCreate("TestCameraLock");
//    TriggerAddEventChatMessage(t, 1, "camlock", true);
//    
//    t = TriggerCreate("TestCameraUnlock");
//    TriggerAddEventChatMessage(t, 1, "camunlock", true);
//
//    t = TriggerCreate("TestCameraSave");
//    TriggerAddEventChatMessage(t, 1, "camsave", true);
//
//    t = TriggerCreate("TestCameraRestore");
//    TriggerAddEventChatMessage(t, 1, "camrestore", true);
//}
//
////--------------------------------------------------------------------------------------------------
//bool TriggerQueue1 (bool c, bool a) {
//    TriggerQueueEnter();
//    Output(c_outputInfo, "TriggerQueue1");
//    Wait(1, false);
//    TriggerQueueExit();
//    return true;
//}
//
//bool TriggerQueue2 (bool c, bool a) {
//    TriggerQueueEnter();
//    Output(c_outputInfo, "TriggerQueue2");
//    Wait(2, false);
//    TriggerQueueExit();
//    return true;
//}
//
//bool TriggerQueue3 (bool c, bool a) {
//    TriggerQueueEnter();
//    Output(c_outputInfo, "TriggerQueue3");
//    Wait(3, false);
//    g_testTriggerQueue = true;
//    TriggerQueueExit();
//    return true;
//}
//
//bool TestTriggerQueuePause (bool c, bool a) {
//    TriggerQueuePause(true);
//    return true;
//}
//
//bool TestTriggerQueueResume (bool c, bool a) {
//    TriggerQueuePause(false);
//    return true;
//}
//
//void TestTriggerQueue () {
//    trigger t;
//
//    t = TriggerCreate("TestTriggerQueuePause");
//    TriggerAddEventChatMessage(t, 1, "qpause", true);
//
//    t = TriggerCreate("TestTriggerQueueResume");
//    TriggerAddEventChatMessage(t, 1, "qresume", true);
//
//    TriggerExecute(TriggerCreate("TriggerQueue1"), true, false);
//    TriggerExecute(TriggerCreate("TriggerQueue2"), true, false);
//    TriggerExecute(TriggerCreate("TriggerQueue3"), true, false);
//}

//--------------------------------------------------------------------------------------------------
void TestAll () {
    //TestVariables();
    //TestConversions();
    //TestStrings();
    //TestMath();
    //TestPoints();
    //TestRegions();
    //TestTimers();
    //TestPlayers();
    //TestPlayerGroups();
    //TestOrders();
    //TestUnits();
    //TestUnitFilters();
    //TestUnitGroups();
    //TestGame();
    //TestMinimap();

    TestActors();

    //TestAnims();
    //TestVisibility();
    //TestSound();
    //TestMusic();
    //TestCamera();
    //TestTriggerQueue();
}

//--------------------------------------------------------------------------------------------------
bool OnGameInit (bool c, bool a) {
    CameraPan(1, Point(64, 64), 0, false);
    TestAll();
    return true;
}

//--------------------------------------------------------------------------------------------------
void TestNatives () {
    trigger t;

//    TriggerDebugWindowOpen(true);
    OutputInit();
    MeleeInitResourcesForPlayer(1, "Terr");
    MeleeInitUnitsForPlayer(1, "Terr", PlayerStartLocation(1));
    
    t = TriggerCreate("OnGameInit");
    TriggerAddEventMapInit(t);

    //CheckTestEvents();
}


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Texture.galaxy generated from Texture.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTexture
const int c_classIdCTexture = 0;
const string c_classIdCTextureName = "CTexture";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Tile.galaxy generated from Tile.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTile
const int c_classIdCTile = 0;
const string c_classIdCTileName = "CTile";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Turret.galaxy generated from Turret.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCTurret
const int c_classIdCTurret = 0;
const string c_classIdCTurretName = "CTurret";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Unit.galaxy generated from Unit.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCUnit
const int c_classIdCUnit = 0;
const string c_classIdCUnitName = "CUnit";

//  EUnitFlag
const int c_unitFlagBounce = 0;
const int c_unitFlagTurnable = 1;
const int c_unitFlagMovable = 2;
const int c_unitFlagWorker = 3;
const int c_unitFlagCreateVisible = 4;
const int c_unitFlagUnclickable = 5;
const int c_unitFlagUncommandable = 6;
const int c_unitFlagUnhighlightable = 7;
const int c_unitFlagUntooltipable = 8;
const int c_unitFlagUnselectable = 9;
const int c_unitFlagUntargetable = 10;
const int c_unitFlagUncursorable = 11;
const int c_unitFlagHero = 12;
const int c_unitFlagIndividualSubgroups = 13;
const int c_unitFlagNoDraw = 14;
const int c_unitFlagPreventReveal = 15;
const int c_unitFlagPreventDefeat = 16;
const int c_unitFlagPreventDestroy = 17;
const int c_unitFlagPenaltyRevealed = 18;
const int c_unitFlagUncloakable = 19;
const int c_unitFlagMissile = 20;
const int c_unitFlagUndetectable = 21;
const int c_unitFlagUnradarable = 22;
const int c_unitFlagUseLineOfSight = 23;
const int c_unitFlagKillCredit = 24;
const int c_unitFlagTownAlert = 25;
const int c_unitFlagInvulnerable = 26;
const int c_unitFlagDestructible = 27;
const int c_unitFlagCloaked = 28;
const int c_unitFlagBuried = 29;
const int c_unitFlagNoScore = 30;
const int c_unitFlagIgnoreTerrainZInit = 31;
const int c_unitFlagTurnBeforeMove = 32;
const int c_unitFlagAlwaysThreatens = 33;
const int c_unitFlagNoDeathEvent = 34;
const int c_unitFlagNoPortraitTalk = 35;
const int c_unitFlagTownCamera = 36;
const int c_unitFlagAIThreatGround = 37;
const int c_unitFlagAIThreatAir = 38;
const int c_unitFlagAILifetime = 39;
const int c_unitFlagAISplash = 40;
const int c_unitFlagAIHighPrioTarget = 41;
const int c_unitFlagAIDefense = 42;
const int c_unitFlagAICaster = 43;
const int c_unitFlagAISupport = 44;
const int c_unitFlagShowResources = 45;
const int c_unitFlagArmorDisabledWhileConstructing = 46;
const int c_unitFlagPawnable = 47;
const int c_unitFlagAIFleeDamageDisabled = 48;
const int c_unitFlagAIPressForwardDisabled = 49;
const int c_unitFlagAIObservatory = 50;
const int c_unitFlagForceCollisionCheck = 51;
const string c_unitFlagBounceName = "Bounce";
const string c_unitFlagTurnableName = "Turnable";
const string c_unitFlagMovableName = "Movable";
const string c_unitFlagWorkerName = "Worker";
const string c_unitFlagCreateVisibleName = "CreateVisible";
const string c_unitFlagUnclickableName = "Unclickable";
const string c_unitFlagUncommandableName = "Uncommandable";
const string c_unitFlagUnhighlightableName = "Unhighlightable";
const string c_unitFlagUntooltipableName = "Untooltipable";
const string c_unitFlagUnselectableName = "Unselectable";
const string c_unitFlagUntargetableName = "Untargetable";
const string c_unitFlagUncursorableName = "Uncursorable";
const string c_unitFlagHeroName = "Hero";
const string c_unitFlagIndividualSubgroupsName = "IndividualSubgroups";
const string c_unitFlagNoDrawName = "NoDraw";
const string c_unitFlagPreventRevealName = "PreventReveal";
const string c_unitFlagPreventDefeatName = "PreventDefeat";
const string c_unitFlagPreventDestroyName = "PreventDestroy";
const string c_unitFlagPenaltyRevealedName = "PenaltyRevealed";
const string c_unitFlagUncloakableName = "Uncloakable";
const string c_unitFlagMissileName = "Missile";
const string c_unitFlagUndetectableName = "Undetectable";
const string c_unitFlagUnradarableName = "Unradarable";
const string c_unitFlagUseLineOfSightName = "UseLineOfSight";
const string c_unitFlagKillCreditName = "KillCredit";
const string c_unitFlagTownAlertName = "TownAlert";
const string c_unitFlagInvulnerableName = "Invulnerable";
const string c_unitFlagDestructibleName = "Destructible";
const string c_unitFlagCloakedName = "Cloaked";
const string c_unitFlagBuriedName = "Buried";
const string c_unitFlagNoScoreName = "NoScore";
const string c_unitFlagIgnoreTerrainZInitName = "IgnoreTerrainZInit";
const string c_unitFlagTurnBeforeMoveName = "TurnBeforeMove";
const string c_unitFlagAlwaysThreatensName = "AlwaysThreatens";
const string c_unitFlagNoDeathEventName = "NoDeathEvent";
const string c_unitFlagNoPortraitTalkName = "NoPortraitTalk";
const string c_unitFlagTownCameraName = "TownCamera";
const string c_unitFlagAIThreatGroundName = "AIThreatGround";
const string c_unitFlagAIThreatAirName = "AIThreatAir";
const string c_unitFlagAILifetimeName = "AILifetime";
const string c_unitFlagAISplashName = "AISplash";
const string c_unitFlagAIHighPrioTargetName = "AIHighPrioTarget";
const string c_unitFlagAIDefenseName = "AIDefense";
const string c_unitFlagAICasterName = "AICaster";
const string c_unitFlagAISupportName = "AISupport";
const string c_unitFlagShowResourcesName = "ShowResources";
const string c_unitFlagArmorDisabledWhileConstructingName = "ArmorDisabledWhileConstructing";
const string c_unitFlagPawnableName = "Pawnable";
const string c_unitFlagAIFleeDamageDisabledName = "AIFleeDamageDisabled";
const string c_unitFlagAIPressForwardDisabledName = "AIPressForwardDisabled";
const string c_unitFlagAIObservatoryName = "AIObservatory";
const string c_unitFlagForceCollisionCheckName = "ForceCollisionCheck";

//  EUnitAttribute
const int c_unitAttributeLight = 0;
const int c_unitAttributeArmored = 1;
const int c_unitAttributeBiological = 2;
const int c_unitAttributeMechanical = 3;
const int c_unitAttributeRobotic = 4;
const int c_unitAttributePsionic = 5;
const int c_unitAttributeMassive = 6;
const int c_unitAttributeStructure = 7;
const int c_unitAttributeHover = 8;
const int c_unitAttributeHeroic = 9;
const string c_unitAttributeLightName = "Light";
const string c_unitAttributeArmoredName = "Armored";
const string c_unitAttributeBiologicalName = "Biological";
const string c_unitAttributeMechanicalName = "Mechanical";
const string c_unitAttributeRoboticName = "Robotic";
const string c_unitAttributePsionicName = "Psionic";
const string c_unitAttributeMassiveName = "Massive";
const string c_unitAttributeStructureName = "Structure";
const string c_unitAttributeHoverName = "Hover";
const string c_unitAttributeHeroicName = "Heroic";

//  ECmdFlags
const int c_cmdAlternate = 0;
const int c_cmdQueued = 1;
const int c_cmdPreempt = 2;
const int c_cmdSmartClick = 3;
const int c_cmdSmartRally = 4;
const int c_cmdSubgroup = 5;
const int c_cmdSetAutoCast = 6;
const int c_cmdSetAutoCastOn = 7;
const string c_cmdAlternateName = "Alternate";
const string c_cmdQueuedName = "Queued";
const string c_cmdPreemptName = "Preempt";
const string c_cmdSmartClickName = "SmartClick";
const string c_cmdSmartRallyName = "SmartRally";
const string c_cmdSubgroupName = "Subgroup";
const string c_cmdSetAutoCastName = "SetAutoCast";
const string c_cmdSetAutoCastOnName = "SetAutoCastOn";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Upgrade.galaxy generated from Upgrade.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCUpgrade
const int c_classIdCUpgrade = 0;
const string c_classIdCUpgradeName = "CUpgrade";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Validator.galaxy generated from Validator.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCValidator
const int c_classIdCValidator = 0;
const int c_classIdCValidatorCombine = 1;
const int c_classIdCValidatorCondition = 2;
const int c_classIdCValidatorFunction = 3;
const int c_classIdCValidatorGameCompareTimeOfDay = 4;
const int c_classIdCValidatorGameCompareTerrain = 5;
const int c_classIdCValidatorLocation = 6;
const int c_classIdCValidatorLocationCompareCliffLevel = 7;
const int c_classIdCValidatorLocationComparePower = 8;
const int c_classIdCValidatorLocationCompareRange = 9;
const int c_classIdCValidatorLocationArc = 10;
const int c_classIdCValidatorLocationCreep = 11;
const int c_classIdCValidatorLocationEnumArea = 12;
const int c_classIdCValidatorLocationPathable = 13;
const int c_classIdCValidatorLocationPlacement = 14;
const int c_classIdCValidatorLocationType = 15;
const int c_classIdCValidatorLocationVision = 16;
const int c_classIdCValidatorPlayer = 17;
const int c_classIdCValidatorPlayerAlliance = 18;
const int c_classIdCValidatorPlayerRequirement = 19;
const int c_classIdCValidatorPlayerCompare = 20;
const int c_classIdCValidatorPlayerCompareDifficulty = 21;
const int c_classIdCValidatorPlayerCompareFoodAvailable = 22;
const int c_classIdCValidatorPlayerCompareFoodMade = 23;
const int c_classIdCValidatorPlayerCompareFoodUsed = 24;
const int c_classIdCValidatorPlayerCompareRace = 25;
const int c_classIdCValidatorPlayerCompareResource = 26;
const int c_classIdCValidatorPlayerCompareResult = 27;
const int c_classIdCValidatorPlayerCompareType = 28;
const int c_classIdCValidatorUnit = 29;
const int c_classIdCValidatorUnitAI = 30;
const int c_classIdCValidatorUnitCombatAI = 31;
const int c_classIdCValidatorUnitWeaponPlane = 32;
const int c_classIdCValidatorUnitAbil = 33;
const int c_classIdCValidatorUnitBehaviorState = 34;
const int c_classIdCValidatorUnitDetected = 35;
const int c_classIdCValidatorUnitFilters = 36;
const int c_classIdCValidatorUnitMissileNullified = 37;
const int c_classIdCValidatorUnitMover = 38;
const int c_classIdCValidatorUnitOrder = 39;
const int c_classIdCValidatorUnitOrderQueue = 40;
const int c_classIdCValidatorUnitOrderTargetPathable = 41;
const int c_classIdCValidatorUnitOrderTargetType = 42;
const int c_classIdCValidatorUnitPathing = 43;
const int c_classIdCValidatorUnitScanning = 44;
const int c_classIdCValidatorUnitType = 45;
const int c_classIdCValidatorUnitWeaponAnimating = 46;
const int c_classIdCValidatorUnitWeaponFiring = 47;
const int c_classIdCValidatorUnitCompare = 48;
const int c_classIdCValidatorUnitCompareAIAreaEvalRatio = 49;
const int c_classIdCValidatorUnitCompareAttackPriority = 50;
const int c_classIdCValidatorUnitCompareBehaviorCount = 51;
const int c_classIdCValidatorUnitCompareCargo = 52;
const int c_classIdCValidatorUnitCompareDamageTakenTime = 53;
const int c_classIdCValidatorUnitCompareDeath = 54;
const int c_classIdCValidatorUnitCompareDetectRange = 55;
const int c_classIdCValidatorUnitCompareField = 56;
const int c_classIdCValidatorUnitCompareMarkerCount = 57;
const int c_classIdCValidatorUnitCompareMoverPhase = 58;
const int c_classIdCValidatorUnitCompareOrderCount = 59;
const int c_classIdCValidatorUnitCompareOrderTargetRange = 60;
const int c_classIdCValidatorUnitComparePowerSourceLevel = 61;
const int c_classIdCValidatorUnitComparePowerUserLevel = 62;
const int c_classIdCValidatorUnitCompareRallyPointCount = 63;
const int c_classIdCValidatorUnitCompareResourceContents = 64;
const int c_classIdCValidatorUnitCompareResourceHarvesters = 65;
const int c_classIdCValidatorUnitCompareSpeed = 66;
const int c_classIdCValidatorUnitCompareVeterancyLevel = 67;
const int c_classIdCValidatorUnitCompareVital = 68;
const int c_classIdCValidatorUnitCompareVitality = 69;
const string c_classIdCValidatorName = "CValidator";
const string c_classIdCValidatorCombineName = "CValidatorCombine";
const string c_classIdCValidatorConditionName = "CValidatorCondition";
const string c_classIdCValidatorFunctionName = "CValidatorFunction";
const string c_classIdCValidatorGameCompareTimeOfDayName = "CValidatorGameCompareTimeOfDay";
const string c_classIdCValidatorGameCompareTerrainName = "CValidatorGameCompareTerrain";
const string c_classIdCValidatorLocationName = "CValidatorLocation";
const string c_classIdCValidatorLocationCompareCliffLevelName = "CValidatorLocationCompareCliffLevel";
const string c_classIdCValidatorLocationComparePowerName = "CValidatorLocationComparePower";
const string c_classIdCValidatorLocationCompareRangeName = "CValidatorLocationCompareRange";
const string c_classIdCValidatorLocationArcName = "CValidatorLocationArc";
const string c_classIdCValidatorLocationCreepName = "CValidatorLocationCreep";
const string c_classIdCValidatorLocationEnumAreaName = "CValidatorLocationEnumArea";
const string c_classIdCValidatorLocationPathableName = "CValidatorLocationPathable";
const string c_classIdCValidatorLocationPlacementName = "CValidatorLocationPlacement";
const string c_classIdCValidatorLocationTypeName = "CValidatorLocationType";
const string c_classIdCValidatorLocationVisionName = "CValidatorLocationVision";
const string c_classIdCValidatorPlayerName = "CValidatorPlayer";
const string c_classIdCValidatorPlayerAllianceName = "CValidatorPlayerAlliance";
const string c_classIdCValidatorPlayerRequirementName = "CValidatorPlayerRequirement";
const string c_classIdCValidatorPlayerCompareName = "CValidatorPlayerCompare";
const string c_classIdCValidatorPlayerCompareDifficultyName = "CValidatorPlayerCompareDifficulty";
const string c_classIdCValidatorPlayerCompareFoodAvailableName = "CValidatorPlayerCompareFoodAvailable";
const string c_classIdCValidatorPlayerCompareFoodMadeName = "CValidatorPlayerCompareFoodMade";
const string c_classIdCValidatorPlayerCompareFoodUsedName = "CValidatorPlayerCompareFoodUsed";
const string c_classIdCValidatorPlayerCompareRaceName = "CValidatorPlayerCompareRace";
const string c_classIdCValidatorPlayerCompareResourceName = "CValidatorPlayerCompareResource";
const string c_classIdCValidatorPlayerCompareResultName = "CValidatorPlayerCompareResult";
const string c_classIdCValidatorPlayerCompareTypeName = "CValidatorPlayerCompareType";
const string c_classIdCValidatorUnitName = "CValidatorUnit";
const string c_classIdCValidatorUnitAIName = "CValidatorUnitAI";
const string c_classIdCValidatorUnitCombatAIName = "CValidatorUnitCombatAI";
const string c_classIdCValidatorUnitWeaponPlaneName = "CValidatorUnitWeaponPlane";
const string c_classIdCValidatorUnitAbilName = "CValidatorUnitAbil";
const string c_classIdCValidatorUnitBehaviorStateName = "CValidatorUnitBehaviorState";
const string c_classIdCValidatorUnitDetectedName = "CValidatorUnitDetected";
const string c_classIdCValidatorUnitFiltersName = "CValidatorUnitFilters";
const string c_classIdCValidatorUnitMissileNullifiedName = "CValidatorUnitMissileNullified";
const string c_classIdCValidatorUnitMoverName = "CValidatorUnitMover";
const string c_classIdCValidatorUnitOrderName = "CValidatorUnitOrder";
const string c_classIdCValidatorUnitOrderQueueName = "CValidatorUnitOrderQueue";
const string c_classIdCValidatorUnitOrderTargetPathableName = "CValidatorUnitOrderTargetPathable";
const string c_classIdCValidatorUnitOrderTargetTypeName = "CValidatorUnitOrderTargetType";
const string c_classIdCValidatorUnitPathingName = "CValidatorUnitPathing";
const string c_classIdCValidatorUnitScanningName = "CValidatorUnitScanning";
const string c_classIdCValidatorUnitTypeName = "CValidatorUnitType";
const string c_classIdCValidatorUnitWeaponAnimatingName = "CValidatorUnitWeaponAnimating";
const string c_classIdCValidatorUnitWeaponFiringName = "CValidatorUnitWeaponFiring";
const string c_classIdCValidatorUnitCompareName = "CValidatorUnitCompare";
const string c_classIdCValidatorUnitCompareAIAreaEvalRatioName = "CValidatorUnitCompareAIAreaEvalRatio";
const string c_classIdCValidatorUnitCompareAttackPriorityName = "CValidatorUnitCompareAttackPriority";
const string c_classIdCValidatorUnitCompareBehaviorCountName = "CValidatorUnitCompareBehaviorCount";
const string c_classIdCValidatorUnitCompareCargoName = "CValidatorUnitCompareCargo";
const string c_classIdCValidatorUnitCompareDamageTakenTimeName = "CValidatorUnitCompareDamageTakenTime";
const string c_classIdCValidatorUnitCompareDeathName = "CValidatorUnitCompareDeath";
const string c_classIdCValidatorUnitCompareDetectRangeName = "CValidatorUnitCompareDetectRange";
const string c_classIdCValidatorUnitCompareFieldName = "CValidatorUnitCompareField";
const string c_classIdCValidatorUnitCompareMarkerCountName = "CValidatorUnitCompareMarkerCount";
const string c_classIdCValidatorUnitCompareMoverPhaseName = "CValidatorUnitCompareMoverPhase";
const string c_classIdCValidatorUnitCompareOrderCountName = "CValidatorUnitCompareOrderCount";
const string c_classIdCValidatorUnitCompareOrderTargetRangeName = "CValidatorUnitCompareOrderTargetRange";
const string c_classIdCValidatorUnitComparePowerSourceLevelName = "CValidatorUnitComparePowerSourceLevel";
const string c_classIdCValidatorUnitComparePowerUserLevelName = "CValidatorUnitComparePowerUserLevel";
const string c_classIdCValidatorUnitCompareRallyPointCountName = "CValidatorUnitCompareRallyPointCount";
const string c_classIdCValidatorUnitCompareResourceContentsName = "CValidatorUnitCompareResourceContents";
const string c_classIdCValidatorUnitCompareResourceHarvestersName = "CValidatorUnitCompareResourceHarvesters";
const string c_classIdCValidatorUnitCompareSpeedName = "CValidatorUnitCompareSpeed";
const string c_classIdCValidatorUnitCompareVeterancyLevelName = "CValidatorUnitCompareVeterancyLevel";
const string c_classIdCValidatorUnitCompareVitalName = "CValidatorUnitCompareVital";
const string c_classIdCValidatorUnitCompareVitalityName = "CValidatorUnitCompareVitality";


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Water.galaxy generated from Water.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================


//GENERATED CODE====================================================================================
//  
//  Copyright Blizzard Entertainment 2003-2005
//  
//  Weapon.galaxy generated from Weapon.xml using GalaxyHeader.xtc
//  
//  !!! WARNING !!! This is generated code. Changes made here will be overwritten.
//  
//GENERATED CODE====================================================================================

//  EClassIdCWeapon
const int c_classIdCWeapon = 0;
const int c_classIdCWeaponLegacy = 1;
const int c_classIdCWeaponStrafe = 2;
const string c_classIdCWeaponName = "CWeapon";
const string c_classIdCWeaponLegacyName = "CWeaponLegacy";
const string c_classIdCWeaponStrafeName = "CWeaponStrafe";


