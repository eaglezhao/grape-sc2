"Name"     = 'Grape'
"Version"  = '1.0'

"Author"   = 'Theodor Storm Kristensen'
"About"    = 'Grape is a programming language for the Blizzard Entertainment game "StarCraft 2"'
           | 'It provides features such as object oriented programming, clean, readable syntax and more.'

"Case Sensitive"    = True
"Start Symbol"      = <Start>
"Virtual Terminals" = IndentInc IndentDec
!IndentInc = '->'
!IndentDec = '<-'

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{ID Head}      = {Letter} + [_]
{ID Tail}      = {AlphaNumeric} + [_]
{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["]
{Hex Digit}    = {Digit} + [abcdef] + [ABCDEF]
 
! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace     = {WS}+
NewLine        = {CR}{LF} | {CR} | {LF} Whitespace

! The following defines generic terminal rules

Identifier     = {ID Head} {ID Tail}*

DecimalLiteral = {Digit}+
HexLiteral     = '0' [xX] {Hex Digit}+
RealLiteral    = {Digit}* '.' {Digit}+

StringLiteral  = '"' {String Chars}* '"'

! -------------------------------------------------
! Comments
! -------------------------------------------------

Comment Line  = '//'
Comment Start = '/*'
Comment End   = '*/'

! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<NL> 
    ::= NewLine <NL> 
     |  NewLine

<NL Opt>
    ::= <NL>
     |

! <nl opt> removes blank lines before first statement

<Start>
    ::= <NL Opt> <Decl List>

<Decl List>
    ::= <Package> <Decl List>
     |  <Import> <Decl List>
     |  <Type Decl> <Decl List>
     |

! Shared rules

<Object>
    ::= this
     |  base

<Qualified ID>
    ::= Identifier '.' <Qualified ID>
     |  Identifier

! Generic literals

<Literal>
    ::= true
     |  false
     |  DecimalLiteral
     |  HexLiteral
     |  RealLiteral
     |  StringLiteral
     |  null

! Package/Import Clauses

<Package>
    ::= package <Qualified ID> <NL>

<Import>
    ::= import <Qualified ID> <NL>

! Types

<Type>
    ::= <Simple Type>
     |  <Array Type>

<Simple Type>
    ::= <Qualified ID>

<Array Type>
    ::= <Qualified ID> '[' ']'
     |  <Array Type> '[' ']'

! The following rules are type of expressions or statements

<Expression>
    ::= <Assignment Expression>
     |  <Or Exp>

<Assignment Expression>
    ::= <Member Access> '=' <Expression>

<Or Exp>
    ::= <Or Exp> '||' <And Exp>
     |  <And Exp>

<And Exp>
    ::= <And Exp> '&&' <Logical Or Exp>
     |  <Logical Or Exp>

<Logical Or Exp>
    ::= <Logical Or Exp> '|' <Logical Xor Exp>
     |  <Logical Xor Exp>

<Logical Xor Exp>
    ::= <Logical Xor Exp> '^' <Logical And Exp>
     |  <Logical And Exp>

<Logical And Exp>
    ::= <Logical And Exp> '&' <Equality Exp>
     |  <Equality Exp>

<Equality Exp>  
    ::= <Equality Exp> '==' <Compare Exp>
     |  <Equality Exp> '!=' <Compare Exp>
     |  <Compare Exp>

<Compare Exp>
    ::= <Compare Exp> '<'  <Shift Exp>
     |  <Compare Exp> '>'  <Shift Exp>
     |  <Compare Exp> '<=' <Shift Exp>
     |  <Compare Exp> '>=' <Shift Exp>
     |  <Shift Exp>

<Shift Exp>
    ::= <Shift Exp> '<<' <Add Exp>
     |  <Shift Exp> '>>' <Add Exp>
     |  <Add Exp>

<Add Exp>
    ::= <Add Exp> '+' <Mult Exp>
     |  <Add Exp> '-' <Mult Exp>
     |  <Mult Exp>

<Mult Exp>
    ::= <Mult Exp> '*' <Typecast Exp>
     |  <Mult Exp> '/' <Typecast Exp>
     |  <Mult Exp> '%' <Typecast Exp>
     |  <Typecast Exp>

<Typecast Exp>
    ::= <Typecast Exp> as <Type>
     |  <Unary Exp>

<Unary Exp>  
    ::= '-' <Value>
     |  '!' <Value>
     |  '~' <Value>
     |  <Value>

<Method Call>
    ::= <Field Access> '(' <Arg List Opt> ')'

<Array Access>
    ::= <Qualified ID> '[' <Expression> ']'
     |  <Array Access> '[' <Expression> ']'
     |  <Method Call> '[' <Expression> ']'
     |  <Object> '.' <Qualified ID> '[' <Expression> ']'
     |  <Array Access> '.' <Qualified ID> '[' <Expression> ']'
     |  <Method Call> '.' <Qualified ID> '[' <Expression> ']'

<Field Access>
    ::= <Qualified ID>
     |  <Object> '.' <Qualified ID>
     |  <Method Call> '.' <Qualified ID>
     |  <Array Access> '.' <Qualified ID>

<Value> 
    ::= '(' <Expression> ')'
     |  <Literal>
     |  <Method Call>
     |  <Member Access>
     |  this
     |  nameof '(' <Simple Type> ')'
     |  new <Simple Type> '(' <Arg List Opt> ')'

<Member Access>
    ::= <Array Access>
     |  <Field Access>

! Arguments

<Arg List Opt>
    ::= <Arg List>
     |

<Arg List>
    ::= <Argument> ',' <Arg List>
     |  <Argument>

<Argument>
    ::= <Expression>

! Statements

<Stm List>
    ::= <Statement> <Stm List>
     |  <Statement>

<Stm Block>
    ::= <NL> IndentInc <Stm List> IndentDec <NL Opt>
     |  <NL>

<Statement>
    ::= <Variable Declarator> <NL>
     |  if <Expression> ':' <Stm Block> <Else Statement Opt>
     |  foreach <Variable Declarator Uninitialized> in <Expression> ':' <Stm Block>
     |  while <Expression> ':' <Stm Block>
     |  switch <Expression> ':' <Switch Section Block>
     |  try ':' <Stm Block> <Catch Clause List Opt> <Finally Clause Opt>
     |  break <NL>
     |  continue <NL>
     |  pass <NL>
     |  return <NL>
     |  return <Expression> <NL>
     |  throw <NL>
     |  throw <Expression> <NL>
     |  delete <Expression> <NL>
     |  <Assignment Expression> <NL> ! field or variable assignment
     |  <Method Call> <NL>
     |  init <Object> '(' <Arg List Opt> ')' <NL>

<Else Statement Opt>
    ::= elseif <Expression> ':' <Stm Block> <Else Statement Opt>
     |  else ':' <Stm Block>
     |

<Variable Declarator>
    ::= <Variable Declarator Uninitialized>
     |  <Variable Declarator Initialized>

<Variable Declarator Uninitialized>
    ::= <Type> Identifier

<Variable Declarator Initialized>
    ::= <Type> Identifier '=' <Variable Initializer>

<Variable Initializer>
    ::= <Expression>
     |  <Array Initializer>

! Switch Clauses
<Switch Section Block> 
    ::= <NL> IndentInc <Switch Section List> IndentDec <NL Opt>
     |  <NL>

<Switch Section List>
    ::= <Switch Label> <Switch Section List> 
     |  <Switch Label>
     |  <Switch Default>

<Switch Label>
    ::= case <Expression> ':' <Stm Block>

<Switch Default>
    ::= default ':' <Stm Block>

! Catch Clauses

<Catch Clause List Opt>
    ::= <Catch Clause> <Catch Clause List Opt>
     |  

<Catch Clause>
    ::= catch <Simple Type> Identifier ':' <Stm Block>
     |  catch <Simple Type> ':' <Stm Block>
     |  catch ':' <Stm Block>

<Finally Clause Opt>
    ::= finally ':' <Stm Block>
     |

! Modifiers

<Modifier>
    ::= abstract
     |  override
     |  sealed
     |  static
     |  <Access>

<Access>
    ::= private
     |  protected
     |  public
     |  internal

<Modifier List Opt>
    ::= <Modifier> <Modifier List Opt>
     |  

! Classes

<Class Decl>
    ::= <Modifier List Opt> class Identifier <Class Size Opt> <Class Base Opt> ':' <Class Item Block>

<Class Size Opt>
    ::= '[' DecimalLiteral ']'
     |

<Class Base Opt>
    ::= inherits <Simple Type>
     |

<Class Item Block>
    ::= <NL> IndentInc <Class Item List> IndentDec <NL Opt>
     |  <NL>

<Class Item List>
    ::= <Class Item> <Class Item List>
     |  <Class Item>

<Class Item>
    ::= <Method Dec>
     |  <Field Dec>
     |  <Constructor Dec>
     |  <Destructor Dec>
     |  <Type Decl>

! Class Items
<Field Dec>
    ::= <Modifier List Opt> <Variable Declarator> <NL>

<Method Dec>
    ::= <Modifier List Opt> <Type> Identifier '(' <Formal Param List Opt> ')' ':' <Stm Block>
     |  <Modifier List Opt> void Identifier '(' <Formal Param List Opt> ')' ':' <Stm Block>

<Formal Param List Opt>
    ::= <Formal Param List>
     |  

<Formal Param List>
    ::= <Formal Param> ',' <Formal Param List>
     |  <Formal Param>

<Formal Param>
    ::= <Type> Identifier

<Type Decl>
    ::= <Class Decl>

! Constructor / Destructor Declarations

<Constructor Dec>
    ::= <Modifier List Opt> ctor Identifier '(' <Formal Param List Opt> ')' ':' <Stm Block>

<Destructor Dec>
    ::= <Modifier List Opt> dctor Identifier '(' ')' ':' <Stm Block>

! Arrays
<Array Initializer>
    ::= '[' <Variable Initializer List> ']'
     |  '[' ']'

<Variable Initializer List>
    ::= <Variable Initializer> ',' <Variable Initializer List>
     |  <Variable Initializer>

